external function Boolean LoggedInTest();
external procedure ExtractObjWithSeparator(string,string,Boolean,var Integer,var string);
external function string 255 StrReplace(string,string,string);

webpublic
global procedure WebLoadSHVc()
begin
	record SHVc SHr;
  row SHVc SHrw;
  integer i,mtrw,tmp1,tmp2;
  string 5 nl,delim;
  string 255 param;
  
  if (LoggedInTest()) then begin
    //nl = "<br>";
    //delim = " | ";
    nl = chr(13) & chr(10);
    delim = ",";
    //SHr.SerNr = "25879";
    param = WebGetArg("param");
    if nonblank (param) then begin
      SHr.SerNr = param;
      if readfirstmain(SHr,1,true) then begin
        if (SHr.OKFlag==0) then begin
          WebOutString(SHr.CustCode & " - " & SHr.Addr0);
          mtrw = matrowcnt(SHr);
          for (i=0;i<mtrw;i=i+1) begin
            MatRowGet(SHr,i,SHrw);
            tmp1 = SHrw.Ordered;
            tmp2 = SHrw.Ship;
            if nonblank(tmp1) and tmp1!=0 then begin
              WebOutString(nl & i & delim & SHrw.ArtCode & delim & SHrw.Spec & delim & tmp1 & delim & tmp2);
            end;
          end;
        end else begin
          WebOutString("oked");
        end;
      end else begin
        WebOutString("noindb");
      end;
    end else begin
      WebOutString("noshvcnr");
    end;
  end;
  return;
end;

webpublic
global 
updating procedure WebSaveSHVc()
begin
  area aPost;
  integer i,pos,rownr,ship;
  longint linesCnt;
  string 255 line,tstr;
  record SHVc SHr;
  row SHVc SHrw;
  boolean chng;
  
  if (LoggedInTest()) then begin
    SHr.SerNr = WebGetArg("param");
    readfirstmain(SHr,1,true);
    chng = false;
    webgetpostdata(aPost);
    linesCnt = CountLinesInArea(aPost);
    for (i=0;i<linesCnt;i=i+1) begin
      line = GetLineFromArea(aPost,i);
      pos = 0;
      ExtractObjWithSeparator(";",line,true,pos,tstr);
        tstr = StrReplace(tstr,chr(0),"");  tstr = StrReplace(tstr,chr(10),""); tstr = StrReplace(tstr,chr(13),"");
        rownr = StringToInt(tstr);
      ExtractObjWithSeparator(";",line,true,pos,tstr);
        tstr = StrReplace(tstr,chr(0),"");  tstr = StrReplace(tstr,chr(10),""); tstr = StrReplace(tstr,chr(13),"");
        ship = StringToInt(tstr);
      MatRowGet(SHr,rownr,SHrw);
      if (SHrw.Ship != ship) then begin
        SHrw.Ship = ship;
        matrowput(SHr,rownr,SHrw);
        chng = true;
      end;
    end;
    if (chng) then begin
      if (RecordStore(SHr,true)) begin
        WebOutString("ok");
      end else begin
        WebOutString("nok");
      end;
    end else begin
      WebOutString("ok");
    end;
  end else begin
    WebOutString("nli");
  end;
  return;
end;

webpublic
global procedure WebLoadSHVcTemp()
begin
	record INVc INr;
  string 5 nl,delim;
  
  if (LoggedInTest()) then begin
    //nl = "<br>";
    //delim = " | ";
    nl = chr(13) & chr(10);
    delim = ",";
    Randomize;
    INr.Code = "1665147";
    readfirstmain(INr,1,true);
    WebOutString(INr.Code & delim & INr.Name & delim & Random(1,10) & delim & 0);
    INr.Code = "3065022";
    readfirstmain(INr,1,true);
    WebOutString(nl & INr.Code & delim & INr.Name & delim & Random(1,10) & delim & 0);
    INr.Code = "1665401";
    readfirstmain(INr,1,true);
    WebOutString(nl & INr.Code & delim & INr.Name & delim & Random(1,10) & delim & 0);
    INr.Code = "1665301";
    readfirstmain(INr,1,true);
    WebOutString(nl & INr.Code & delim & INr.Name & delim & Random(1,10) & delim & 0);
    INr.Code = "1665376";
    readfirstmain(INr,1,true);
    WebOutString(nl & INr.Code & delim & INr.Name & delim & Random(1,10) & delim & 0);
  end;
  return;
end;

webpublic
global procedure WebFindItem()
begin
  string 255 item,itemcode;
  record INVc INr;
  
  item = WebGetArg("item");
  INr.Code = item;
  if(readfirstmain(INr,1,true))then begin
  	itemcode = INr.Code;
  end else begin
  	INr.BarCode = item;
  	if(readfirstkey("BarCode",INr,1,true))then begin
  		itemcode = INr.Code;
  	end else begin
  		INr.AlternativeCode = item;
  		if(readfirstkey("AlternativeCode",INr,1,true))then begin
  			itemcode = INr.Code;
			end;
  	end;
  end;
  WebOutString(itemcode);
  
  return;
end;


global procedure SOAPLogin()
begin
	record SoapBlock Soap;
	string 50 host,port,path;
	area a_req,replyarea;
	integer i;	
		
		blockload(Soap);
		
		addtexttoarea("<x:Envelope xmlns:x=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:urn=\"urn:Magento\">" & chr(13) & chr(10),a_req);
		addtexttoarea("<x:Header/>" & chr(13) & chr(10),a_req);
		addtexttoarea("<x:Body>" & chr(13) & chr(10),a_req);
		addtexttoarea("<urn:login>" & chr(13) & chr(10),a_req);
		addtexttoarea("<urn:username>" & Soap.Login & "</urn:username>" & chr(13) & chr(10),a_req);
		addtexttoarea("<urn:apiKey>" & Soap.Password & "</urn:apiKey>" & chr(13) & chr(10),a_req);
		addtexttoarea("</urn:login>" & chr(13) & chr(10),a_req);
		addtexttoarea("</x:Body>" & chr(13) & chr(10),a_req);
		addtexttoarea("</x:Envelope>" & chr(13) & chr(10),a_req);
				
		logtext(0,"SOAPLogin " & currenttime & "  " & getarealength(replyarea));
		SendAsyncWebRequest(Soap.Host,Soap.Port,Soap.Port,Soap.Ssl==1,"POST",Soap.Path,"text/xml","",a_req,"SOAPloginReply",20);


	
return;
end;


global updating procedure SOAPloginReply(Area a_reply,Area a_replyheader,boolean timeout)
begin
	xml sopaxml;
	string 200 session;
	boolean check;
	record SoapBlock Soap;
	
	if(getarealength(a_reply)>0)then begin	
		check = getstringfromarea(a_reply,0,18)=="<?xml version=\"1.0";
		if(check)then begin
			sopaxml = ParseXMLArea(a_reply);
			//logtext(0,xmlget(sopaxml,"SOAP-ENV:Envelope/SOAP-ENV:Body/ns1:loginResponse/loginReturn"));
			session = xmlget(sopaxml,"SOAP-ENV:Envelope/SOAP-ENV:Body/ns1:loginResponse/loginReturn");
			if(nonblank(session))then begin
				logtext(0,"SOAP session " & session);
				blockload(Soap);
					Soap.Session = session;
					Soap.LastSesDate = currentdate;
					Soap.LastSesTime = currenttime;
				blockstore(Soap);
			end else begin
				logtext(0,"error session");
			end;
		end else begin
			logtext(0,"error check " & getstringfromarea(a_reply,0,18));
		end;
	end else begin
		logtext(0,"Error length");
	end;
	
return;
end;

global procedure SOAPUpdateStatus(string ordnr, string status)
begin
	record SoapBlock Soap;
	string 50 host,port,path;
	area a_req,replyarea;
	integer i;	
		
		blockload(Soap);
				
		addtexttoarea("<x:Envelope xmlns:x=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:urn=\"urn:Magento\">" & chr(13) & chr(10),a_req);
		addtexttoarea("<x:Header/>" & chr(13) & chr(10),a_req);
			addtexttoarea("<x:Body>" & chr(13) & chr(10),a_req);
				addtexttoarea("<urn:salesOrderAddComment>" & chr(13) & chr(10),a_req);
					addtexttoarea("<urn:sessionId>" & Soap.Session & "</urn:sessionId>" & chr(13) & chr(10),a_req);
					addtexttoarea("<urn:orderIncrementId>" & ordnr & "</urn:orderIncrementId>" & chr(13) & chr(10),a_req);
					addtexttoarea("<urn:status>" & status & "</urn:status>" & chr(13) & chr(10),a_req);
				addtexttoarea("</urn:salesOrderAddComment>" & chr(13) & chr(10),a_req);
			addtexttoarea("</x:Body>" & chr(13) & chr(10),a_req);
		addtexttoarea("</x:Envelope>" & chr(13) & chr(10),a_req);
				
		logtext(0,"SOAPUpdateStatus " & currenttime & "  " & getarealength(replyarea) & " " & ordnr & " " & status);
		SendAsyncWebRequest(Soap.Host,Soap.Port,Soap.Port,Soap.Ssl==1,"POST",Soap.Path,"text/xml","",a_req,"SOAPUpdateStatusReply",20);


	
return;
end;


global updating procedure SOAPUpdateStatusReply(Area a_reply,Area a_replyheader,boolean timeout)
begin
	xml sopaxml;
	string 200 session;
	boolean check;
	record SoapBlock Soap;
	
	writeareatofile(a_reply,"MagentaStatusReply.txt",1);
	
return;
end;