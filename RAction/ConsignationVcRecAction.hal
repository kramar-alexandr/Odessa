external procedure SortStrArray(var array string);
external function roundmode SetRoundModeD(Integer);
external function val AbsoluteVal(val);

global procedure CrConsigSaleSumUp(var record ConsSaleVc ConsSaler)
begin
	row ConsSaleVc ConsSalerw;
	integer i,mtrw;
	val sum,corsum,qty,corqty,salesum;
	record PLVc PLr;
	record SalesDataVc SalesDatar;
	boolean TrHs;
	val ccsum;
	
	mtrw = matrowcnt(ConsSaler);
	For(i=0;i<mtrw;i=i+1) begin
	  matrowget(ConsSaler,i,ConsSalerw);
		
		
		if(true)then begin
			SalesDatar.InvNr = ConsSalerw.Invoice;
			TrHs = true;
			while(loopmain(SalesDatar,1,TrHs))begin
				if(SalesDatar.InvNr!=ConsSalerw.Invoice)then begin
					TrHs = false;
				end;
				
				if(TrHs)then begin
					if(SalesDatar.ArtCode==ConsSalerw.ArtCode)then begin
						ConsSalerw.Price = round(SalesDatar.CommisionPrice,SetRoundModeD(2));
						ConsSalerw.Sum = round(ConsSalerw.Price * ConsSalerw.Qty,SetRoundModeD(2));
						matrowput(ConsSaler,i,ConsSalerw);
						TrHS = false;
					end;
				end;
			end;
			resetloop(SalesDatar);
		end;
		
		ConsSalerw.Sum = round(ConsSalerw.SelQty * ConsSalerw.SelPrice,SetRoundModeD(2));
		
		matrowput(ConsSaler,i,ConsSalerw);
	  
	  if(ConsSalerw.Price>ConsSalerw.SelPrice)then begin
			ConsSalerw.SelQty = 0;			
		end;
		ConsSalerw.TermSum = round(ConsSalerw.SelQty * ConsSalerw.TermPrice,SetRoundModeD(2));
		matrowput(ConsSaler,i,ConsSalerw);
		
	  corqty = corqty + ConsSalerw.SelQty;
	  qty = qty + ConsSalerw.Qty;
	  corsum = corsum + round(ConsSalerw.SelQty * ConsSalerw.SelPrice,SetRoundModeD(2));
	  salesum = salesum + round(ConsSalerw.Qty * ConsSalerw.SelPrice,SetRoundModeD(2));
	  sum = sum + round(ConsSalerw.Qty * ConsSalerw.Sum,SetRoundModeD(2));
	  ccsum = ccsum + ConsSalerw.TermSum;
	  
	end; 
	ConsSaler.TotSum = sum;
	ConsSaler.TotSaleSum = salesum;
	ConsSaler.TotQty = qty;
	ConsSaler.TotCorSum = corsum;
	ConsSaler.CorQty = corqty;
	ConsSaler.CCSum = ccsum;
	logtext(0,ConsSaler.TotSaleSum & " ++++");
return;
end;

global updating procedure RecalcSumSalesMn(record RcVc RepSpec)
begin
	record ConsSaleVc ConsSaler;
	row ConsSaleVc ConsSalerw;
	record SalesDataVc SalesDatar;
	integer i,mtrw;
	boolean TrHs;
	
	ConsSaler.SerNr = RepSpec.long1;
	if(readfirstmain(ConsSaler,1,true))then begin
		mtrw = matrowcnt(ConsSaler);
		For(i=0;i<mtrw;i=i+1) begin
	  	matrowget(ConsSaler,i,ConsSalerw);
	  	
	  	SalesDatar.InvNr = ConsSalerw.Invoice;
			TrHs = true;
			while(loopmain(SalesDatar,1,TrHs))begin
				if(SalesDatar.InvNr!=ConsSalerw.Invoice)then begin
					TrHs = false;
				end;
				
				if(TrHs)then begin
					if(SalesDatar.ArtCode==ConsSalerw.ArtCode)then begin
						ConsSalerw.SelPrice = round(AbsoluteVal(SalesDatar.Sum*SalesDatar.Rate/SalesDatar.Quant),SetRoundModeD(2));
						ConsSalerw.TermPrice = round(AbsoluteVal(SalesDatar.PayedByCCard/SalesDatar.Quant),SetRoundModeD(2));						
						matrowput(ConsSaler,i,ConsSalerw);
						TrHS = false;
					end;
				end;
			end;
			resetloop(SalesDatar);
			
		end; 
		CrConsigSaleSumUp(ConsSaler);
		recordstore(ConsSaler,true);
	end;
return;
end;


global
procedure MySortStringArray(var array string astr,integer cnt)
begin
	integer i,j;
	string 100 tmp1,tmp2;
	
	if(cnt>1)then begin
		for(j=0;j<cnt;j=j+1)begin
			for(i=0;i<cnt-1;i=i+1)begin
				if(uppercase(astr[i])>uppercase(astr[i+1]))then begin
					tmp1 = astr[i];
					tmp2 = astr[i+1];
					astr[i] = tmp2;
					astr[i+1] = tmp1;
				end;
			end;
		end;
	end;
		

return;
end;

global
updating function LongInt ConsignationVcRecordCheck(var record ConsignationVc Consignationr,record ConsignationVc Consignation2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Integer cnt;  
  string 255 tstr,errstr;
  record AccVc Accr;
  record LocGrVc LocGrr;
  record PISVc PISr;
  record CUUserLabelBlock CUUerLb;
  record CountryVc Countryr;

  res = 0;
	
	if(Consignationr.SerNr<0)then begin
		Consignationr.SerNr = NextSerNr("ConsignationVc",CurrentDate,-1,false,"");
	end;
	
	if(blankdate(Consignationr.TransDate))then begin
		RecordCheckError(1058,"",-1,"TransDate");      
    res = -1; 
    goto LConsignationVcRecordCheck;
	end;
	
  if (blank(Consignationr.Location)) then begin
    RecordCheckError(1058,"",-1,"Location");      
    res = -1; 
    goto LConsignationVcRecordCheck;
  end;
    
   
LConsignationVcRecordCheck:;
  ConsignationVcRecordCheck = res;
  RETURN;
END;




global
updating function LongInt SHPackListVcRecordCheck(var record SHPackListVc SHPackListr,record SHPackListVc SHPackList2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Integer cnt;  
  string 255 tstr,errstr;
  record AccVc Accr;
  record LocGrVc LocGrr;
  record PISVc PISr;
  record CUUserLabelBlock CUUerLb;
  record CountryVc Countryr;

  res = 0;
	
	if(SHPackListr.SerNr<0)then begin
		SHPackListr.SerNr = NextSerNr("SHPackListVc",CurrentDate,-1,false,"");
	end;
	
	if(blankdate(SHPackListr.ListDate))then begin
		SHPackListr.ListDate = currentdate;
	end;
	
	if(blankdate(SHPackListr.ListDate))then begin
		RecordCheckError(1058,"",-1,"ListDate");      
    res = -1; 
    goto LSHPackListVcRecordCheck;
	end;
	
  if (blank(SHPackListr.Location)) then begin
    RecordCheckError(1058,"",-1,"Location");      
    res = -1; 
    goto LSHPackListVcRecordCheck;
  end;
    
   
LSHPackListVcRecordCheck:;
  SHPackListVcRecordCheck = res;
  RETURN;
END;




global updating procedure ConsignationVcUpdateIH(record ConsignationVc Consignationr, boolean addflag)
begin
	record ItemHistVc IHr;
	row ConsignationVc Consignationrw;
	boolean testf,TrHs;
	integer mtrw,i;
	
	if(addflag==false)then begin
		IHr.FileName = "ConsignationVc";
		IHr.TransNr = Consignationr.SerNr;
		TrHs = true;
		while(loopkey("FNTransNr",IHr,2,TrHs))begin
			if(IHr.FileName!="ConsignationVc")then begin TrHs = false; end;
			if(IHr.TransNr!=Consignationr.SerNr)then begin TrHs = false; end;
			
			if(TrHs)then begin
				recorddelete(IHr);
				stepback(IHr);
			end;
		end;
	end else begin
		mtrw = matrowcnt(Consignationr);
		For(i=0;i<mtrw;i=i+1) begin
	  	matrowget(Consignationr,i,Consignationrw);
	  	IHr.SerNr = NextSerNr("ItemHistVc",CurrentDate,-1,false,"");
	  	IHr.FileName = "ConsignationVc";
	  	IHr.TransNr = Consignationr.SerNr;
	  	IHr.TransDate = Consignationr.TransDate;
	  	IHr.FIFODate = Consignationr.TransDate;
	  	IHr.Location = Consignationr.Location;
	  	IHr.Comitent = Consignationr.Comitent;
	  	IHr.StockAffectf = 0;
	  	
	  	IHr.ArtCode = Consignationrw.ArtCode;
	  	IHr.Qty = Consignationrw.Qty;
	  	IHr.TotCostPrice = Consignationrw.Price;
	  	IHr.Row = i;
	  	recordstore(IHr,false);
	  	
		end; 
	end;
return;
end;

global updating procedure ConsignationVcClearIH()
begin
	record ItemHistVc IHr;
	row ConsignationVc Consignationrw;
	boolean testf,TrHs;
	integer mtrw,i;
	
	IHr.FileName = "ConsignationVc";
	TrHs = true;
	while(loopkey("FNTransNr",IHr,1,TrHs))begin
		if(IHr.FileName!="ConsignationVc")then begin TrHs = false; end;
		
		if(TrHs)then begin
			recorddelete(IHr);
			stepback(IHr);
		end;
	end;

return;
end;


global updating procedure ConsInVcUpdateIH(record ConsInVc Consignationr, boolean addflag)
begin
	record ItemHistVc IHr;
	row ConsInVc Consignationrw;
	boolean testf,TrHs;
	integer mtrw,i;
	
	if(addflag==false)then begin
		IHr.FileName = "ConsInVc";
		IHr.TransNr = Consignationr.SerNr;
		TrHs = true;
		while(loopkey("FNTransNr",IHr,2,TrHs))begin
			if(IHr.FileName!="ConsInVc")then begin TrHs = false; end;
			if(IHr.TransNr!=Consignationr.SerNr)then begin TrHs = false; end;
			
			if(TrHs)then begin
				recorddelete(IHr);
				stepback(IHr);
			end;
		end;
	end else begin
		mtrw = matrowcnt(Consignationr);
		For(i=0;i<mtrw;i=i+1) begin
	  	matrowget(Consignationr,i,Consignationrw);
	  	IHr.SerNr = NextSerNr("ItemHistVc",CurrentDate,-1,false,"");
	  	IHr.FileName = "ConsInVc";
	  	IHr.TransNr = Consignationr.SerNr;
	  	IHr.TransDate = Consignationr.TransDate;
	  	IHr.FIFODate = Consignationr.TransDate;
	  	IHr.Location = Consignationr.Location;
	  	IHr.Comitent = Consignationr.Comitent;
	  	IHr.StockAffectf = 0;
	  	
	  	IHr.ArtCode = Consignationrw.ArtCode;
	  	IHr.TotCostPrice = Consignationrw.Price;
	  	IHr.Qty = Consignationrw.Qty;
	  	IHr.Qty2 = Consignationrw.Qty;
	  	IHr.Row = i;
	  	recordstore(IHr,false);
	  	
		end; 
	end;
return;
end;

function boolean TestKonsigAvailQty(string artCode,string location,string comitent,val remqty)
begin
	boolean res;
	record ItemHistVc IHr;
	boolean testf,TrHs;
	integer mtrw,i;
	val calcqty;
	
	res = false;
	
	IHr.ArtCode = artCode;
	IHr.FileName = "ConsInVc";
	TrHs = true;
	while(loopkey("FNArtCode",IHr,2,TrHs))begin
		testf = true;
		if(IHr.FileName!="ConsInVc")then begin TrHs = false; testf = false; end;
		if(IHr.ArtCode!=artCode)then begin TrHs = false; testf = false; end;
		if(IHr.Qty2<=0)then begin testf = false; end;
		if(IHr.Location!=location)then begin testf = false; end;
		if(IHr.Comitent!=comitent)then begin testf = false; end;
		
		if(testf)then begin
			calcqty = calcqty + IHr.Qty2;
		end;
		
	end;
	
	if(remqty<=calcqty)then begin res = true; end;
		
	TestKonsigAvailQty = res;
return;
end;

global updating procedure ConsSaleVcUpdateIH(var record ConsSaleVc ConsSaler, boolean addflag)
begin
	record ItemHistVc IHr,sourceIHr;
	row ConsSaleVc ConsSalerw;
	boolean testf,TrHs,foundff;
	integer mtrw,i;
	val remqty;
	record PLVc PLr;
	
	if(addflag==false)then begin
		IHr.FileName = "ConsSaleVc";
		IHr.TransNr = ConsSaler.SerNr;
		TrHs = true;
		while(loopkey("FNTransNr",IHr,2,TrHs))begin
			if(IHr.FileName!="ConsSaleVc")then begin TrHs = false; end;
			if(IHr.TransNr!=ConsSaler.SerNr)then begin TrHs = false; end;
			
			if(TrHs)then begin
				sourceIHr.SerNr = IHr.Source;
				if(readfirstmain(sourceIHr,1,true))then begin
					sourceIHr.Qty2 = sourceIHr.Qty2 - IHr.Qty;
					recordstore(sourceIHr,true);
				end;
				recorddelete(IHr);
				stepback(IHr);
			end;
		end;
		mtrw = matrowcnt(ConsSaler);
		For(i=0;i<mtrw;i=i+1) begin
			matrowget(ConsSaler,i,ConsSalerw);
				ConsSalerw.Price = blankval;
				ConsSalerw.Sum = blankval;
			matrowput(ConsSaler,i,ConsSalerw);
		end;
		ConsSaler.TotSum = 0;
	end else begin
		mtrw = matrowcnt(ConsSaler);
		For(i=0;i<mtrw;i=i+1) begin
			matrowget(ConsSaler,i,ConsSalerw);
			remqty = ConsSalerw.Qty;
			ConsSalerw.Qty = 0;
			TrHs = true;
			sourceIHr.ArtCode = ConsSalerw.ArtCode;
			sourceIHr.FileName = "ConsInVc";
			foundff = false;
			while(loopkey("FNArtCode",sourceIHr,2,TrHs))begin
				testf = true;
				if(sourceIHr.FileName!="ConsInVc")then begin TrHs = false; testf = false; end;
				if(sourceIHr.ArtCode!=ConsSalerw.ArtCode)then begin TrHs = false; testf = false; end;
				if(sourceIHr.Qty2<=0)then begin testf = false; end;
				if(sourceIHr.Location!=ConsSaler.Location)then begin testf = false; end;
				if(remqty<=0)then begin TrHs = false; testf = false; end;
				
				if(testf)then begin
					recordnew(IHr);
					IHr.SerNr = NextSerNr("ItemHistVc",CurrentDate,-1,false,"");
					IHr.FileName = "ConsSaleVc";
					IHr.TransNr = ConsSaler.SerNr;
					IHr.TransDate = ConsSaler.TransDate;
					IHr.FIFODate = ConsSaler.TransDate;
					IHr.Location = ConsSaler.Location;
					IHr.Comitent = ConsSaler.Comitent;
					IHr.StockAffectf = 0;
			
					IHr.ArtCode = ConsSalerw.ArtCode;
					
					if(sourceIHr.Qty2>remqty)then begin
						IHr.Source = sourceIHr.SerNr;
						IHr.Qty = -remqty;
						IHr.TotCostPrice = sourceIHr.TotCostPrice;
						ConsSalerw.Qty = ConsSalerw.Qty - IHr.Qty;
						//ConsSalerw.SelQty = ConsSalerw.Qty;// Edit ************************** BPI Ukraine - KramarAlexandr - Wednesday, 6 June 2018 17:40:49
						ConsSalerw.Sum = ConsSalerw.Sum - IHr.TotCostPrice * IHr.Qty;
						ConsSalerw.Price = round(ConsSalerw.Sum / ConsSalerw.Qty,SetRoundModeD(2));
						ConsSalerw.Sum = ConsSalerw.Price * ConsSalerw.Qty;
						ConsSaler.TotSum = ConsSaler.TotSum - IHr.TotCostPrice * IHr.Qty;
						matrowput(ConsSaler,i,ConsSalerw);
						sourceIHr.Qty2 = sourceIHr.Qty2 - remqty;
						recordstore(sourceIHr,true);
						foundff = true;
						remqty = 0;
					end else begin
						IHr.Source = sourceIHr.SerNr;
						IHr.Qty = -sourceIHr.Qty2;
						IHr.TotCostPrice = sourceIHr.TotCostPrice;
						ConsSalerw.Qty = ConsSalerw.Qty - IHr.Qty;
						//ConsSalerw.SelQty = ConsSalerw.Qty;// Edit ************************** BPI Ukraine - KramarAlexandr - Wednesday, 6 June 2018 17:40:50
						ConsSalerw.Sum = ConsSalerw.Sum - IHr.TotCostPrice * IHr.Qty;
						ConsSalerw.Price = round(ConsSalerw.Sum / ConsSalerw.Qty,SetRoundModeD(2));
						ConsSalerw.Sum = ConsSalerw.Price * ConsSalerw.Qty;
						ConsSaler.TotSum = ConsSaler.TotSum - IHr.TotCostPrice * IHr.Qty;
						matrowput(ConsSaler,i,ConsSalerw);
						remqty = remqty - sourceIHr.Qty2;
						sourceIHr.Qty2 = 0;
						recordstore(sourceIHr,true);
						foundff = true;
					end;
					
					IHr.Row = i;
					recordstore(IHr,false);
				end;
	  	end;
	  	resetloop(sourceIHr);
	  	if(remqty>0 and foundff)then begin
	  		ConsSalerw.Qty = remqty;
	  		ConsSalerw.SelQty = ConsSalerw.Qty;
	  		matrowinsert(ConsSaler,i+1,ConsSalerw);
	  		mtrw = mtrw + 1;
	  		i=i+1;
	  	end;
		end; 
	end;
return;
end;

global updating procedure ConsBrakVcUpdateIH(var record ConsBrakVc ConsBrakr, boolean addflag)
begin
	record ItemHistVc IHr,sourceIHr;
	row ConsBrakVc ConsBrakrw;
	boolean testf,TrHs;
	integer mtrw,i;
	val remqty;
	
	if(addflag==false)then begin
		IHr.FileName = "ConsBrakVc";
		IHr.TransNr = ConsBrakr.SerNr;
		TrHs = true;
		while(loopkey("FNTransNr",IHr,2,TrHs))begin
			if(IHr.FileName!="ConsBrakVc")then begin TrHs = false; end;
			if(IHr.TransNr!=ConsBrakr.SerNr)then begin TrHs = false; end;
			
			if(TrHs)then begin
				sourceIHr.SerNr = IHr.Source;
				if(readfirstmain(sourceIHr,1,true))then begin
					sourceIHr.Qty2 = sourceIHr.Qty2 - IHr.Qty;
					recordstore(sourceIHr,true);
				end;
				recorddelete(IHr);
				stepback(IHr);
			end;
		end;
		mtrw = matrowcnt(ConsBrakr);
		For(i=0;i<mtrw;i=i+1) begin
			matrowget(ConsBrakr,i,ConsBrakrw);
				ConsBrakrw.Price = blankval;
				ConsBrakrw.Sum = blankval;
			matrowput(ConsBrakr,i,ConsBrakrw);
		end;
		ConsBrakr.TotSum = 0;
	end else begin
		mtrw = matrowcnt(ConsBrakr);
		For(i=0;i<mtrw;i=i+1) begin
			matrowget(ConsBrakr,i,ConsBrakrw);
			remqty = ConsBrakrw.Qty;
			
			TrHs = true;
			sourceIHr.ArtCode = ConsBrakrw.ArtCode;
			sourceIHr.FileName = "ConsInVc";
			while(loopkey("FNArtCode",sourceIHr,2,TrHs))begin
				testf = true;
				if(sourceIHr.FileName!="ConsInVc")then begin TrHs = false; testf = false; end;
				if(sourceIHr.ArtCode!=ConsBrakrw.ArtCode)then begin TrHs = false; testf = false; end;
				if(sourceIHr.Qty2<=0)then begin testf = false; end;
				if(sourceIHr.Location!=ConsBrakr.Location)then begin testf = false; end;
				if(remqty<=0)then begin TrHs = false; testf = false; end;
				
				if(testf)then begin
					recordnew(IHr);
					IHr.SerNr = NextSerNr("ItemHistVc",CurrentDate,-1,false,"");
					IHr.FileName = "ConsBrakVc";
					IHr.TransNr = ConsBrakr.SerNr;
					IHr.TransDate = ConsBrakr.TransDate;
					IHr.FIFODate = ConsBrakr.TransDate;
					IHr.Location = ConsBrakr.Location;
					IHr.Comitent = ConsBrakr.Comitent;
					IHr.StockAffectf = 0;
			
					IHr.ArtCode = ConsBrakrw.ArtCode;
					
					if(sourceIHr.Qty2>remqty)then begin
						IHr.Source = sourceIHr.SerNr;
						IHr.Qty = -remqty;
						IHr.TotCostPrice = sourceIHr.TotCostPrice;
						ConsBrakrw.Sum = ConsBrakrw.Sum - IHr.TotCostPrice * IHr.Qty;
						ConsBrakrw.Price = ConsBrakrw.Sum / ConsBrakrw.Qty;
						ConsBrakr.TotSum = ConsBrakr.TotSum - IHr.TotCostPrice * IHr.Qty;
						matrowput(ConsBrakr,i,ConsBrakrw);
						sourceIHr.Qty2 = sourceIHr.Qty2 - remqty;
						recordstore(sourceIHr,true);
						remqty = 0;
					end else begin
						IHr.Source = sourceIHr.SerNr;
						IHr.Qty = -sourceIHr.Qty2;
						IHr.TotCostPrice = sourceIHr.TotCostPrice;
						ConsBrakrw.Sum = ConsBrakrw.Sum - IHr.TotCostPrice * IHr.Qty;
						ConsBrakrw.Price = ConsBrakrw.Sum / ConsBrakrw.Qty;
						ConsBrakr.TotSum = ConsBrakr.TotSum - IHr.TotCostPrice * IHr.Qty;
						matrowput(ConsBrakr,i,ConsBrakrw);
						remqty = remqty - sourceIHr.Qty2;
						sourceIHr.Qty2 = 0;
						recordstore(sourceIHr,true);
					end;
					
					IHr.Row = i;
					recordstore(IHr,false);
				end;
	  	end;
	  	resetloop(sourceIHr);
	  	
		end; 
	end;
return;
end;

global
updating function LongInt ConsignationVcRecordUpdateAfter(var record ConsignationVc Consignationr,record ConsignationVc Consignation2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  if(Consignationr.OKFlag==1 and Consignation2r.OKFlag==0)then begin
		ConsignationVcUpdateIH(Consignationr,true);
 	end;
 	if(Consignationr.OKFlag==0 and Consignation2r.OKFlag==1)then begin
		ConsignationVcUpdateIH(Consignationr,false);
 	end;
 	
  ConsignationVcRecordUpdateAfter = res;
  RETURN;
END;

global
updating function LongInt ConsignationVcRecordSaveAfter(var record ConsignationVc Consignationr,record ConsignationVc Consignation2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  

 	if(Consignationr.OKFlag==1)then begin
		ConsignationVcUpdateIH(Consignationr,true);
 	end;
 	
  ConsignationVcRecordSaveAfter = res;
  RETURN;
END;

global
updating function LongInt ConsInVcRecordUpdateAfter(var record ConsInVc Consignationr,record ConsInVc Consignation2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  if(Consignationr.OKFlag==1 and Consignation2r.OKFlag==0)then begin
		ConsInVcUpdateIH(Consignationr,true);
 	end;
 	if(Consignationr.OKFlag==0 and Consignation2r.OKFlag==1)then begin
		ConsInVcUpdateIH(Consignationr,false);
 	end;
 	
  ConsInVcRecordUpdateAfter = res;
  RETURN;
END;

global
updating function LongInt ConsInVcRecordSaveAfter(var record ConsInVc Consignationr,record ConsInVc Consignation2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  

 	if(Consignationr.OKFlag==1)then begin
		ConsInVcUpdateIH(Consignationr,true);
 	end;
 	
  ConsInVcRecordSaveAfter = res;
  RETURN;
END;

global
updating function LongInt ConsSaleVcRecordUpdate(var record ConsSaleVc ConsSaler,record ConsSaleVc ConsSale2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  
  if(ConsSaler.OKFlag==1 and ConsSale2r.OKFlag==0)then begin
		ConsSaleVcUpdateIH(ConsSaler,true);
 	end;
 	if(ConsSaler.OKFlag==0 and ConsSale2r.OKFlag==1)then begin
		ConsSaleVcUpdateIH(ConsSaler,false);
 	end;
 	CrConsigSaleSumUp(ConsSaler);
  ConsSaleVcRecordUpdate = res;
  RETURN;
END;

global
updating function LongInt ConsSaleVcRecordSave(var record ConsSaleVc ConsSaler,record ConsSaleVc ConsSale2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  

 	if(ConsSaler.OKFlag==1)then begin
		ConsSaleVcUpdateIH(ConsSaler,true);
		CrConsigSaleSumUp(ConsSaler);
 	end;
 	
  ConsSaleVcRecordSave = res;
  RETURN;
END;

global
updating function LongInt ConsBrakVcRecordUpdate(var record ConsBrakVc ConsBrakr,record ConsBrakVc ConsBrak2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  if(ConsBrakr.OKFlag==1 and ConsBrak2r.OKFlag==0)then begin
		ConsBrakVcUpdateIH(ConsBrakr,true);
 	end;
 	if(ConsBrakr.OKFlag==0 and ConsBrak2r.OKFlag==1)then begin
		ConsBrakVcUpdateIH(ConsBrakr,false);
 	end;
 	
  ConsBrakVcRecordUpdate = res;
  RETURN;
END;

global
updating function LongInt ConsBrakVcRecordSave(var record ConsBrakVc ConsBrakr,record ConsBrakVc ConsBrak2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  

 	if(ConsBrakr.OKFlag==1)then begin
		ConsBrakVcUpdateIH(ConsBrakr,true);
 	end;
 	
  ConsBrakVcRecordSave = res;
  RETURN;
END;


global
updating function LongInt ConsBrakVcRecordCheck(var record ConsBrakVc ConsBrakr,record ConsBrakVc ConsBrak2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  integer i,j,rwcnt;
  row ConsBrakVc ConsBrakrw,prewConsBrakrw;
  val prewqty;
  
  res = 0;
  
  logtext(0,"ConsBrakVcRecordCheck");
  
  rwcnt = matrowcnt(ConsBrakr);
  For(i=0;i<rwcnt;i=i+1) begin
	  matrowget(ConsBrakr,i,ConsBrakrw);
	  prewqty = 0;
	  For(j=0;j<i;j=j+1) begin
	  	matrowget(ConsBrakr,j,prewConsBrakrw);
	  	
	  	if(ConsBrakrw.ArtCode==prewConsBrakrw.ArtCode)then begin
	  		prewqty = prewqty + prewConsBrakrw.Qty;
	  	end;
		end; 
		
		if((ConsBrakrw.Qty+prewqty)>0)then begin
			if(stat==Rs_Insert)then begin
				if(ConsBrakr.OKFlag==1)then begin
					if(TestKonsigAvailQty(ConsBrakrw.ArtCode,ConsBrakr.Location,ConsBrakr.Comitent,ConsBrakrw.Qty+prewqty)==false)then begin
						RecordCheckError(1247,"",i,"ArtCode");      
						res = -1; 
						goto LConsBrakVcRecordCheck;
					end;
				end;
			end;
			if(stat==Rs_Update)then begin
				if(ConsBrakr.OKFlag==1 and ConsBrak2r.OKFlag==0)then begin
					if(TestKonsigAvailQty(ConsBrakrw.ArtCode,ConsBrakr.Location,ConsBrakr.Comitent,ConsBrakrw.Qty+prewqty)==false)then begin
						RecordCheckError(1247,"",i,"ArtCode");      
						res = -1; 
						goto LConsBrakVcRecordCheck;
					end;
				end;
			end;
		end;
	end; 
 
 	LConsBrakVcRecordCheck:;
  ConsBrakVcRecordCheck = res;
  RETURN;
END;

global
updating function LongInt ConsignationVcRecordDuplicate(var record ConsignationVc Consignationr,record ConsignationVc Consignation2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Integer cnt;  
  string 255 tstr,errstr;
  record AccVc Accr;
  record LocGrVc LocGrr;
  record PISVc PISr;
  record CUUserLabelBlock CUUerLb;
  record CountryVc Countryr;
		
	Consignationr.SerNr = -1;
  
  ConsignationVcRecordDuplicate = res;
  RETURN;
END;

procedure GetQtyByBackDate(date td, string artcode, string location, var val resqty)
begin
	record ItemHistVc IHr;
	boolean TrHs,testf;
	record ItemStatusVc ISr;
	val qty;
	
	ISr.Location = location;
	ISr.Code = artcode;
	readfirstmain(ISr,2,true);
	qty = ISr.Instock;
	
	IHr.ArtCode = artcode;
	IHr.Location = location;
	IHr.TransDate = addday(currentdate,1);
	TrHs = true;
	while(loopbackkey("ArtCodeLoc",IHr,3,TrHs))begin
		testf = true;
		if(IHr.ArtCode!=artcode)then begin TrHs = false; testf = false; end;
		if(IHr.Location!=location)then begin TrHs = false; testf = false; end;
		if(IHr.TransDate<td)then begin TrHs = false; testf = false; end;
		if(IHr.StockAffectf==0)then begin testf = false; end;
		
		if(testf)then begin
			qty = qty - IHr.Qty;
		end;
	end;
	
	resqty = qty;
	
return;
end;

global updating procedure ConsignationGenMn(record RcVc RepSpec1)
begin
	record ItemStatusVc ISr;
	record INVc INr;
	record ConsignationVc Consignationr;
	record DIVc DIr,loopDIr;
	record PLVc PLr;
	row ConsignationVc Consignationrw;
	boolean TrHs,testf,TrHs1;
	integer i,mtrw,l,locs;
	val comprice,totsum,totqty,resqty;
	array string 50 locarray;
	record RcVc RepSpec;
	
	recordcopy(RepSpec,RepSpec1);
	
	locarray[0] = "3-RAY";
	locarray[1] = "6-KV";
	locarray[2] = "RYBRAY";
	if(nonblank(RepSpec.f1))then begin
		locarray[0] = RepSpec.f1;
		locs = 1;
	end else begin
		locs = 3;
	end;
	
	for(l=0;l<locs;l=l+1)begin
		RepSpec.f1 = locarray[l];
		if(nonblank(RepSpec.f1))then begin
			testf = true;
		
			DIr.CType = "KOMITENT";
			TrHs1 = true;
			while(loopkey("CType",DIr,1,TrHs1))begin
				testf = true;
				if(DIr.CType!="KOMITENT")then begin TrHs1 = false; testf = false; end;
				if(nonblank(RepSpec.f2) and !setinset(DIr.Code,RepSpec.f2))then begin testf = false; end;
			
				if(testf)then begin
					mtrw = 0;
					totsum = 0;
					totqty = 0;
					recordNew(Consignationr);
					Consignationr.SerNr = NextSerNr("ConsignationVc",CurrentDate,-1,false,"");
					Consignationr.Location = RepSpec.f1;
					Consignationr.TransDate = currentdate;
					Consignationr.Comitent = DIr.Code;
					if(nonblankdate(RepSpec.d1))then begin
						Consignationr.TransDate = RepSpec.d1;
					end;
			
					if(blankdate(RepSpec.d1))then begin
						ISr.Location = RepSpec.f1;
						TrHs = true;
						while(loopkey("Location",ISr,1,TrHs))begin
							testf = true;
							if(ISr.Location!=RepSpec.f1)then begin TrHs = false; testf = false; end;
							if(ISr.Instock<=0)then begin testf = false; end;
				
							if(testf)then begin
								INr.Code = ISr.Code;
								if(readfirstmain(INr,1,true))then begin
									if(!setinset(DIr.Code,INr.DispGroups))then begin
										testf = false;
									end;
								end;
							end;
				
							if(testf)then begin
								PLr.ArtCode = ISr.Code;
								PLr.PLCode = "KOMPR";
								comprice = blankval;
								if(readfirstmain(PLr,2,true))then begin
									comprice = PLr.ExVatPrice;
								end;
								Consignationrw.ArtCode = ISr.Code;
								Consignationrw.Spec = INr.Name;
								Consignationrw.Qty = ISr.Instock;
								Consignationrw.Price = comprice;
								Consignationrw.Sum = comprice * ISr.Instock;
								totsum = totsum + Consignationrw.Sum;
								totqty = totqty + Consignationrw.Qty;
								matrowput(Consignationr,mtrw,Consignationrw);
								mtrw = mtrw + 1;
							end;
						end;
						ResetLoop(ISr);
					end else begin
						INr.Code = "";
						while(loopmain(INr,1,true))begin
							testf = true;
							if(!setinset(DIr.Code,INr.DispGroups))then begin
								testf = false;
							end;
							if(testf)then begin
								GetQtyByBackDate(RepSpec.d1,INr.Code,Consignationr.Location,resqty);
							end;
							if(resqty<=0)then begin testf = false; end;
					
							if(testf)then begin
								PLr.ArtCode = INr.Code;
								PLr.PLCode = "KOMPR";
								comprice = blankval;
								if(readfirstmain(PLr,2,true))then begin
									comprice = PLr.ExVatPrice;
								end;
								Consignationrw.ArtCode = INr.Code;
								Consignationrw.Spec = INr.Name;
								Consignationrw.Qty = resqty;
								Consignationrw.Price = comprice;
								Consignationrw.Sum = comprice * resqty;
								totsum = totsum + Consignationrw.Sum;
								totqty = totqty + Consignationrw.Qty;
								matrowput(Consignationr,mtrw,Consignationrw);
								mtrw = mtrw + 1;
							end;
						end;
						ResetLoop(INr);
					end;
					Consignationr.TotSum = totsum;
					Consignationr.TotQty = totqty;
					Consignationr.OKFlag = 1;
					recordstore(Consignationr,false);
				end;
			end;
			resetloop(DIr);
		end;
	end;
	
return;
end;


global procedure CompareConsignationRn(record RcVc RepSpec)
begin
	record INVc INr;
	record ItemHistVc IHr;
	record ConsignationVc Consignation1r,Consignation2r,ConsignationBigr;
	row ConsignationVc Consignation1rw,Consignation2rw,ConsignationBigrw;
	longint fr,to,ihspos,ihepos;
	integer mtrw,i,j,k,mtrw2,acnt;
	vector boolean vartcode;
	vector val sval,eval,sales,ret,smin,sout;
	vector longint vstransnr,vetransnr,vsrow,verow;
	array string 40 aartcode;
	boolean TrHs,testf;
	
	fr = stringtolongint(firstinrange(RepSpec.f1,10));
	to = stringtolongint(lastinrange(RepSpec.f1,10));
	
	if(fr>0 and to>0)then begin
		if(nonblank(RepSpec.f2) and nonblank(RepSpec.f3))then begin
			Consignation1r.SerNr = fr;
			if(readfirstmain(Consignation1r,1,true) and Consignation1r.Comitent==RepSpec.f2 and Consignation1r.Location==RepSpec.f3)then begin
				Consignation2r.SerNr = to;
				if(readfirstmain(Consignation2r,1,true) and Consignation2r.Comitent==RepSpec.f2 and Consignation2r.Location==RepSpec.f3)then begin
					mtrw = matrowcnt(Consignation1r);
					For(i=0;i<mtrw;i=i+1) begin
	  				matrowget(Consignation1r,i,Consignation1rw);
	  				aartcode[acnt] = Consignation1rw.ArtCode;
	  				sval[aartcode[acnt]] = Consignation1rw.Qty;
						vartcode[aartcode[acnt]] = true;
						vstransnr[aartcode[acnt]] = fr;
						vsrow[aartcode[acnt]] = i;
	  				acnt = acnt + 1;
					end; 
					logtext(0,"1th acnt " & acnt);
					
					mtrw = matrowcnt(Consignation2r);
					For(i=0;i<mtrw;i=i+1) begin
	  				matrowget(Consignation2r,i,Consignation2rw);
	  				if(vartcode[Consignation2rw.ArtCode]==false)then begin
							aartcode[acnt] = Consignation2rw.ArtCode;
							vartcode[aartcode[acnt]] = true;
							acnt = acnt + 1;
	  				end;
	  				vetransnr[Consignation2rw.ArtCode] = to;
						verow[Consignation2rw.ArtCode] = i;
	  				eval[Consignation2rw.ArtCode] = Consignation2rw.Qty;	  				
					end;
					logtext(0,"2th acnt " & acnt);
					MySortStringArray(aartcode,acnt);
					logtext(0,"sort end ");
					
					For(i=0;i<acnt;i=i+1) begin
	  				IHr.FileName = "ConsignationVc";
	  				IHr.TransNr = vstransnr[aartcode[i]];
	  				IHr.Row = vsrow[aartcode[i]];
	  				ihspos = -1;
	  				if(readfirstkey("FNTransNr",IHr,3,true))then begin
	  					ihspos = IHr.SerNr;
	  				end;
	  				
	  				IHr.FileName = "ConsignationVc";
	  				IHr.TransNr = vetransnr[aartcode[i]];
	  				IHr.Row = verow[aartcode[i]];
	  				ihepos = -1;
	  				if(readfirstkey("FNTransNr",IHr,3,true))then begin
	  					ihepos = IHr.SerNr;
	  				end;
	  					  				
	  				if(ihspos>0 and ihepos>0)then begin
							TrHs = true;
							IHr.ArtCode = aartcode[i];
							IHr.SerNr = ihspos;
							while(loopkey("ArtCodeSN",IHr,2,TrHs))begin
								testf = true;
								if(IHr.ArtCode!=aartcode[i])then begin TrHs=false; testf = false; end;
								if(IHr.SerNr<ihspos or IHr.SerNr>ihepos)then begin TrHs=false; testf = false; end;
								if(IHr.StockAffectf==0)then begin testf = false; end;
								if(IHr.Location!=RepSpec.f3)then begin testf = false; end;
								
								if(testf)then begin
									switch(IHr.FileName)begin
										case"IVVc": if(IHr.Qty<0)then begin
																	sales[IHr.ArtCode] = -IHr.Qty;
																end else begin
																	ret[IHr.ArtCode] = IHr.Qty;
																end;
										case"SHVc": sales[IHr.ArtCode] = -IHr.Qty;
										case"RetVc": ret[IHr.ArtCode] = IHr.Qty;
										case"PUVc": smin[IHr.ArtCode] = IHr.Qty;
										case"SDVc": sout[IHr.ArtCode] = IHr.Qty;
										case"StockMovVc": if(IHr.Qty<0)then begin
																				sout[IHr.ArtCode] = -IHr.Qty;
																			end else begin
																				smin[IHr.ArtCode] = IHr.Qty;
																			end;
									end;
								end;
								
							end;
							resetloop(IHr);
	  				end;
					end; 
					logtext(0,"CalculateEnd ");
					
					Startreportnoheaderjob("CompareConsignationRn");
					startformat(15);
						outstring(0,0,"Item",false);
						outstring(70,0,"Sqty",false);
						outstring(150,0,"IN",false);
						outstring(200,0,"Out",false);
						outstring(250,0,"SalesOut",false);
						outstring(300,0,"SalesIn",false);
						outstring(350,0,"Disbalans",false);
						outstring(1,0,"Eqty",True);
					endformat;
					
					
					For(i=0;i<acnt;i=i+1) begin
	  				startformat(15);
							outstring(0,0,aartcode[i],false);
							outstring(70,0,sval[aartcode[i]],false);
							outstring(150,0,smin[aartcode[i]],false);
							outstring(200,0,sout[aartcode[i]],false);
							outstring(250,0,sales[aartcode[i]],false);
							outstring(300,0,ret[aartcode[i]],false);
							outstring(350,0,sval[aartcode[i]]+smin[aartcode[i]]-sout[aartcode[i]]-sales[aartcode[i]]+ret[aartcode[i]]-eval[aartcode[i]],false);
							outstring(1,0,eval[aartcode[i]],True);
						endformat;
					end; 
					endjob;
											
				end;
			end;
		end;
	end;

return;
end;


global updating procedure CrConsigIn(record ConsignationVc Consignationr,record ConsignationVc Consignation2r,var array val totbal)
begin
	integer wn,i,j,rwcnt,mtrw;
	row ConsignationVc Consignationrw;
	record ConsInVc ConsInr,ConsInoldr;
	row ConsInVc ConsInrw,ConsInOldrw;
	record ItemHistVc IHr;
	boolean TrHs,testf;
	vector boolean artflag;
	record ConsSaleVc ConsSaler;
	row ConsSaleVc ConsSalerw;
	
	logtext(0,"CrConsigIn");
	
	//wn = curwindow;
	
	
	mtrw = matrowcnt(Consignationr);
	For(i=0;i<mtrw;i=i+1) begin
		matrowget(Consignationr,i,Consignationrw);
		artflag[Consignationrw.ArtCode] = true;
		ConsInrw.ArtCode = Consignationrw.ArtCode;
		ConsInrw.Spec = Consignationrw.Spec;
		ConsInrw.Qty = Consignationrw.Qty;
		ConsInrw.Price = Consignationrw.Price;
		ConsInrw.Sum = ConsInrw.Qty*ConsInrw.Price;
		ConsInr.TotSum = ConsInr.TotSum + ConsInrw.Sum;
		ConsInr.TotQty = ConsInr.TotQty + ConsInrw.Qty;
		matrowput(ConsInr,matrowcnt(ConsInr),ConsInrw);
		
	end;
	
	TrHs = true;
	ConsInoldr.TransDate = Consignation2r.TransDate;
	while(loopkey("TransDate",ConsInoldr,1,TrHs))begin
		testf = true;
		if(ConsInoldr.TransDate!=Consignation2r.TransDate)then begin TrHs = false; testf = false; end;
		if(ConsInoldr.Location!=Consignation2r.Location)then begin testf = false; end;
		if(ConsInoldr.Comitent!=Consignation2r.Comitent)then begin testf = false; end;
		
		if(testf)then begin
			mtrw = matrowcnt(ConsInoldr);
			For(i=0;i<mtrw;i=i+1) begin
				matrowget(ConsInoldr,i,ConsInOldrw);
				if(artflag[ConsInOldrw.ArtCode])then begin
					for(j=0;j<matrowcnt(ConsInr);j=j+1)begin
						matrowget(ConsInr,j,ConsInrw);
						if(ConsInrw.ArtCode==ConsInOldrw.ArtCode)then begin
							ConsInr.TotSum = ConsInr.TotSum - ConsInrw.Sum;
							ConsInr.TotQty = ConsInr.TotQty - ConsInrw.Qty;
							ConsInrw.Qty = ConsInrw.Qty - ConsInOldrw.Qty;
							ConsInrw.Sum = ConsInrw.Qty*ConsInrw.Price;
							ConsInr.TotSum = ConsInr.TotSum + ConsInrw.Sum;
							ConsInr.TotQty = ConsInr.TotQty + ConsInrw.Qty;
							matrowput(ConsInr,j,ConsInrw);
						end;
					end;
				end else begin
					ConsInrw.ArtCode = ConsInOldrw.ArtCode;
					ConsInrw.Spec = ConsInOldrw.Spec;
					ConsInrw.Qty = -ConsInOldrw.Qty;
					ConsInrw.Price = ConsInOldrw.Price;
					ConsInrw.Sum = ConsInrw.Qty*ConsInrw.Price;
					ConsInr.TotSum = ConsInr.TotSum + ConsInrw.Sum;
					ConsInr.TotQty = ConsInr.TotQty + ConsInrw.Qty;
					artflag[ConsInOldrw.ArtCode] = true;
					matrowput(ConsInr,matrowcnt(ConsInr),ConsInrw);
				end;
			end;
		end;
	end;
	
	TrHs = true;
	ConsSaler.TransDate = Consignationr.TransDate;
	while(loopkey("TransDate",ConsSaler,1,TrHs))begin
		testf = true;
		if(ConsSaler.TransDate!=Consignationr.TransDate)then begin TrHs = false; testf = false; end;
		if(ConsSaler.Location!=Consignationr.Location)then begin testf = false; end;
		if(ConsSaler.Comitent!=Consignationr.Comitent)then begin testf = false; end;
		
		if(testf)then begin
			mtrw = matrowcnt(ConsSaler);
			For(i=0;i<mtrw;i=i+1) begin
				matrowget(ConsSaler,i,ConsSalerw);
				if(artflag[ConsSalerw.ArtCode])then begin
					for(j=0;j<matrowcnt(ConsInr);j=j+1)begin
						matrowget(ConsInr,j,ConsInrw);
						if(ConsInrw.ArtCode==ConsSalerw.ArtCode)then begin
							ConsInr.TotSum = ConsInr.TotSum - ConsInrw.Sum;
							ConsInr.TotQty = ConsInr.TotQty - ConsInrw.Qty;
							ConsInrw.Qty = ConsInrw.Qty + ConsSalerw.SelQty;
							ConsInrw.Sum = ConsInrw.Qty*ConsInrw.Price;
							ConsInr.TotSum = ConsInr.TotSum + ConsInrw.Sum;
							ConsInr.TotQty = ConsInr.TotQty + ConsInrw.Qty;
							matrowput(ConsInr,j,ConsInrw);
						end;
					end;
				end else begin
					ConsInrw.ArtCode = ConsSalerw.ArtCode;
					ConsInrw.Spec = ConsSalerw.Spec;
					ConsInrw.Qty = ConsSalerw.SelQty;
					ConsInrw.Price = ConsSalerw.Price;
					ConsInrw.Sum = ConsInrw.Qty*ConsInrw.Price;
					ConsInr.TotSum = ConsInr.TotSum + ConsInrw.Sum;
					ConsInr.TotQty = ConsInr.TotQty + ConsInrw.Qty;
					artflag[ConsInrw.ArtCode] = true;
					matrowput(ConsInr,matrowcnt(ConsInr),ConsInrw);
				end;
			end;
		end;
	end;
	
	mtrw = matrowcnt(ConsInr);
	For(i=0;i<mtrw;i=i+1) begin
		matrowget(ConsInr,i,ConsInrw);
		if(ConsInrw.Qty==0)then begin
			matrowdelete(ConsInr,i);
			i=i-1;
			mtrw = mtrw - 1;
		end;
	end;
	
	rwcnt = matrowcnt(ConsInr);
	if(rwcnt>0)then begin
		ConsInr.SerNr = NextSerNr("ConsInVc",CurrentDate,-1,false,"");
		ConsInr.TransDate = Consignationr.TransDate;
		ConsInr.Location = Consignationr.Location;
		ConsInr.Comitent = Consignationr.Comitent;
		recordstore(ConsInr,true);
		createrecordlink(ConsInr,currentcompany,Consignationr,currentcompany);
		createrecordlink(Consignationr,currentcompany,ConsInr,currentcompany);
		
		//recordcopy(ConsInoldr,ConsInr);
		//ConsInr.OKFlag = 1;
		//recordupdate(ConsInoldr,ConsInr,true);
	end;
	
	/*
	
	if(true)then begin
		//getwindowrecord(wn,Consignationr);
		
		recordnew(ConsInr);
		ConsInr.TransDate = Consignationr.TransDate;
		ConsInr.Location = Consignationr.Location;
		ConsInr.Comitent = Consignationr.Comitent;
		
		mtrw = matrowcnt(Consignationr);
		For(i=0;i<mtrw;i=i+1) begin
	  	matrowget(Consignationr,i,Consignationrw);
	  	
	  	ConsInrw.ArtCode = Consignationrw.ArtCode;
	  	ConsInrw.Spec = Consignationrw.Spec;
	  	ConsInrw.Qty = Consignationrw.Qty;
	  	ConsInrw.Price = Consignationrw.Price;
	  	
	  	TrHs = true;
	  	IHr.ArtCode = Consignationrw.ArtCode;
	  	IHr.FileName = "ConsInVc";
	  	while(loopkey("FNArtCode",IHr,2,TrHs))begin
	  		testf = true;
	  		if(IHr.ArtCode!=Consignationrw.ArtCode)then begin TrHs = false; testf =false; end;
	  		if(IHr.FileName!="ConsInVc")then begin TrHs = false; testf =false; end;
	  		if(IHr.Location!=Consignationr.Location)then begin testf = false; end;
				if(IHr.Comitent!=Consignationr.Comitent)then begin testf = false; end;
	  		
	  		if(IHr.Qty2<=0)then begin testf = false; end;
	  		
	  		if(testf)then begin
	  			ConsInrw.Qty = ConsInrw.Qty - IHr.Qty2;
	  		end;
	  		
	  	end;
	  	resetloop(IHr);
	  	
	  	if(ConsInrw.Qty>0)then begin
	  		ConsInrw.Sum = ConsInrw.Qty*ConsInrw.Price;
	  		ConsInr.TotSum = ConsInr.TotSum + ConsInrw.Sum;
	  		ConsInr.TotQty = ConsInr.TotQty + ConsInrw.Qty;
	  		matrowput(ConsInr,rwcnt,ConsInrw);
	  		rwcnt = rwcnt + 1;
	  	end;
	  	
		end; 
		if(rwcnt>0)then begin
			ConsInr.SerNr = NextSerNr("ConsInVc",CurrentDate,-1,false,"");
			recordstore(ConsInr,true);
			createrecordlink(ConsInr,currentcompany,Consignationr,currentcompany);
			createrecordlink(Consignationr,currentcompany,ConsInr,currentcompany);
			
			recordcopy(ConsInoldr,ConsInr);
			ConsInr.OKFlag = 1;
			recordupdate(ConsInoldr,ConsInr,true);
		end;
		totbal[1] = ConsInr.TotQty;
		logtext(0,"CrConsigIn End " & ConsInr.TotQty);
	end;
*/
return;
end;

procedure GetQtyByBackDateSales(date frdate, date td, string artcode, string location, var val resqty,var array val prices,var integer prcnt,var array integer aqty,var array longint ivser,var array integer ccflag,var array val termsum)
begin
	record ItemHistVc IHr;
	boolean TrHs,testf;
	record ItemStatusVc ISr;
	val qty;
	record IVVc IVr;
	row IVVc IVrw;
	record ORVc ORr;
	row ORVc ORrw;
	record SHVc SHr;
	row SHVc SHrw;
	record RetVc Retr;
	row RetVc Retrw;
	vector boolean vpflag,vinvflag;
	vector integer vpcnt;
	integer isterm;
	integer mtrw,i;
	string 100 keyv;
	record SalesDataVc SalesDatar;
	
	prcnt = 0;
	
	SalesDatar.Location = location;
	SalesDatar.ArtCode = artcode;
	SalesDatar.InvDate = td;
	TrHs = true;
	while(loopkey("LocationCodeDate",SalesDatar,3,TrHs))begin
		testf = true;
		if(SalesDatar.Location!=location)then begin TrHs = false; testf = false; end;
		if(SalesDatar.ArtCode!=artcode)then begin TrHs = false; testf = false; end;
		if(SalesDatar.InvDate>addday(frdate,-1))then begin TrHs = false; testf = false; end;
		
		if(testf)then begin
			qty = qty + SalesDatar.Quant;
			if(SalesDatar.PayedByCCard!=0)then begin
				isterm = 1;
			end;
			keyv = "";
			keyv = AbsoluteVal(round(SalesDatar.Sum*SalesDatar.Rate/SalesDatar.Quant,SetRoundModeD(2))) & ";" & SalesDatar.InvNr;
			if(vinvflag[IVr.SerNr]==false)then begin
				vinvflag[IVr.SerNr] = true;
				ivser[prcnt] = IVr.SerNr;
				ccflag[prcnt] = isterm;
			end;
			if(vpflag[keyv])then begin
				aqty[vpcnt[keyv]] = aqty[vpcnt[keyv]] + SalesDatar.Quant;
				ivser[prcnt] = SalesDatar.InvNr;
				ccflag[prcnt] = isterm;
			end else begin
				prices[prcnt] = AbsoluteVal(round(SalesDatar.Sum*SalesDatar.Rate/SalesDatar.Quant,SetRoundModeD(2)));
				termsum[prcnt] = SalesDatar.PayedByCCard;
				ivser[prcnt] = SalesDatar.InvNr;
				ccflag[prcnt] = isterm;
				vpflag[keyv] = true;
				vpcnt[keyv] = prcnt;
				aqty[vpcnt[keyv]] = SalesDatar.Quant;
				prcnt = prcnt + 1;
			end;
		
		end;
	end;
	
	resqty = qty;
	
return;
end;

function date GetLastConsigQty(record ConsignationVc Consignationr,var array val totbal)
begin
	date res;
	record ConsignationVc Consignationoldr;
	boolean testf,TrHs;
	date lastdate;
	
	Consignationoldr.TransDate = Consignationr.TransDate;
	TrHs = true;
	while(loopbackkey("TransDate",Consignationoldr,1,TrHs))begin
		testf = true;
		if(Consignationoldr.SerNr==Consignationr.SerNr)then begin testf = false; end;
		if(Consignationoldr.Location!=Consignationr.Location)then begin testf = false; end;
		if(Consignationoldr.Comitent!=Consignationr.Comitent)then begin testf = false; end;
		if(Consignationoldr.OKFlag!=Consignationr.OKFlag)then begin testf = false; end;
		
		
		if(testf and TrHs)then begin
			lastdate = Consignationoldr.TransDate;
			totbal[0] = Consignationoldr.TotQty;
			logtext(0,"CalcSalesOnPeriod " & Consignationoldr.TotQty);
			TrHs = false;
		end;
	end;
	
	res = lastdate;
	
	GetLastConsigQty = res;
return;
end;

global procedure CalcSalesOnPeriod(record ConsignationVc Consignationr,string itemcode, var val resqty,date lastdate,var array val prices,var integer prcnt,var array integer qty,var array longint ivser,var array integer ccflag,var array val termsum)
begin
	record ConsignationVc Consignationoldr;
	boolean testf,TrHs;
	
	GetQtyByBackDateSales(Consignationr.TransDate,lastdate,itemcode,Consignationr.Location,resqty,prices,prcnt,qty,ivser,ccflag,termsum);
return;
end;

global updating procedure CrConsigBrak(record ConsignationVc Consignationr,var array val totbal)
begin
	integer wn,i,j,rwcnt,mtrw,acnt,acnt1;
	row ConsignationVc Consignationrw;
	record ConsBrakVc ConsBrakr,ConsBrakoldr;
	row ConsBrakVc ConsBrakrw;
	record ItemHistVc IHr;
	boolean TrHs,testf,foundf;
	array string 50 artcodes,artcodesprice;
	vector val artqty2,artqty2price;
	vector boolean artf,artf1;
	val resqty;
	date lastdate;
	record INVc INr;
	
	logtext(0,"CrConsigBrak");
	
	lastdate = GetLastConsigQty(Consignationr,totbal);
	
	IHr.FileName = "ConsInVc";
	TrHs = true;
	while(loopkey("FNTransNr",IHr,1,TrHs))begin
		testf = true;
		if(IHr.FileName!="ConsInVc")then begin TrHs = false; testf = false; end;
		if(IHr.Qty2<=0)then begin testf = false; end;
		if(IHr.Location!=Consignationr.Location)then begin testf = false; end;
		if(IHr.Comitent!=Consignationr.Comitent)then begin testf = false; end;
		
		if(testf)then begin
			if(artf1[IHr.ArtCode]==false)then begin
				artf1[IHr.ArtCode] = true;
				artcodes[acnt1] = IHr.ArtCode;
				acnt1 = acnt1 + 1;
			end;
			artqty2[IHr.ArtCode] = artqty2[IHr.ArtCode] + IHr.Qty2;			
		end;
	end;
	
	recordnew(ConsBrakr);
	ConsBrakr.TransDate = Consignationr.TransDate;
	ConsBrakr.Location = Consignationr.Location;
	ConsBrakr.Comitent = Consignationr.Comitent;
	
	rwcnt = matrowcnt(Consignationr);
	For(i=0;i<acnt1;i=i+1) begin
		foundf = false;
		clearrow(ConsBrakr,ConsBrakrw,1);
	  For(j=0;j<rwcnt;j=j+1) begin
	  	matrowget(Consignationr,j,Consignationrw);
	  	if(Consignationrw.ArtCode==artcodes[i])then begin
	  		foundf = true;
	  		if(artqty2[artcodes[i]]>Consignationrw.Qty)then begin
	  			ConsBrakrw.ArtCode = artcodes[i];
	  			INr.Code = artcodes[i];
	  			if(readfirstmain(INr,1,true))then begin
	  				ConsBrakrw.Spec = INr.Name;
	  			end;
	  			resqty = 0;
	  			//CalcSalesOnPeriod(Consignationr,artcodes[i],resqty,lastdate);
	  			ConsBrakrw.Qty = artqty2[artcodes[i]] - Consignationrw.Qty;
	  			ConsBrakrw.Sum = ConsBrakrw.Qty*ConsBrakrw.Price;					
					if(ConsBrakrw.Qty>0)then begin
						ConsBrakr.TotQty = ConsBrakr.TotQty + ConsBrakrw.Qty;
						matrowput(ConsBrakr,mtrw,ConsBrakrw);
						mtrw = mtrw + 1;
					end;
	  		end;
	  	end;
		end; 
		if(foundf==false)then begin
			ConsBrakrw.ArtCode = artcodes[i];
			INr.Code = artcodes[i];
			if(readfirstmain(INr,1,true))then begin
				ConsBrakrw.Spec = INr.Name;
			end;
			resqty = 0;
			ConsBrakrw.Qty = artqty2[artcodes[i]];

			ConsBrakrw.Sum = ConsBrakrw.Qty*ConsBrakrw.Price;			
			if(ConsBrakrw.Qty>0)then begin
				ConsBrakr.TotQty = ConsBrakr.TotQty + ConsBrakrw.Qty;
				matrowput(ConsBrakr,mtrw,ConsBrakrw);
				mtrw = mtrw + 1;
			end;
		end;
	end; 
	
	
	
	if(mtrw>0)then begin
		ConsBrakr.SerNr = NextSerNr("ConsBrakVc",CurrentDate,-1,false,"");
		recordstore(ConsBrakr,true);
		createrecordlink(ConsBrakr,currentcompany,Consignationr,currentcompany);
		createrecordlink(Consignationr,currentcompany,ConsBrakr,currentcompany);
		recordcopy(ConsBrakoldr,ConsBrakr);
		ConsBrakr.OKFlag = 1;
		recordupdate(ConsBrakoldr,ConsBrakr,true);
	end;
	
	totbal[3] = ConsBrakr.TotQty;
	logtext(0,"BRAK FINISH " & ConsBrakr.TotQty);
	
return;
end;

global updating procedure CrConsigSale(record ConsignationVc Consignationr,var array val totbal)
begin
	integer wn,i,j,rwcnt,mtrw,acnt,acnt1,prcnt,k;
	row ConsignationVc Consignationrw;
	record ConsSaleVc ConsSaler,ConsSaleoldr;
	row ConsSaleVc ConsSalerw;
	record ItemHistVc IHr;
	boolean TrHs,testf,foundf;
	array string 50 artcodes,artcodesprice;
	vector val artqty2,artqty2price;
	vector boolean artf,artf1;
	val resqty;
	date lastdate;
	record INVc INr;
	array val prices,termsum;
	array integer qty,ccflag;
	array longint ivser
	
	logtext(0,"CrConsigSale");
	
	lastdate = GetLastConsigQty(Consignationr,totbal);
	
	IHr.FileName = "ConsInVc";
	TrHs = true;
	while(loopkey("FNTransNr",IHr,1,TrHs))begin
		testf = true;
		if(IHr.FileName!="ConsInVc")then begin TrHs = false; testf = false; end;
		if(IHr.Qty2<=0)then begin testf = false; end;
		if(IHr.Location!=Consignationr.Location)then begin testf = false; end;
		if(IHr.Comitent!=Consignationr.Comitent)then begin testf = false; end;
		
		if(testf)then begin
			if(artf1[IHr.ArtCode]==false)then begin
				artf1[IHr.ArtCode] = true;
				artcodes[acnt1] = IHr.ArtCode;
				acnt1 = acnt1 + 1;
			end;
			//artqty2[IHr.ArtCode] = artqty2[IHr.ArtCode] + IHr.Qty2;			
		end;
	end;
	INr.Code = "";
	while(loopmain(INr,1,true))begin
		testf = true;
		if(setinset(Consignationr.Comitent,INr.DispGroups))then begin
			if(artf1[INr.Code]==false)then begin
				artf1[INr.Code] = true;
				artcodes[acnt1] = INr.Code;
				acnt1 = acnt1 + 1;
			end;
		end;
	end;
	ResetLoop(INr);
	
	recordnew(ConsSaler);
	ConsSaler.TransDate = Consignationr.TransDate;
	ConsSaler.Location = Consignationr.Location;
	ConsSaler.Comitent = Consignationr.Comitent;
	
	rwcnt = matrowcnt(Consignationr);
	For(i=0;i<acnt1;i=i+1) begin
		foundf = false;
		clearrow(ConsSaler,ConsSalerw,1);
	  For(j=0;j<rwcnt;j=j+1) begin
	  	matrowget(Consignationr,j,Consignationrw);
	  	if(Consignationrw.ArtCode==artcodes[i])then begin
	  		foundf = true;
	  		//if(artqty2[artcodes[i]]>Consignationrw.Qty)then begin
	  		if(true)then begin
	  			ConsSalerw.ArtCode = artcodes[i];
	  			INr.Code = artcodes[i];
	  			if(readfirstmain(INr,1,true))then begin
	  				ConsSalerw.Spec = INr.Name;
	  			end;
	  			resqty = 0;
	  			CalcSalesOnPeriod(Consignationr,artcodes[i],resqty,lastdate,prices,prcnt,qty,ivser,ccflag,termsum);
	  			
	  			For(k=0;k<prcnt;k=k+1) begin
	  				if(qty[k]!=0)then begin
	  					ConsSalerw.Qty = qty[k];
	  					ConsSalerw.SelQty =  qty[k];
	  					ConsSalerw.SelPrice = prices[k];
	  					ConsSalerw.Invoice = ivser[k];
	  					ConsSalerw.CCFlag = ccflag[k];
	  					ConsSalerw.TermPrice = round(AbsoluteVal(termsum[k]/qty[k]),SetRoundModeD(2));
	  					ConsSalerw.TermSum = ConsSalerw.TermPrice * qty[k];
							matrowput(ConsSaler,mtrw,ConsSalerw);
							mtrw = mtrw + 1;
						end;
					end; 
	  		end;
	  	end;
		end; 
		if(foundf==false)then begin
			ConsSalerw.ArtCode = artcodes[i];
			INr.Code = artcodes[i];
			if(readfirstmain(INr,1,true))then begin
				ConsSalerw.Spec = INr.Name;
			end;
			resqty = 0;
			CalcSalesOnPeriod(Consignationr,artcodes[i],resqty,lastdate,prices,prcnt,qty,ivser,ccflag,termsum);
			For(k=0;k<prcnt;k=k+1) begin
				if(qty[k]!=0)then begin
					ConsSalerw.Qty = qty[k];
					ConsSalerw.SelQty =  qty[k];
					ConsSalerw.SelPrice = prices[k];
					ConsSalerw.Invoice = ivser[k];
	  			ConsSalerw.CCFlag = ccflag[k];
	  			ConsSalerw.TermPrice = AbsoluteVal(termsum[k]/qty[k]);
	  			ConsSalerw.TermSum = termsum[k];
					matrowput(ConsSaler,mtrw,ConsSalerw);
					mtrw = mtrw + 1;
				end;
			end; 
		end;
	end; 
	
	
	
	if(mtrw>0)then begin
		ConsSaler.SerNr = NextSerNr("ConsSaleVc",CurrentDate,-1,false,"");
		//CrConsigSaleSumUp(ConsSaler);
		recordstore(ConsSaler,true);
		createrecordlink(ConsSaler,currentcompany,Consignationr,currentcompany);
		createrecordlink(Consignationr,currentcompany,ConsSaler,currentcompany);
		recordcopy(ConsSaleoldr,ConsSaler);
		ConsSaler.OKFlag = 1;
		recordupdate(ConsSaleoldr,ConsSaler,true);
	end;
	totbal[2] = ConsSaler.TotQty;
	logtext(0,"SALE FINISH " & ConsSaler.TotQty);
	
return;
end;



global updating	procedure	CrConsigAll(record ConsignationVc Consignationr)
begin
	array val totbal;
	
		logtext(0,"CrConsigAll START");
		//CrConsigIn(Consignationr,totbal);
		CrConsigSale(Consignationr,totbal);
		CrConsigBrak(Consignationr,totbal);
		
		totbal[4] = Consignationr.TotQty;
		
		logtext(0,"Start " & totbal[0]);
		logtext(0,"In " & totbal[1]);
		logtext(0,"Sale " & totbal[2]);
		logtext(0,"Brak " & totbal[3]);
		logtext(0,"Fin " & totbal[4]);
		logtext(0,"Error " & totbal[0]+totbal[1]-totbal[2]-totbal[3]-totbal[4]);
		
		logtext(0,"CrConsigAll END" & Consignationr.TotQty);

return;
end;


global updating	procedure	CrConsigInAllMn(record RcVc RepSpec)
begin
	array val totbal;
	record ConsignationVc Consignationr,Consignation2r;
	boolean TrHs,testf,TrHs2,testf2;
	
	totbal[0] = 0;
	totbal[1] = 0;
	
	if(nonblankdate(RepSpec.d1) and nonblankdate(RepSpec.d2) and RepSpec.d2>RepSpec.d1)then begin
		Consignationr.TransDate = RepSpec.d2;
		TrHs = true;
		while(loopkey("TransDate",Consignationr,1,TrHs))begin
			testf = true;
			if(Consignationr.TransDate!=RepSpec.d2)then begin TrHs = false; testf = false; end;
			if(Consignationr.OKFlag!=1)then begin testf = false; end;
			if(nonblank(RepSpec.f1) and RepSpec.f1!=Consignationr.Comitent)then begin testf = false; end;
			if(nonblank(RepSpec.f2) and RepSpec.f2!=Consignationr.Location)then begin testf = false; end;
			
			logtext(0,"CrConsigInAllMn fro cs " & Consignationr.SerNr);
			if(testf)then begin
				totbal[1] = 0;
				logtext(0,"Cr ConsIn for:" & Consignationr.Location & " comtnt " & Consignationr.Comitent);
				Consignation2r.TransDate = RepSpec.d1;
				TrHs2 = true;
				while(loopkey("TransDate",Consignation2r,1,TrHs2))begin
					testf2 = true;
					if(Consignation2r.TransDate!=RepSpec.d1)then begin TrHs2 = false; testf2 = false; end;
					if(Consignation2r.OKFlag!=1)then begin testf2 = false; end;
					if(Consignationr.Location!=Consignation2r.Location)then begin testf2 = false; end;
					if(Consignationr.Comitent!=Consignation2r.Comitent)then begin testf2 = false; end;
				
					if(testf2)then begin
						CrConsigIn(Consignationr,Consignation2r,totbal);
						logtext(0,"Start " & totbal[1]);
					end;
				
				end;
				resetloop(Consignation2r);
			
			
				logtext(0,"Start " & totbal[1]);
			end;
		end;
		logtext(0,"Error " & totbal[1]);
	end;	

return;
end;



global updating procedure ConsFillSpec()
begin
	record ConsignationVc Consignationr;
	row ConsignationVc Consignationrw;
	record ConsSaleVc ConsSaler;
	row ConsSaleVc ConsSalerw;
	record ConsInVc ConsInr;
	row ConsInVc ConsInrw;
	record ConsBrakVc ConsBrakr;
	row ConsBrakVc ConsBrakrw;
	integer i,mtrw;
	record INVc INr;
	
	while(loopmain(Consignationr,1,true))begin
		For(i=0;i<matrowcnt(Consignationr);i=i+1) begin
	  	matrowget(Consignationr,i,Consignationrw);
	  		INr.Code = Consignationrw.ArtCode;
	  		readfirstmain(INr,1,true);
	  		Consignationrw.Spec = INr.Name;
	  	matrowput(Consignationr,i,Consignationrw);
		end; 
		recordstore(Consignationr,true);
	end;
	
	while(loopmain(ConsSaler,1,true))begin
		For(i=0;i<matrowcnt(ConsSaler);i=i+1) begin
	  	matrowget(ConsSaler,i,ConsSalerw);
	  		INr.Code = ConsSalerw.ArtCode;
	  		readfirstmain(INr,1,true);
	  		ConsSalerw.Spec = INr.Name;
	  	matrowput(ConsSaler,i,ConsSalerw);
		end; 
		recordstore(ConsSaler,true);
	end;
	
	while(loopmain(ConsInr,1,true))begin
		For(i=0;i<matrowcnt(ConsInr);i=i+1) begin
	  	matrowget(ConsInr,i,ConsInrw);
	  		INr.Code = ConsInrw.ArtCode;
	  		readfirstmain(INr,1,true);
	  		ConsInrw.Spec = INr.Name;
	  	matrowput(ConsInr,i,ConsInrw);
		end; 
		recordstore(ConsInr,true);
	end;
	
	while(loopmain(ConsBrakr,1,true))begin
		For(i=0;i<matrowcnt(ConsBrakr);i=i+1) begin
	  	matrowget(ConsBrakr,i,ConsBrakrw);
	  		INr.Code = ConsBrakrw.ArtCode;
	  		readfirstmain(INr,1,true);
	  		ConsBrakrw.Spec = INr.Name;
	  	matrowput(ConsBrakr,i,ConsBrakrw);
		end; 
		recordstore(ConsBrakr,true);
	end;
	
return;
end;