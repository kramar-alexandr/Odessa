external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure B1ToB2Val(val,val,val,var val);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean GetAccName(string,var string,Integer);
external function Boolean IsVATCodeDefined(string);

global
function LongInt PLVcRecordCheck(var record PLVc PLr,record PLVc PL2r,LongInt stat,LongInt long4)
begin
  record INVc INr;
  record CUVc CUr;
  record PLDefVc PLDefr;
  LongInt res;
  string 255 tstr;
  
  res = 0;
  if blank(PLr.ArtCode) then begin
    RecordCheckError(1058,"",-1,"ArtCode");      
    res = -1; 
    goto LPLVcRecordCheck;
  end else begin
    if (ReadFirstItem(PLr.ArtCode,INr,true,false)==false) then begin
      RecordCheckError(1120,PLr.ArtCode,-1,"ArtCode");      
      res = -1; 
      goto LPLVcRecordCheck;
    end;
  end;
  if (blank(PLr.PLCode)) and (blank(PLr.CustCode)) then begin
    RecordCheckError(1058,"",-1,"PLCode");      
    res = -1; 
    goto LPLVcRecordCheck;
  end else begin
    if nonblank(PLr.PLCode) then begin
      PLDefr.Code = PLr.PLCode;
      if (ReadFirstMain(PLDefr,1,true)==false) then begin
        RecordCheckError(1120,PLr.PLCode,-1,"PLCode");      
        res = -1; 
        goto LPLVcRecordCheck;
      end;
    end;
    if nonblank(PLr.CustCode) then begin
      CUr.Code = PLr.CustCode;
      if (ReadFirstMain(CUr,1,true)==false) then begin
        RecordCheckError(25601,PLr.CustCode,-1,"CustCode");
        res = -1; 
        goto LPLVcRecordCheck;
      end;
    end;
  end;
  if nonblank(PLr.SalesAcc) then begin
    if (GetAccName(PLr.SalesAcc,tstr,60)==false) then begin
      RecordCheckError(1931,PLr.SalesAcc,-1,"SalesAcc");      
      res = -1; 
      goto LPLVcRecordCheck;
    end;
  end;
  if nonblank(PLr.VATCode) then begin
    if (IsVATCodeDefined(PLr.VATCode)==false) then begin
      RecordCheckError(1120,PLr.VATCode,-1,"VATCode");      
      res = -1; 
      goto LPLVcRecordCheck;
    end;
  end;
  if nonblank(PLr.BBVarAcc) then begin
    if (GetAccName(PLr.BBVarAcc,tstr,60)==false) then begin
      RecordCheckError(1007,PLr.BBVarAcc,-1,"BBVarAcc");      
      res = -1; 
      goto LPLVcRecordCheck;
    end;
  end;
LPLVcRecordCheck:;
  PLVcRecordCheck = res;
  return;
end;

global
function LongInt PLVcRecordImport(var record PLVc PLr,record PLVc PL2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  val t,fr,to1,to2,br1,br2;
  string 5 curncy;
  Boolean gBase1ToBase2,testf;
  record ConvMasterBlock cvm;
  record PLDefVc PLDefr;
  record BaseCurBlock bcur;
      
  BlockLoad(cvm);
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gBase1ToBase2) then begin
    testf = true;
    BlockLoad(bcur);
    PLDefr.Code = PLr.PLCode;
    if (ReadFirstMain(PLDefr,1,true)) then begin
      if ((nonblank(PLDefr.CurncyCode))) then begin//and (PLDefr.CurncyCode!=bcur.BaseCur2), if it is in curenncy we should recalc
        testf = false;
      end;
    end;
    if (testf) then begin
      GetFullCurncyRate(curncy,CurrentDate,fr,to1,to2,br1,br2);
      B1ToB2Val(PLr.ExVatPrice,br1,br2,t);
      PLr.ExVatPrice = t;
    end;
  end;
  PLVcRecordImport = res;
  RETURN;
END;

global 
function Boolean PLVcRecordShouldBeSynchronised(record PLVc PLr,string tagstr)
begin
  Boolean res;
  
  res = true;
  PLVcrecordShouldBeSynchronised = res;
  return;
end;

global 
function Boolean PLVcRecordSync(record PLVc PLr,string tagstr)
begin
  Boolean res;
  
  res = true;
  PLVcRecordSync = res;
  return;
end;

global
updating procedure UpdateHistForPLVc(record PLVc PLr, record PLVc oldPLr, string stat)
BEGIN
	record PLHistVc PLHr;
	row PLHistVc PLHrw;
	integer i,cnt;
	
	PLHr.PLCode = PLr.PLCode;
	PLHr.ArtCode = PLr.ArtCode;
	PLHr.CustCode = PLr.CustCode;
	if (ReadFirstMain(PLHr,3,true)) then begin
		i = MatRowCnt(PLHr) - 1;
		if (i==-1) then begin
			i = 0;
		end;
		MatRowGet(PLHr,i,PLHrw);
		if (stat == "delete") then begin
			PLHrw.ChDate = CurrentDate;
			PLHrw.ChTime = CurrentTime;
			PLHrw.UserCode = CurrentUser;
			PLHrw.Price = 0;
			PLHrw.StatusStr = stat;
			MatRowPut(PLHr,MatRowCnt(PLHr),PLHrw);
			RecordStore(PLHr,true);
		end else begin
			if (PLHrw.Price != PLr.ExVatPrice) then begin
				PLHrw.ChDate = CurrentDate;
				PLHrw.ChTime = CurrentTime;
				PLHrw.UserCode = CurrentUser;
				PLHrw.Price = PLr.ExVatPrice;
				PLHrw.StatusStr = stat;
				MatRowPut(PLHr,MatRowCnt(PLHr),PLHrw);
				RecordStore(PLHr,true);
			end;
		end;
	end else begin
		RecordNew(PLHr);
		cnt = 0;
		if (stat != "create") then begin
			PLHrw.ChDate = "";
			PLHrw.ChTime = "";
			PLHrw.UserCode = "";
			PLHrw.Price = oldPLr.ExVatPrice;
			PLHrw.StatusStr = "before changes";
			if oldPLr.ExVatPrice != blankval then begin
				MatRowPut(PLHr,0,PLHrw);
				cnt = 1;
			end;
		end;
		PLHr.PLCode = PLr.PLCode;
		PLHr.ArtCode = PLr.ArtCode;
		PLHr.CustCode = PLr.CustCode;
		PLHrw.ChDate = CurrentDate;
		PLHrw.ChTime = CurrentTime;
		PLHrw.UserCode = CurrentUser;
		PLHrw.Price = PLr.ExVatPrice;
		PLHrw.StatusStr = stat;
		MatRowPut(PLHr,cnt,PLHrw);
		RecordStore(PLHr,true);
	end;
	RETURN;
END;


global
updating function LongInt PLVcRecordImportAfter(var record PLVc PLr,record PLVc PL2r,LongInt stat,LongInt long4)
BEGIN
	LongInt res;
	
	UpdateHistForPLVc(PLr,PL2r,"import");

	PLVcRecordImportAfter = res;
	RETURN;
END;

global
updating function LongInt PLVcRecordSaveAfter(var record PLVc PLr,record PLVc PL2r,LongInt stat,LongInt long4)
BEGIN
	LongInt res;
	
	UpdateHistForPLVc(PLr,PL2r,"create");
	
	PLVcRecordSaveAfter = res;
	RETURN;
END;

global
updating function LongInt PLVcRecordUpdateAfter(var record PLVc PLr,record PLVc PL2r,LongInt stat,LongInt long4)
BEGIN
	LongInt res;
	
	UpdateHistForPLVc(PLr,PL2r,"change");
	
	PLVcRecordUpdateAfter = res;
	RETURN;
END;

global
updating function LongInt PLVcRecordRemoveAfter(var record PLVc PLr,record PLVc PL2r,LongInt stat,LongInt long4)
BEGIN
	LongInt res;
	
	UpdateHistForPLVc(PLr,PL2r,"delete");
	
	PLVcRecordRemoveAfter = res;
	RETURN;
END;