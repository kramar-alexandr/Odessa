SetLangMode(LangRussian,"RUS",0);

global procedure TovTest3RAYRn(record RcVc RepSpec)
begin
	record PISVc PISr;
	record ItemStatusVc ISr;
	record INVc INr;
	boolean testf,TrHs,TrHs2;
	vector val vect;
	vector boolean INInArr;
	array string 50 InArr;
	integer i;
	
	StartReportNoHeaderJob("Несовпадения по складу 3-RAY");
	startformat(15);
	OutString(0,0,"Код",false);
	OutString(140,0,"на складе",false);
	OutString(210,0,"на 3-RAY",false);
	OutString(280,0,"на 4-NIZ",false);
	endformat;
	i = 0;
	TrHs = true;
	INr.Code = "";
	while loopmain(INr,1,TrHs) begin
		PISr.ArtCode = INr.Code;
		PISr.Location = "3-RAY";
		PISr.Position = "3-RAY";
		ReadFirstMain(PISr,3,true);
		vect[PISr.ArtCode & ":" & PISr.Position] = PISr.Instock;
		PISr.ArtCode = INr.Code;
		PISr.Location = "3-RAY";
		PISr.Position = "4-NIZ";
		ReadFirstMain(PISr,3,true);
		vect[PISr.ArtCode & ":" & PISr.Position] = PISr.Instock;
		
		resetloop(ISr);
		ISr.Code = INr.Code;
		ISr.Location = "3-RAY";
		TrHs2 = true;
		while loopmain(ISr,2,TrHs2) begin
			if (ISr.Location != "3-RAY") then begin
				TrHs2 = false;
			end;
			if (ISr.Code != INr.Code) then begin
				TrHs2 = false;
			end;
			if (TrHs2) then begin
				vect[ISr.Code] = vect[ISr.Code] + ISr.Instock;
				if !INInArr[ISr.Code] then begin
					INInArr[ISr.Code] = true;
					InArr[i] = ISr.Code;
					i = i + 1;
				end;
			end;
		end;
	end;
	
	for (i=0;i<InArr.length;i=i+1) begin
		testf = false;
		if (vect[InArr[i] & ":3-RAY"]<0) then begin
			testf = true;
		end;
		if (vect[InArr[i] & ":4-NIZ"]<0) then begin
			testf = true;
		end;
		if (vect[InArr[i] & ":3-RAY"] + vect[InArr[i] & ":4-NIZ"]) != vect[InArr[i]] then begin
			testf = true;
		end;
		if testf then begin
			startformat(15);
			OutString(0,"DblOpenINrsRn",InArr[i],false);
			OutString(140,0,vect[InArr[i]],false);
			OutString(210,0,vect[InArr[i] & ":3-RAY"],false);
			OutString(280,0,vect[InArr[i] & ":4-NIZ"],false);
			endformat;
		end;
	end;
	EndJob;

end;

global updating procedure TestItemStatusRn(record RcVc RepSpec)
begin
	record PISVc PISr;
	record ItemStatusVc ISr,IS2r;
	record INVc INr;
	boolean testf,TrHs,TrHs2,TrHs1;
	vector val vect;
	vector boolean INInArr;
	array string 50 InArr;
	integer i,j;
	record ItemHistVc IHr;
	vector val ihqty;
	record LocationVc Locr;
	array string 20 aloc,apos;
	integer acnt,pcnt;
	vector val locqty,possum,possumbef;
	val sum;
	boolean printf,posfnd;
	record PosVc Posr;
	vector boolean vposflag;
	vector string 100 posloccode;
	boolean INTrhs;
	
	while(loopmain(Locr,1,true))begin
		aloc[acnt] = Locr.Code;
		acnt = acnt + 1;
	end;
	
	while(loopmain(Posr,1,true))begin
		if(Posr.Location=="1-KOC" or Posr.Location=="3-RAY")then begin
			apos[pcnt] = Posr.Code;
			posloccode[Posr.Code] = Posr.Location;
			pcnt = pcnt + 1;
		end;
	end;
		
	StartReportNoHeaderJob("Проверка ItemStatus");
	startformat(15);
		OutString(0,0,"Код",false);
		OutString(30,0,"All",false);
		For(i=0;i<acnt;i=i+1) begin
			OutString(60+i*30,0,aloc[i],false);
		end; 
	endformat;
	i = 0;
	TrHs = true;
	//INr.Code = "4050057";
	INTrhs = true;
	while loopmain(INr,1,INTrhs) begin
	
		if(INr.Code!="4050057")then begin
			//INTrhs = false;
		end;
		ClearVector(locqty);
		sum = blankval;
		ISr.Code = INr.Code;
		printf = false;
		TrHs = true;
		while (loopmain(ISr,1,TrHs)) begin
			if (ISr.Code!=INr.Code) then begin
				TrHs = false;
			end;
			if(TrHs)then begin
				locqty[ISr.Location] = ISr.Instock;
				possum[ISr.Location] = blankval;
				posfnd = false;
				For(j=0;j<pcnt;j=j+1) begin
	  			if(posloccode[apos[j]]==ISr.Location)then begin
	  				PISr.ArtCode = INr.Code;
						PISr.Location = ISr.Location;
						PISr.Position = apos[j];
						ReadFirstMain(PISr,3,true);
						posfnd = true;
						locqty[ISr.Location & ":" & apos[j]] = PISr.Instock;
						possum[ISr.Location] = possum[ISr.Location] + PISr.Instock;
	  			end;
				end; 
				
				if(posfnd and possum[ISr.Location]!=ISr.Instock)then begin
					printf = true;
				end;
				
				if(ISr.Instock<0)then begin
					printf = true;
				end;
				if(ISr.Location!=";;;")then begin
					sum = sum + ISr.Instock;
				end;
			end;
		end;
		resetloop(ISr);
		
		if(sum!=locqty[";;;"])then begin
			printf = true;
		end;
		
		if(printf)then begin
			startformat(15);
				OutString(0,"DblFixISDbl",INr.Code,false);
				OutString(30,0,locqty[";;;"],false);
				For(i=0;i<acnt;i=i+1) begin
					OutString(60+i*30,0,locqty[aloc[i]],false);
				end; 
			endformat;
			
			IHr.ArtCode = INr.Code;
			TrHs1 = true;
			ClearVector(ihqty);
			while(Loopkey("ArtCode",IHr,1,TrHs1))begin
				if(IHr.ArtCode!=INr.Code)then begin TrHs1 = false; end;

				if(TrHs1 and IHr.StockAffectf>0)then begin
					ihqty[IHr.Location] = ihqty[IHr.Location] + IHr.Qty;
					ihqty[IHr.Location & ":" & IHr.Position] = ihqty[IHr.Location & ":" & IHr.Position] + IHr.Qty;
					
				end;
			end;
			resetloop(IHr);
			IS2r.Code = INr.Code;
			TrHs1  = true;
			while(loopmain(IS2r,1,TrHs1))begin
				if(TrHs1 and IS2r.Code==INr.Code)then begin
					if(IS2r.Location!=";;;")then begin
						IS2r.Instock = ihqty[IS2r.Location];
						
						startformat(15);
							OutString(0,0,"",false);
							OutString(30,0,IS2r.Location,false);
							OutString(60,0,IS2r.Instock,false);
						endformat;
						
						possum[IS2r.Location] = blankval;
						possumbef[IS2r.Location] = blankval;
						For(j=0;j<pcnt;j=j+1) begin
							if(posloccode[apos[j]]==IS2r.Location)then begin
								startformat(15);
									OutString(0,0,"",false);
									OutString(0,0,IS2r.Location,false);
									OutString(60,0,apos[j],false);
									OutString(90,0,locqty[IS2r.Location & ":" & apos[j]],false);
									OutString(120,0,ihqty[IS2r.Location & ":" & apos[j]],false);
									possum[IS2r.Location] = possum[IS2r.Location] + ihqty[IS2r.Location & ":" & apos[j]];
									logtext(0,IS2r.Location & " possum[IS2r.Location] " & possum[IS2r.Location]);
									possumbef[IS2r.Location] = possumbef[IS2r.Location] + locqty[IS2r.Location & ":" & apos[j]];
								endformat;
							end;
						end;
						
						startformat(15);
							OutString(0,0,"possum",false);
							OutString(60,0,possum[IS2r.Location],false);
						endformat;
						startformat(15);
							OutString(0,0,"possumbef",false);
							OutString(60,0,possumbef[IS2r.Location],false);
						endformat;
						startformat(15);
							OutString(0,0,"IS2r.Instock",false);
							OutString(60,0,IS2r.Instock,false);
						endformat;
						
						if(possum[IS2r.Location]==IS2r.Instock and possum[IS2r.Location]!=possumbef[IS2r.Location])then begin
							startformat(15);
								OutString(0,0,"CANBEFIXED!!!",false);
							endformat;
						end;
												
						//recordstore(IS2r,true);
					end;
				end else begin
					TrHs1  = false;
				end;
			end;
			resetloop(IS2r);
			
			
		end;
		
	end;
	
	endjob;
return;
end;



global updating procedure TovTestRn(record RcVc RepSpec)
begin
	record PISVc PISr;
	record ItemStatusVc ISr,IS2r;
	record INVc INr;
	boolean testf,TrHs,TrHs2,TrHs1;
	vector val vect;
	vector boolean INInArr;
	array string 50 InArr;
	integer i;
	record ItemHistVc IHr;
	vector val ihqty;
	
	StartReportNoHeaderJob("Несовпадения по складу 1-КОС");
	startformat(15);
	OutString(0,0,"Код",false);
	OutString(140,0,"на складе",false);
	OutString(210,0,"на КОС_2",false);
	OutString(280,0,"на ОСТ_3",false);
	endformat;
	i = 0;
	TrHs = true;
	INr.Code = "";
	while loopmain(INr,1,TrHs) begin
		/*resetloop(PISr);
		PISr.ArtCode = INr.Code;
		PISr.Location = "1-KOC";
		TrHs2 = true;
		while loopmain(PISr,2,TrHs2) begin
			testf = true;
			if (PISr.Location != "1-KOC") then begin
				TrHs2 = false;
				testf = false;
			end;
			if (PISr.ArtCode != INr.Code) then begin
				TrHs2 = false;
				testf = false;
			end;
			if testf then begin
				switch (PISr.Position) begin
					case "КОС_2":
						testf = true;
					case "ОСТ_3":
						testf = true;
					otherwise
						testf = false;
				end;
			end;
			if (testf) then begin
				vect[PISr.ArtCode & ":" & PISr.Position] = vect[PISr.ArtCode & ":" & PISr.Position] + PISr.Instock;
				if !INInArr[PISr.ArtCode] then begin
					INInArr[PISr.ArtCode] = true;
					InArr[i] = PISr.ArtCode;
					i = i + 1;
				end;
			end;
		end;*/
		PISr.ArtCode = INr.Code;
		PISr.Location = "1-KOC";
		PISr.Position = "КОС_2";
		ReadFirstMain(PISr,3,true);
		vect[PISr.ArtCode & ":" & PISr.Position] = PISr.Instock;
		PISr.ArtCode = INr.Code;
		PISr.Location = "1-KOC";
		PISr.Position = "ОСТ_3";
		ReadFirstMain(PISr,3,true);
		vect[PISr.ArtCode & ":" & PISr.Position] = PISr.Instock;
		
		resetloop(ISr);
		ISr.Code = INr.Code;
		ISr.Location = "1-KOC";
		TrHs2 = true;
		while loopmain(ISr,2,TrHs2) begin
			if (ISr.Location != "1-KOC") then begin
				TrHs2 = false;
			end;
			if (ISr.Code != INr.Code) then begin
				TrHs2 = false;
			end;
			if (TrHs2) then begin
				vect[ISr.Code] = vect[ISr.Code] + ISr.Instock;
				if !INInArr[ISr.Code] then begin
					INInArr[ISr.Code] = true;
					InArr[i] = ISr.Code;
					i = i + 1;
				end;
			end;
		end;
	end;
	
	for (i=0;i<InArr.length;i=i+1) begin
		testf = false;
		if (vect[InArr[i] & ":КОС_2"]<0) then begin
			testf = true;
		end;
		if (vect[InArr[i] & ":ОСТ_3"]<0) then begin
			testf = true;
		end;
		if (vect[InArr[i] & ":КОС_2"] + vect[InArr[i] & ":ОСТ_3"]) != vect[InArr[i]] then begin
			testf = true;
		end;
		if testf then begin
			startformat(15);
			OutString(0,"DblOpenINrsRn",InArr[i],false);
			OutString(70,0,InArr[i],false);
			OutString(140,0,vect[InArr[i]],false);
			OutString(210,0,vect[InArr[i] & ":КОС_2"],false);
			OutString(280,0,vect[InArr[i] & ":ОСТ_3"],false);
			endformat;
			if(vect[InArr[i] & ":ОСТ_3"]<0)then begin
				PISr.ArtCode = InArr[i];
				PISr.Location = "1-KOC";
				PISr.Position = "КОС_2";
				if(ReadFirstMain(PISr,3,true))then begin
					PISr.Instock = PISr.Instock + vect[InArr[i] & ":ОСТ_3"];
					PISr.LeftQty = PISr.LeftQty + vect[InArr[i] & ":ОСТ_3"];
					recordstore(PISr,true);
				end;
				PISr.ArtCode = InArr[i];
				PISr.Location = "1-KOC";
				PISr.Position = "ОСТ_3";
				if(ReadFirstMain(PISr,3,true))then begin
					PISr.Instock = PISr.Instock - vect[InArr[i] & ":ОСТ_3"];
					PISr.LeftQty = PISr.LeftQty - vect[InArr[i] & ":ОСТ_3"];
					recordstore(PISr,true);
				end;
			end;
			if(vect[InArr[i] & ":КОС_2"]<0)then begin
				PISr.ArtCode = InArr[i];
				PISr.Location = "1-KOC";
				PISr.Position = "КОС_2";
				if(ReadFirstMain(PISr,3,true))then begin
					PISr.Instock = PISr.Instock - vect[InArr[i] & ":КОС_2"];
					PISr.LeftQty = PISr.LeftQty - vect[InArr[i] & ":КОС_2"];
					recordstore(PISr,true);
				end;
				PISr.ArtCode = InArr[i];
				PISr.Location = "1-KOC";
				PISr.Position = "ОСТ_3";
				if(ReadFirstMain(PISr,3,true))then begin
					PISr.Instock = PISr.Instock + vect[InArr[i] & ":КОС_2"];
					PISr.LeftQty = PISr.LeftQty + vect[InArr[i] & ":КОС_2"];
					recordstore(PISr,true);
				end;
			end;
			if(vect[InArr[i] & ":ОСТ_3"]>0 and vect[InArr[i] & ":КОС_2"]==0)then begin
				PISr.ArtCode = InArr[i];
				PISr.Location = "1-KOC";
				PISr.Position = "ОСТ_3";
				if(ReadFirstMain(PISr,3,true))then begin
					PISr.Instock = vect[InArr[i]];
					PISr.LeftQty = vect[InArr[i]];
					recordstore(PISr,true);
				end;
			end;
			if(vect[InArr[i] & ":ОСТ_3"]==0 and vect[InArr[i] & ":КОС_2"]>0)then begin
				PISr.ArtCode = InArr[i];
				PISr.Location = "1-KOC";
				PISr.Position = "КОС_2";
				if(ReadFirstMain(PISr,3,true))then begin
					PISr.Instock = vect[InArr[i]];
					PISr.LeftQty = vect[InArr[i]];
					recordstore(PISr,true);
				end;
			end;
			
		end;
	end;
	
	resetloop(ISr);
	ISr.Code = "";
	while(loopmain(ISr,1,true)) begin
		if(ISr.Instock<0)then begin
			startformat(15);
			OutString(0,"DblOpenINrsRn",ISr.Code,false);
			OutString(140,0,ISr.Code,false);
			OutString(210,0,ISr.Location,false);
			OutString(280,0,ISr.Instock,false);
			endformat;
			IS2r.Code = ISr.Code;
			IS2r.Location = ";;;";
			if(readfirstmain(IS2r,1,true))then begin
				if(IS2r.Instock==0)then begin
					resetloop(IS2r);
					IS2r.Code = ISr.Code;
					TrHs1  = true;
					while(loopmain(IS2r,1,TrHs1))begin
						if(TrHs1 and IS2r.Code==ISr.Code)then begin
							IS2r.Instock = 0;
							recordstore(IS2r,true);
						end else begin
							TrHs1  = false;
						end;
					end;
				end else begin
					IHr.ArtCode = ISr.Code;
					TrHs1 = true;
					ClearVector(ihqty);
					while(Loopkey("ArtCode",IHr,1,TrHs1))begin
						if(IHr.ArtCode!=ISr.Code)then begin TrHs1 = false; end;
						
						if(TrHs1 and IHr.StockAffectf>0)then begin
							ihqty[IHr.Location] = ihqty[IHr.Location] + IHr.Qty;
						end;
					end;
					resetloop(IHr);
					resetloop(IS2r);
					IS2r.Code = ISr.Code;
					TrHs1  = true;
					while(loopmain(IS2r,1,TrHs1))begin
						if(TrHs1 and IS2r.Code==ISr.Code)then begin
							if(IS2r.Location!=";;;")then begin
								IS2r.Instock = ihqty[IS2r.Location];
								recordstore(IS2r,true);
							end;
						end else begin
							TrHs1  = false;
						end;
					end;
				end;
			end;
		end;
		
		if(ISr.RsrvQty<0)then begin
			startformat(15);
			OutString(0,"DblOpenINrsRn",ISr.Code,false);
			OutString(140,0,ISr.Code,false);
			OutString(210,0,ISr.Location,false);
			OutString(280,0,ISr.Instock,false);
			OutString(320,0,ISr.RsrvQty,false);
			endformat;
		end;
		
	end;
	
	EndJob;

  
end;

global procedure OneKocBlankPosRn(record RcVc RepSpec)
begin
	record StockMovVc SMr;
	record SHVc SHr;
	row SHVc SHrw;
	record SDVc SDr;
	row SDVc SDrw;
	record PUVc PUr;
	row PUVc PUrw;
	record RetVc Retr;
	row RetVc Retrw;
	integer i,rwcnt;
	boolean blankPosf;
	string 20 lastpos;
	
	StartReportNoHeaderJob("1-КОС с пустым местом");
		Black_Divider(0,1);
		startformat(15);
			OutString(30,0,"Отгрузки       Отгрузки       Отгрузки       Отгрузки       Отгрузки       Отгрузки       Отгрузки       Отгрузки       Отгрузки",false);
		endformat;
		Black_Divider(0,1);
		startformat(15);
		endformat;
		startformat(15);
			OutString(0,0,"Код",false);
			OutString(70,0,"Дата",false);
			OutString(140,0,"со склада",false);
			OutString(210,0,"с места",false);
			OutString(280,0,"на склад",false);
			OutString(350,0,"на место",false);
		endformat;
		
		SHr.ShipOkDate = "06/12/15";
		while loopkey("ShipOkDate",SHr,1,true) begin
			blankPosf = false;
			if (SHr.Location=="1-KOC") and (SHr.OKFlag<>0) then begin
				rwcnt = matrowcnt(SHr);
				for (i=0;i<rwcnt;i=i+1) begin
					matrowget(SHr,i,SHrw);
					if blank(SHrw.PosCode) then begin
						blankPosf = true;
					end;
				end;
				if blankPosf then begin
					startformat(15);
					OutString(0,"DblSHVc",SHr.SerNr,false);
					OutString(70,0,"OK " & SHr.ShipOkDate,false);
					OutString(140,0,SHr.Location,false);
					OutString(210,0,"",false);
					OutString(280,0,"",false);
					OutString(350,0,"",false);
					endformat;
				end;
			end;
		end;
		startformat(15);
		endformat;
		Black_Divider(0,1);
		startformat(15);
		endformat;
		resetloop(SHr);
		SHr.ShipOkDate = "06/12/15";
		while loopbackkey("ShipOkDate",SHr,1,true) begin
			blankPosf = false;
			if (SHr.Location=="1-KOC") and (SHr.OKFlag<>0) then begin
				rwcnt = matrowcnt(SHr);
				for (i=0;i<rwcnt;i=i+1) begin
					matrowget(SHr,i,SHrw);
					if nonblank(SHrw.PosCode) then begin
						blankPosf = true;
						lastpos = SHrw.PosCode;
					end;
				end;
				if blankPosf then begin
					startformat(15);
					OutString(0,"DblSHVc",SHr.SerNr,false);
					OutString(70,0,"OK " & SHr.ShipOkDate,false);
					OutString(140,0,SHr.Location,false);
					OutString(210,0,lastpos,false);
					OutString(280,0,"",false);
					OutString(350,0,"",false);
					endformat;
				end;
			end;
		end;
		
		Black_Divider(0,1);
		startformat(15);
			OutString(30,0,"Поступления       Поступления       Поступления       Поступления       Поступления       Поступления       Поступления",false);
		endformat;
		Black_Divider(0,1);
		startformat(15);
		endformat;
		startformat(15);
			OutString(0,0,"Код",false);
			OutString(70,0,"Дата",false);
			OutString(140,0,"со склада",false);
			OutString(210,0,"с места",false);
			OutString(280,0,"на склад",false);
			OutString(350,0,"на место",false);
		endformat;
		
		PUr.TransDate = "06/12/15";
		while loopkey("TransDate",PUr,1,true) begin
			blankPosf = false;
			if (PUr.Location=="1-KOC") and (PUr.OKFlag<>0) then begin
				rwcnt = matrowcnt(PUr);
				for (i=0;i<rwcnt;i=i+1) begin
					matrowget(PUr,i,PUrw);
					if blank(PUrw.ToPosCode) then begin
						blankPosf = true;
					end;
				end;
				if blankPosf then begin
					startformat(15);
					OutString(0,"DblPU",PUr.SerNr,false);
					OutString(70,0,PUr.TransDate,false);
					OutString(140,0,PUr.Location,false);
					OutString(210,0,"",false);
					OutString(280,0,"",false);
					OutString(350,0,"",false);
					endformat;
				end;
			end;
		end;
		startformat(15);
		endformat;
		Black_Divider(0,1);
		startformat(15);
		endformat;
		resetloop(PUr);
		PUr.TransDate = "06/12/15";
		while loopbackkey("TransDate",PUr,1,true) begin
			blankPosf = false;
			if (PUr.Location=="1-KOC") and (PUr.OKFlag<>0) then begin
				rwcnt = matrowcnt(PUr);
				for (i=0;i<rwcnt;i=i+1) begin
					matrowget(PUr,i,PUrw);
					if nonblank(PUrw.ToPosCode) then begin
						blankPosf = true;
						lastpos = PUrw.ToPosCode;
					end;
				end;
				if blankPosf then begin
					startformat(15);
					OutString(0,"DblPU",PUr.SerNr,false);
					OutString(70,0,PUr.TransDate,false);
					OutString(140,0,PUr.Location,false);
					OutString(210,0,lastpos,false);
					OutString(280,0,"",false);
					OutString(350,0,"",false);
					endformat;
				end;
			end;
		end;
		
		Black_Divider(0,1);
		startformat(15);
			OutString(30,0,"Списания       Списания       Списания       Списания       Списания       Списания       Списания       Списания       Списания",false);
		endformat;
		Black_Divider(0,1);
		startformat(15);
		endformat;
		startformat(15);
			OutString(0,0,"Код",false);
			OutString(70,0,"Дата",false);
			OutString(140,0,"со склада",false);
			OutString(210,0,"с места",false);
			OutString(280,0,"на склад",false);
			OutString(350,0,"на место",false);
		endformat;
		
		SDr.TransDate = "06/12/15";
		while loopkey("TransDate",SDr,1,true) begin
			blankPosf = false;
			if (SDr.Location=="1-KOC") and (SDr.OKFlag<>0) then begin
				rwcnt = matrowcnt(SDr);
				for (i=0;i<rwcnt;i=i+1) begin
					matrowget(SDr,i,SDrw);
					if blank(SDrw.PosCode) then begin
						blankPosf = true;
					end;
				end;
				if blankPosf then begin
					startformat(15);
					OutString(0,"DblSDVc",SDr.SerNr,false);
					OutString(70,0,SDr.TransDate,false);
					OutString(140,0,SDr.Location,false);
					OutString(210,0,"",false);
					OutString(280,0,"",false);
					OutString(350,0,"",false);
					endformat;
				end;
			end;
		end;
		startformat(15);
		endformat;
		Black_Divider(0,1);
		startformat(15);
		endformat;
		resetloop(SDr);
		SDr.TransDate = "06/12/15";
		while loopbackkey("TransDate",SDr,1,true) begin
			blankPosf = false;
			if (SDr.Location=="1-KOC") and (SDr.OKFlag<>0) then begin
				rwcnt = matrowcnt(SDr);
				for (i=0;i<rwcnt;i=i+1) begin
					matrowget(SDr,i,SDrw);
					if nonblank(SDrw.PosCode) then begin
						blankPosf = true;
						lastpos = SDrw.PosCode;
					end;
				end;
				if blankPosf then begin
					startformat(15);
					OutString(0,"DblSDVc",SDr.SerNr,false);
					OutString(70,0,SDr.TransDate,false);
					OutString(140,0,SDr.Location,false);
					OutString(210,0,lastpos,false);
					OutString(280,0,"",false);
					OutString(350,0,"",false);
					endformat;
				end;
			end;
		end;
		
		Black_Divider(0,1);
		startformat(15);
			OutString(30,0,"Перемещения       Перемещения       Перемещения       Перемещения       Перемещения       Перемещения       Перемещения",false);
		endformat;
		Black_Divider(0,1);
		startformat(15);
		endformat;
		startformat(15);
			OutString(0,0,"Код",false);
			OutString(70,0,"Дата",false);
			OutString(140,0,"со склада",false);
			OutString(210,0,"с места",false);
			OutString(280,0,"на склад",false);
			OutString(350,0,"на место",false);
		endformat;
		
		SMr.SerNr = "10607";
		while loopmain(SMr,1,true) begin
			if (SMr.ToLocation=="1-KOC") and (SMr.OKFlag<>0) then begin
				if blank(SMr.ToPos) then begin
					startformat(15);
					OutString(0,"DblStockMov",SMr.SerNr,false);
					OutString(70,0,"пол " & SMr.TransDate,false);
					OutString(140,0,"",false);
					OutString(210,0,"",false);
					OutString(280,0,SMr.ToLocation,false);
					OutString(350,0,SMr.ToPos,false);
					endformat;
				end;
			end;
		end;
		resetloop(SMr);
		SMr.SerNr = "10607";
		while loopmain(SMr,1,true) begin
			if (SMr.FrLocation=="1-KOC") and (SMr.OKFlag<>0) then begin
				if blank(SMr.FrPos) then begin
					startformat(15);
					OutString(0,"DblStockMov",SMr.SerNr,false);
					OutString(70,0,"зак " & SMr.OrdTransDate,false);
					OutString(140,0,SMr.FrLocation,false);
					OutString(210,0,SMr.FrPos,false);
					OutString(280,0,"",false);
					OutString(350,0,"",false);
					endformat;
				end;
			end;
		end;
		startformat(15);
		endformat;
		
		Black_Divider(0,1);
		startformat(15);
		endformat;
		resetloop(SMr);
		SMr.SerNr = "10602";
		while loopbackkey("SerNr",SMr,1,true) begin
			if (SMr.ToLocation=="1-KOC") and (SMr.OKFlag<>0) then begin
				if nonblank(SMr.ToPos) then begin
					startformat(15);
					OutString(0,"DblStockMov",SMr.SerNr,false);
					OutString(70,0,"пол " & SMr.TransDate,false);
					OutString(140,0,"",false);
					OutString(210,0,"",false);
					OutString(280,0,SMr.ToLocation,false);
					OutString(350,0,SMr.ToPos,false);
					endformat;
				end;
			end;
		end;
		resetloop(SMr);
		SMr.SerNr = "10602";
		while loopbackkey("SerNr",SMr,1,true) begin
			if (SMr.FrLocation=="1-KOC") and (SMr.OKFlag<>0) then begin
				if nonblank(SMr.FrPos) then begin
					startformat(15);
					OutString(0,"DblStockMov",SMr.SerNr,false);
					OutString(70,0,"зак " & SMr.OrdTransDate,false);
					OutString(140,0,SMr.FrLocation,false);
					OutString(210,0,SMr.FrPos,false);
					OutString(280,0,"",false);
					OutString(350,0,"",false);
					endformat;
				end;
			end;
		end;
		
		startformat(15);
		endformat;
		
		Black_Divider(0,1);
		startformat(15);
			OutString(30,0,"Возврат       Возврат       Возврат       Возврат       Возврат       Возврат       Возврат       Возврат       Возврат       Возврат",false);
		endformat;
		Black_Divider(0,1);
		startformat(15);
		endformat;
		startformat(15);
			OutString(0,0,"Код",false);
			OutString(70,0,"Дата",false);
			OutString(140,0,"со склада",false);
			OutString(210,0,"с места",false);
			OutString(280,0,"на склад",false);
			OutString(350,0,"на место",false);
		endformat;
		
		Retr.TransDate = "06/12/15";
		while loopkey("TransDate",Retr,1,true) begin
			blankPosf = false;
			if (Retr.Location=="1-KOC") and (Retr.OKFlag<>0) then begin
				rwcnt = matrowcnt(Retr);
				for (i=0;i<rwcnt;i=i+1) begin
					matrowget(Retr,i,Retrw);
					if blank(Retrw.PosCode) then begin
						blankPosf = true;
					end;
				end;
				if blankPosf then begin
					startformat(15);
					OutString(0,"DblRetVc",Retr.SerNr,false);
					OutString(70,0,Retr.TransDate,false);
					OutString(140,0,"",false);
					OutString(210,0,"",false);
					OutString(280,0,Retr.Location,false);
					OutString(350,0,"",false);
					endformat;
				end;
			end;
		end;
		startformat(15);
		endformat;
		Black_Divider(0,1);
		startformat(15);
		endformat;
		resetloop(Retr);
		Retr.TransDate = "06/12/15";
		while loopbackkey("TransDate",Retr,1,true) begin
			blankPosf = false;
			if (Retr.Location=="1-KOC") and (Retr.OKFlag<>0) then begin
				rwcnt = matrowcnt(Retr);
				for (i=0;i<rwcnt;i=i+1) begin
					matrowget(Retr,i,Retrw);
					if nonblank(Retrw.PosCode) then begin
						blankPosf = true;
						lastpos = Retrw.PosCode;
					end;
				end;
				if blankPosf then begin
					startformat(15);
					OutString(0,"DblRetVc",Retr.SerNr,false);
					OutString(70,0,Retr.TransDate,false);
					OutString(140,0,"",false);
					OutString(210,0,"",false);
					OutString(280,0,Retr.Location,false);
					OutString(350,0,lastpos,false);
					endformat;
				end;
			end;
		end;
	EndJob;
return;
end;


global procedure ItemStatusTestRn(record RcVc RepSpec)
begin
	record PISVc PISr;
	record ItemStatusVc ISr;
	record INVc INr;
	boolean testf,TrHs,TrHs2;
	vector val vect;
	vector boolean INInArr;
	array string 50 InArr;
	integer i;
	val qty,ihQty,isQty,isallqty;
	boolean minus;
	Record ItemHistVc IHr;
	
	StartReportNoHeaderJob("Несовпадения по складу 1-КОС");
	startformat(15);
		OutString(0,0,"Код",false);
		OutString(70,0,"Разница",false);
		OutString(100,0,"Отр",false);
		OutString(130,0,"isQty",false);
		OutString(160,0,"isallqty",false);
		OutString(190,0,"ihQty",false);
	endformat;
	
	while(loopmain(INr,1,true))begin
		TrHs = true;
		resetloop(ISr);
		ISr.Code = INr.Code;
		qty = 0;
		isQty = 0;
		isallqty = 0;
		minus = false;
		while(loopmain(ISr,1,TrHs))begin
			if(ISr.Code!=INr.Code)then begin TrHs = false; end;
			
			if(TrHs)then begin
				if(ISr.Instock<0)then begin
					minus = true;
				end;
				if(ISr.Location==";;;")then begin
					qty = qty + ISr.Instock;
					isallqty = isallqty + ISr.Instock;
				end else begin
					qty = qty - ISr.Instock;
					isQty = isQty + ISr.Instock;
				end;
			end;
		end;
		
		ihQty = 0;
		IHr.ArtCode = INr.Code;
		TrHs = true;
		resetloop(IHr);
		while(loopkey("ArtCode",IHr,1,TrHs))begin
			testf = true;
			if(IHr.ArtCode!=INr.Code)then begin TrHs = false; testf = false; end;
			if(IHr.StockAffectf==0)then begin testf = false; end;
			
			if(testf)then begin
				ihQty = ihQty + IHr.Qty;
			end;
		end;
		
		if(qty!=0 or minus or ihQty!=isQty or ihQty!=isallqty)then begin
			startformat(15);
				OutString(0,0,INr.Code,false);
				OutString(70,0,qty,false);
				OutString(100,0,minus,false);
				OutString(130,0,isQty,false);
				OutString(160,0,isallqty,false);
				OutString(190,0,ihQty,false);
			endformat;
		end;
		
	end;
	EndJob;

return;
end;


global updating procedure SRCheckHistRn(record RcVc RepSpec)
begin
	record SRVc SRr;
	record ItemHistVc IHr,IHsr,IHsmr;
	integer mtrw,i;
	row SRVc SRrw;
	boolean TrHs,testf,TrHss,testfs,TrHssm,testfsm;
	val remcost,remqty,totremcost,totremqty,sumtot,actqty,actcost,outcost,outqty,smremqty,smremcost,smcost,smqty,cost;
	record StockMovVc SMr;
	row StockMovVc SMrw;
	record IVVc IVr;
	row IVVc IVrw;
	record SalesDataVc SDr;
	record SHVc SHr;
	row SHVc SHrw;
	vector boolean ihUsed;
	record ItemStatusVc ISr;
	
	logtext(0,"SRCheckHistRn");
	
	
	startreportnoheaderjob("SRCheckHistRn");
		
		SRr.SerNr = RepSpec.long1;
		if(readfirstmain(SRr,1,true))then begin
			mtrw = matrowcnt(SRr);
			startformat(15);
				outstring(0,0,"ArtCode",false);
				outstring(70,0,"Name",false);
				outstring(140,0,"InStock Qty",false);
				outstring(210,0,"InStock Cost",false);
				
				outstring(350,0,"New corr.cost",false);
				outstring(400,0,"New incorr. cost",false);
				outstring(1,0,"Diff 1 pcs",true);
			endformat;
			For(i=0;i<mtrw;i=i+1) begin
				matrowget(SRr,i,SRrw);
				if((SRrw.NewFIFORowVal/SRrw.Qty - SRrw.NewFIFO)>0.2)then begin
					
					IHr.FileName = "SRVc";
					IHr.TransNr = SRr.SerNr;
					IHr.Row = i;
					TrHs = true;
					remcost = blankval;
					remqty = blankval;
					outcost = blankval;
					outqty = blankval;
					smremqty = blankval;
					
					actqty = blankval;
					actcost = blankval;
					IHsr.ArtCode = SRrw.ArtCode;
					TrHss = true;
					ISr.Location = ";;;";
					ISr.Code = SRrw.ArtCode;
					if(readfirstmain(ISr,2,true))then begin
						actqty = actqty + ISr.Instock;
						totremqty = totremqty + ISr.Instock;
					end;
					/*while(loopkey("ActiveQty",IHsr,1,TrHss))begin
						testfs = true;
						if(IHsr.ArtCode!=SRrw.ArtCode)then begin TrHss = false; end;
					
						if(TrHss)then begin
							actqty = actqty + IHsr.RemQty;
							actcost = actcost + IHsr.RemCostPrice;
							totremqty = totremqty + IHsr.RemQty;
							totremcost = totremcost + IHsr.RemCostPrice;
						end;
					
					end;
					resetloop(IHsr);*/
					
					
					startformat(15);
						outstring(0,0,SRrw.ArtCode,false);
						outstring(70,0,SRrw.Spec,false);
						outstring(140,0,actqty,false);
						outstring(210,0,actcost,false);
						outstring(350,0,SRrw.NewFIFO,false);
						outstring(400,0,SRrw.NewFIFORowVal/SRrw.Qty,false);
						outstring(1,0,SRrw.NewFIFORowVal/SRrw.Qty-SRrw.NewFIFO,true);
					endformat;
					
					
					while(loopkey("FNTransNr",IHr,3,TrHS))begin
						testf = true;
						if(IHr.FileName!="SRVc")then begin TrHs = false; testf = false; end;
						if(IHr.TransNr!=SRr.SerNr)then begin TrHs = false; testf = false; end;
						if(IHr.Row!=i)then begin TrHs = false; testf = false; end;
						if(IHr.ArtCode!=SRrw.ArtCode)then begin testf = false; end;
						//if(IHr.RemQty==0)then begin testf = false; end;
						
						if(testf)then begin
							
							
							//IHsr.Source = IHr.SerNr;
							TrHss = true;
							smremcost = blankval;
							smqty = blankval;
							IHsr.ArtCode = IHr.ArtCode;
							IHsr.TransDate = IHr.TransDate;
							while(loopkey("ArtCode",IHsr,2,TrHss))begin
								testfs = true;
								if(IHsr.ArtCode!=IHr.ArtCode)then begin TrHss = false; testfs = false; end;
								if(IHsr.FileName!="IVVc" and IHsr.FileName!="SHVc")then begin testfs = false; end;
								if(IHsr.StockAffectf==0)then begin testfs = false; end;
								if(ihUsed[IHsr.SerNr])then begin testfs = false; end else begin ihUsed[IHsr.SerNr] = true; end;
								
								if(testfs)then begin
									if(IHsr.FileName=="IVVc")then begin
										IVr.SerNr = IHsr.TransNr;
										if(readfirstmain(IVr,1,true))then begin
											if(IHsr.Row<matrowcnt(IVr))then begin 
												matrowget(IVr,IHsr.Row,IVrw);
												if(IVrw.ArtCode==IHr.ArtCode)then begin
													if(IVrw.FIFORowVal/IVrw.Quant>SRrw.NewFIFO*1.2)then begin
														startformat(15);
															if(RepSpec.Media==mtExcel)then begin
																outstring(0,0,SRrw.ArtCode,false);
																outstring(0,0,"",false);
																outstring(0,0,"",false);
																outstring(0,0,"",false);
																outstring(0,0,"",false);
																outstring(0,0,"",false);
																outstring(0,0,"",false);
															end;
															outstring(0,0,"ArtCode IV",false);
															outstring(40,0,IVr.SerNr,false);
															outstring(80,0,IVrw.Quant,false);
															outstring(360,0,IVrw.FIFORowVal/IVrw.Quant,false);
														endformat;
													end;
												end;
											end;
										end;
									end else begin
										SHr.SerNr = IHsr.TransNr;
										if(readfirstmain(SHr,1,true))then begin
											if(IHsr.Row<matrowcnt(SHr))then begin 
												matrowget(SHr,IHsr.Row,SHrw);
												if(SHrw.ArtCode==IHr.ArtCode)then begin
													if(SHrw.FIFORowVal/SHrw.Ship>SRrw.NewFIFO*1.2)then begin
														startformat(15);
															if(RepSpec.Media==mtExcel)then begin
																outstring(0,0,SRrw.ArtCode,false);
																outstring(0,0,"",false);
																outstring(0,0,"",false);
																outstring(0,0,"",false);
																outstring(0,0,"",false);
																outstring(0,0,"",false);
																outstring(0,0,"",false);
															end;
															
															outstring(0,0,"ArtCode SH",false);
															outstring(40,0,SHr.SerNr,false);
															outstring(80,0,SHrw.Ship,false);
															outstring(360,0,SHrw.FIFORowVal/SHrw.Ship,false);
														endformat;
													end;
												end;
											end;
										end;
									end;
									/*outcost = outcost + IHsr.TotCostPrice;
									outqty = outqty + IHsr.Qty;
									
									
									if(IHsr.FileName=="StockMovVc")then begin
										smremqty = blankval;
										smremcost = blankval;
										SMr.SerNr = IHsr.TransNr;
										readfirstmain(SMr,1,true);
										matrowget(SMr,IHsr.Row,SMrw);
										smqty = SMrw.Quant;
										IHsmr.FileName = IHsr.FileName;
										IHsmr.TransNr = IHsr.TransNr;
										IHsmr.Row = IHsr.Row;
										TrHssm = true;
										
										while(loopkey("FNTransNr",IHsmr,3,TrHssm))begin
											testfsm = true;
											if(IHsmr.FileName!=IHsr.FileName)then begin TrHssm = false; testfsm = true; end;
											if(IHsmr.TransNr!=IHsr.TransNr)then begin TrHssm = false; testfsm = true; end;
											if(IHsmr.Row!=IHsr.Row)then begin TrHssm = false; testfsm = true; end;
											if(IHsmr.ArtCode!=IHsr.ArtCode)then begin testfsm = true; end;
											
											if(testfsm)then begin
												if(IHsmr.RemQty!=0)then begin
													smremqty = smremqty + IHsmr.RemQty;
													smremcost = smremcost + IHsmr.RemCostPrice;
												end;
											end;
										end;
										resetloop(IHsmr);
										
										if(smqty==smremqty)then begin
											IHsmr.FileName = IHsr.FileName;
											IHsmr.TransNr = IHsr.TransNr;
											IHsmr.Row = IHsr.Row;
											TrHssm = true;
											while(loopkey("FNTransNr",IHsmr,3,TrHssm))begin
												testfsm = true;
												if(IHsmr.FileName!=IHsr.FileName)then begin TrHssm = false; testfsm = true; end;
												if(IHsmr.TransNr!=IHsr.TransNr)then begin TrHssm = false; testfsm = true; end;
												if(IHsmr.Row!=IHsr.Row)then begin TrHssm = false; testfsm = true; end;
												if(IHsmr.ArtCode!=IHsr.ArtCode)then begin testfsm = true; end;
											
												if(testfsm)then begin
													if(IHsmr.TotCostPrice/IHsmr.Qty==IHr.TotCostPrice/IHr.Qty)then begin
														logtext(0,"--*");
													end;
												end;
											end;
											resetloop(IHsmr);																	
											logtext(0,SRrw.ArtCode & " " & SMr.SerNr);
										end;
										
									end;*/
								end;
							end;
							resetloop(IHsr);
							
							/*remqty = remqty + IHr.RemQty;
							remcost = remcost + IHr.RemCostPrice;
							totremqty = totremqty + IHr.RemQty;
							totremcost = totremcost + IHr.RemCostPrice;*/
						end;
					end;
					resetloop(IHr);
					
					
					
						/*if(SRrw.NewFIFO/(actcost/actqty)<0.9 or SRrw.NewFIFO/(actcost/actqty)>1.1)then begin
							sumtot = sumtot + SRrw.NewFIFO * SRrw.Qty - SRrw.NewFIFORowVal;
							startformat(15);
								outstring(0,0,SRrw.ArtCode,false);
								outstring(25,0,outcost/outqty,false);
								outstring(50,0,SRrw.NewFIFO,false);
								outstring(75,0,outqty & "_" & smqty - smremqty,false);
								outstring(100,0,SRrw.Qty,false);
								outstring(150,0,SRrw.NewFIFO * SRrw.Qty - SRrw.NewFIFORowVal,false);
								outstring(200,0,remqty & " " & smremqty,false);
								outstring(250,0,remcost & " " & smremcost,false);
								outstring(300,0,actqty,false);
								outstring(350,0,actcost,false);
								outstring(400,0,actcost/actqty,false);
								outstring(420,0,SRrw.Location & "_" & SRrw.PosCode,false);
								outstring(1,0,SRrw.NewFIFO/(actcost/actqty),true);
							endformat;
						end;*/
					
					/*if(SRrw.Qty==remqty)then begin
						SRrw.NewFIFORowVal = SRrw.NewFIFO * SRrw.Qty;
						IHr.FileName = "SRVc";
						IHr.TransNr = SRr.SerNr;
						IHr.Row = i;
						if(readfirstkey("FNTransNr",IHr,3,true))then begin
							IHr.TotCostPrice = SRrw.NewFIFORowVal;
							IHr.RemCostPrice = SRrw.NewFIFORowVal;
							recordstore(IHr,true);
						end;
						SRrw.DiffFIFORowVal = SRrw.NewFIFORowVal - SRrw.FIFORowVal;
						matrowput(SRr,i,SRrw);
					end;*/
					
				end;
			end; 
			//recordstore(SRr,true);
			gray_divider(0,1);
			startformat(15);
				outstring(150,0,sumtot,false);
				outstring(200,0,totremcost,false);
				outstring(250,0,totremqty,false);
			endformat;
		end;

	endjob;

return;
end;

global updating procedure SRCheckHistToSMRn(record RcVc RepSpec)
begin
	record SRVc SRr;
	record ItemHistVc IHr,IHsr,IHsmr;
	integer mtrw,i;
	row SRVc SRrw;
	boolean TrHs,testf,TrHss,testfs,TrHssm,testfsm,foundf;
	val remcost,remqty,totremcost,totremqty,sumtot,actqty,actcost,outcost,outqty,smremqty,smremcost,smcost,smqty,cost;
	record StockMovVc SMr;
	row StockMovVc SMrw;
	record IVVc IVr;
	row IVVc IVrw;
	record SalesDataVc SDr;
	record SHVc SHr;
	row SHVc SHrw;
	vector boolean ihUsed;
	record ItemStatusVc ISr;
	record LocationVc Locr;
	record PosVc Posr;
	record PISVc PISr;
	
	logtext(0,"SRCheckHistRn");
	
	
	startreportnoheaderjob("SRCheckHistRn");
		
		SRr.SerNr = RepSpec.long1;
		if(readfirstmain(SRr,1,true))then begin
			mtrw = matrowcnt(SRr);
			startformat(15);
				outstring(0,0,"Товар",false);
				outstring(70,0,"Название",false);
				outstring(140,0,"Склад",false);
				outstring(210,0,"Место",false);
				outstring(300,0,"Остаток",false);
				outstring(1,0,"Правильная себестоимость из переоценки",true);
			endformat;
			For(i=0;i<mtrw;i=i+1) begin
				matrowget(SRr,i,SRrw);
				
				if((SRrw.NewFIFORowVal/SRrw.Qty - SRrw.NewFIFO)>0.2)then begin
					if(ihUsed[SRrw.ArtCode]==true)then begin
					
					end else begin
						ihUsed[SRrw.ArtCode] = true;
						IHr.FileName = "SRVc";
						IHr.TransNr = SRr.SerNr;
						IHr.Row = i;
						TrHs = true;
						remcost = blankval;
						remqty = blankval;
						outcost = blankval;
						outqty = blankval;
						smremqty = blankval;
					
						actqty = blankval;
						actcost = blankval;
						IHsr.ArtCode = SRrw.ArtCode;
						TrHss = true;
						ISr.Location = ";;;";
						ISr.Code = SRrw.ArtCode;
						if(readfirstmain(ISr,2,true))then begin
							actqty = actqty + ISr.Instock;
						end;
					
						if(actqty>0)then begin
							Locr.Code = "";
							while(loopmain(Locr,1,true))begin
								ISr.Location = Locr.Code;
								ISr.Code = SRrw.ArtCode;
								actqty = blankval;
								if(readfirstmain(ISr,2,true))then begin
									actqty = ISr.Instock;
								end;
							
								if(actqty>0)then begin
									Posr.Location = Locr.Code;
									TrHs = true;
									foundf = false;
									while(loopkey("Location",Posr,1,TrHs))begin
										if(Posr.Location!=Locr.Code)then begin TrHs = false; end;
									
										if(TrHs)then begin
											PISr.ArtCode = SRrw.ArtCode;
											PISr.Location = Locr.Code;
											PISr.Position = Posr.Code;
											if(readfirstmain(PISr,3,true))then begin
												if(PISr.Instock>0)then begin
													foundf = true;
													startformat(15);
														outstring(0,0,SRrw.ArtCode,false);
														outstring(70,0,SRrw.Spec,false);
														outstring(140,0,Locr.Code,false);
														outstring(210,0,Posr.Code,false);
														outstring(300,0,PISr.Instock,false);
														outstring(1,0,SRrw.NewFIFO,true);
													endformat;
												end;
											end;
										end;
									end;
									resetloop(Posr);
									if(foundf==false)then begin
										startformat(15);
											outstring(0,0,SRrw.ArtCode,false);
											outstring(70,0,SRrw.Spec,false);
											outstring(140,0,Locr.Code,false);
											outstring(210,0,"",false);
											outstring(300,0,ISr.Instock,false);
											outstring(1,0,SRrw.NewFIFO,true);
										endformat;
									end else begin
										startformat(15);
											outstring(0,0,SRrw.ArtCode,false);
											outstring(70,0,SRrw.Spec,false);
											outstring(140,0,Locr.Code,false);
											outstring(210,0,"TOTAL",false);
											outstring(300,0,ISr.Instock,false);
											outstring(1,0,SRrw.NewFIFO,true);
										endformat;
									end;
								end;
							end;
							resetloop(Locr);
						end;
					end;
				end;
			end; 
		end;

	endjob;

return;
end;