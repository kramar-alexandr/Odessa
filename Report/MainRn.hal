external function Integer CountObjects(string);
external procedure MulM4OneRate(val,val,var val,roundmode,Boolean);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external procedure GetFullCurncyRateText(Boolean,var string,val,val,val,val,val);
external procedure GetConsolidationRate(string,string,Date,var val,var val,var val,var val,var val);
external procedure HForm(record RcVc,record AccVc,val,val,val,Boolean);
external function Boolean HasMultiCurrency();
external function roundmode DefaultRoundMode();
external procedure AddVATSumToVATSum(record SMVc,record SMVc);
external procedure AddCurncyTotals(var array string,var array val,var Integer,string,val);
external procedure PrintCurncyTotals(array string,array val,array val,array val,Integer,Integer,Integer,Integer,Integer,Boolean,Integer);
external procedure BeginCurncyTotals(var Integer);
external function Integer GetLocalCompanyNr(string,Boolean);
external procedure ClearAcums();
external procedure PrintMainHeaders(record RcVc,var Boolean,Array Boolean,Array string,Array string,Array LongInt,Boolean);
external procedure GetAccountDescription2(string,string,var string);
external procedure ReadFBRow(record RcVc,record FBVc,string,var Integer,var val,
                    record SMVc,Integer,string,var Boolean,
                    var val,val,val,var val,var val,var LongInt,
                    var Boolean,Array Boolean,Array string,Array string,Array LongInt,
                    record AccVc,Boolean,
                    var array string,var array val,var array val,var array val,var Integer);
external procedure ReadRADRecord(record RcVc,record RegArchiveDetailVc,string,var Integer,var val,
                    record SMVc,Integer,string,var Boolean,
                    var val,val,val,var val,var val,
                    var Boolean,Array Boolean,Array string,Array string,Array LongInt,
                    record AccVc,Boolean,
                    var array string,var array val,var array val,var array val,var Integer);
external procedure ReadSMRow(record RcVc,record SMVc,string,Date,var Integer,var val,
                    record SMVc,Integer,Integer,var Boolean,
                    var val,val,val,var val,var val,var LongInt,
                    var Boolean,Array Boolean,Array string,Array string,Array LongInt,
                    record AccVc,Boolean,
                    var array string,var array val,var array val,var array val,var Integer);
external procedure ReadTrR2(record RcVc,record TRVc,record BaseCurBlock,string,Date,var Integer,
                   var val,record SMVc,Integer,string,
                   var Boolean,val,val,val,var val,var val,var LongInt,
                   var Boolean,Array Boolean,Array string,Array string,Array LongInt,
                   record AccVc,Boolean,var array string,var array val,var array val,var array val,var Integer);
external procedure ReadTrRow(record RcVc,record TRVc,record BaseCurBlock,string,var Integer,var val,
                    record SMVc,Integer,string,var Boolean,
                    var val,var val,var val,var val,var val,var LongInt,
                    var Boolean,Array Boolean,Array string,Array string,Array LongInt,
                    record AccVc,Boolean,var array string,var array val,var array val,var array val,var Integer);
external procedure FindNLAccBal(string,string,string,Integer,Date,Date,Integer,Integer,Boolean,string,Integer,string,string,var val);
external function Boolean AccInRange(string,string);
external procedure ListPerTrans(record RcVc);
external function Boolean DatePrel(Date);
external function Integer GetVATLaw();
external procedure HTVatNr(string,var string);
external procedure HTOT(string,var string);
external procedure HTObj(string,var string);
external procedure HTAccPer(Date,Date,var string);
external procedure HT2Per(Date, Date , var string);
external procedure LstRegDat(var string);
external procedure HTAccs(string,string,Integer, var string);
external procedure FindAccSD(Date,var Date,var Boolean);
external function Boolean SetInSet2(string,string);
external procedure ARPrintDueDetailedInstalmenInvoice(record IVVc,record RcVc,record CUVc,Integer,Integer);
external procedure FindInstalmentInvoiceBalance(record RcVc,record IVVc,Date,var val,var val);
external function LongInt CalculateLateDaysInstallmentInv(LongInt,Date,Date,Date,Boolean);
external function LongInt CalculateLateDays(Date,Date,Date,Boolean,Boolean);
external function Boolean ConvertPurgeNLTrans_IVVc(record PurgeTRVc,record IPrsVc,record CUVc,Boolean,var record IVVc);
external function Boolean ConvertNLTrans_IVVc(record TRVc,record IPrsVc,record CUVc,Boolean,var record IVVc);
external procedure GetARAcc(string,var string);
external function Boolean IsIVinActualPeriod(Date,Integer,Integer);
external procedure ARRnRateDifferencesDetailed(record RcVc,record IVVc,record ARVc,record CUVc,val,val,Date,Boolean,
                            var val,var val,var val,var val,var Boolean,
                            var string,var Boolean,var record SMVc);
external procedure ARRnRateDifferences(record RcVc,record IVVc,val,val,Date,var val,var val,var val,var val,
                            var string,var Boolean ,var record SMVc);
external procedure PrintARAged(record RcVc,val,val,val,val,val,val,val,val,val,val,val,Integer,val,val,val,val,val,val,val,val,val,val);
external procedure PrintARReportTotals(record RcVc,Integer,val,val,val,val,val,val,val,val,val,val,Array val);
external function Boolean ARInvoiceTest(record RcVc,record IVVc,Boolean);
external procedure ARRnAddToDebtorsAccounts(string,Integer,val,Array string,Array val,var Integer);
external procedure ARRnPrintDebtorsAccounts(Array string,Array val,var Integer);
external procedure ARRnGetInvBalance(record IVVc,var Date,Integer,var val,var val,var LongInt);
external procedure SumAgedInstalmenInvoice(record RcVc,record CUVc,Date,record IVVc,Integer,var val,var val,var val,var val,var val,var val,var val,var val,var val);
external procedure SubCashRows_IVVc(record IVVc,Boolean,var val,var val);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure PrintPrepaymentsNrsIP(Integer,record RcVc,string,Boolean,Integer,Integer);
external function Boolean ObjectTypeMatch(string,string);
external procedure BeginCurncyTotals(var Integer);
external procedure AddCurncyTotals(var array string,var array val,var Integer,string,val);
external procedure PrintCurncyTotals(array string,array val,array val,array val,Integer,Integer,Integer,Integer,Integer,Boolean,Integer);
external procedure PrintCurTotalsRow(record SMVc,Integer,Integer,Integer,Integer,Integer);
external procedure AddCurTotalsRow(string,val,val,val,var record SMVc);
external procedure PrintHeaderAR(record RcVc);
external procedure PrintHeaderAR2(record RcVc,Date,Integer,Integer,Integer);
external procedure SubPrePayments(record IVVc,var val,var val);
external procedure PrintOnAccountInfo(record CUVc,val,val,var Boolean,record RcVc,record SMVc,Boolean);
external procedure GetOnAccBalance(record RcVc,string,string,Boolean,Integer,var val,var val,var val,var val,var val,var val,var val,record SMVc,
                   Array string,Array val,var Integer);
external procedure Base1ToBase2(var val,Date,var val);
external procedure ARWithLogg(record CUVc,var array string,var array val,var Integer,record RcVc,record IVVc,record IPrsVc,record TRVc,var val,Integer,Boolean);
external procedure ARPrintDueDetailed(record IVVc,record RcVc,string,string,val,val,val,val,val,val,val,val,val,var val,Integer);
external procedure ARRPrintOverView(record CUVc,record IVVc,record IPrsVc,record TRVc,record RcVc,val,val,LongInt);
external procedure PrintAgedLine(val,val,val,val,val,val,val,val,val,val,val,Integer,Integer,string);
external procedure SumAged(Date,Integer,Integer,var val,var val,var val,var val,var val,var val,var val,var val,var val,var val);
external procedure SumAgedNew(Date,Date,Date,Boolean,Integer,Integer,var val,var val,var val,var val,var val,var val,var val,var val,var val,var val);
external procedure CountPeriods(var Integer);
external procedure ClassTypef(string,string,var boolean);
external procedure AddInstalmentInvoiceBalanceTotals(record RcVc,record IVVc,Date,var Array val,var Array val,var Array val);

SetLangMode(LangRussian,"RUS",0);	

global
function LongInt CalcARRnColumnSpacing(LongInt nrofper,Integer UseAccPeriod,var LongInt colwidth,var LongInt colstart,var LongInt col2start)
begin
  LongInt ncols;
  
  ncols = nrofper;
  if (UseAccPeriod==0) then begin
    ncols = ncols + 1;
  end;
  
  if (ncols==1) then begin colstart = 300; end;
  if (ncols==2) then begin colstart = 280; end;
  if (ncols==3) then begin colstart = 260; end;
  if (ncols==4) then begin colstart = 220; end;
  if (ncols==5) then begin colstart = 205; end;
  if (ncols==6) then begin colstart = 200; end;
  if (ncols==7) then begin colstart = 200; end;
  
  colwidth = (475 - colstart) / (ncols + 1); // 5 extra px. for total column
  col2start = colstart + colwidth;
  
  CalcARRnColumnSpacing = ncols;
  return;
end;


function
Boolean MainLoopNext(Array Boolean mhractivef,Array Boolean mhrfoundf,Array Boolean mhrfirstf,
                     Array Boolean mhrheaderf,Array Boolean mhrotflag,Array LongInt mhrLLoop,
                     Array string mhrvc,Array string mhrckey,Array string mhrfromstr,Array string mhrtostr,
                     Integer arrcnt)
BEGIN
  Boolean res;
  record ObjVc Objr;
  record AccVc Accr;
  
  if (mhractivef[arrcnt]==false) then begin
// if (mlp->vc==ObjVc) then res = true;
    goto LMainLoopNext;
  end;
  if (mhrfoundf[arrcnt]==false) then begin
    goto LMainLoopNext;
  end;
L22MainLoopNext:;  
  if (mhrfirstf[arrcnt]==false) then begin
    if (mhrvc[arrcnt]=="AccVc") then begin
      SetLoopPosition(Accr,mhrLLoop[arrcnt]);
      mhrfoundf[arrcnt] = LoopKey(mhrckey[arrcnt],Accr,1,true);
      mhrLLoop[arrcnt] = GetLoopPosition(Accr);
    end;
    if (mhrvc[arrcnt]=="ObjVc") then begin
      SetLoopPosition(Objr,mhrLLoop[arrcnt]);
      mhrfoundf[arrcnt] = LoopKey(mhrckey[arrcnt],Objr,1,true);
      mhrLLoop[arrcnt] = GetLoopPosition(Objr);
    end;
  end else begin
    if (mhrvc[arrcnt]=="AccVc") then begin
      SetLoopPosition(Accr,mhrLLoop[arrcnt]-1);
      mhrfoundf[arrcnt] = LoopKey(mhrckey[arrcnt],Accr,1,true);
    end;
    if (mhrvc[arrcnt]=="ObjVc") then begin
      SetLoopPosition(Objr,mhrLLoop[arrcnt]-1);
      mhrfoundf[arrcnt] = LoopKey(mhrckey[arrcnt],Objr,1,true);
    end;
//    mhrLLoop[arrcnt] = mhrLLoop[arrcnt] + 1;
  end;
  mhrfirstf[arrcnt] = false;  
  if (mhrfoundf[arrcnt]==false) then begin
    goto LMainLoopNext;
  end;
  
  if (mhrvc[arrcnt]=="AccVc") then begin
    if (nonblank(mhrfromstr[arrcnt])) then begin
      if (Accr.AccNumber<mhrfromstr[arrcnt]) then begin
        mhrfoundf[arrcnt] = false;
      end;
    end;
    if (nonblank(mhrtostr[arrcnt])) then begin
      if (Accr.AccNumber>mhrtostr[arrcnt]) then begin
        mhrfoundf[arrcnt] = false;
      end;
    end;
  end;
  if (mhrvc[arrcnt]=="ObjVc") then begin
    if (mhrotflag[arrcnt]) then begin
      if (Objr.OTCode!=mhrfromstr[arrcnt]) then begin
        mhrfoundf[arrcnt] = false;
      end;
    end else begin
      if (nonblank(mhrfromstr[arrcnt])) then begin
        if (Objr.Code<mhrfromstr[arrcnt]) then begin
          mhrfoundf[arrcnt] = false;
        end;
      end;
      if (nonblank(mhrtostr[arrcnt])) then begin      
        if (Objr.Code>mhrtostr[arrcnt]) then begin
          mhrfoundf[arrcnt] = false;
        end;
      end;
    end;
  end;
  if (mhrfoundf[arrcnt]==false) then begin
    goto LMainLoopNext;
  end;
  if (mhrvc[arrcnt]=="AccVc") then begin
    if (Accr.GroupAcc!=0) then begin
      goto L22MainLoopNext;
    end;
  end;
  mhrheaderf[arrcnt] = false;
  res = true;
LMainLoopNext:;
  MainLoopNext = res;
  RETURN;
END;

global
procedure MainLoopAccp(Array string mhrckey,Array string mhrvc,Array LongInt mhrLLoop,record AccVc resAccrp)
BEGIN
  record AccVc Accr;
  Boolean TrHs;  
    
  RecordCopy(resAccrp,Accr);
  if (mhrvc[0]=="AccVc") then begin
    SetLoopPosition(Accr,mhrLLoop[0]-1);
    TrHs = true;
    if (LoopKey(mhrckey[0],Accr,1,TrHs)) then begin
      if (TrHs) then begin
        RecordCopy(resAccrp,Accr);
      end;
    end;
    goto LMainLoopAccp;
  end;
  if (mhrvc[1]=="AccVc") then begin
    SetLoopPosition(Accr,mhrLLoop[1]-1);
    TrHs = true;
    if (LoopKey(mhrckey[1],Accr,1,TrHs)) then begin
      if (TrHs) then begin
        RecordCopy(resAccrp,Accr);
      end;
    end;
    goto LMainLoopAccp;
  end;
  if (mhrvc[2]=="AccVc") then begin
    SetLoopPosition(Accr,mhrLLoop[2]-1);
    TrHs = true;
    if (LoopKey(mhrckey[2],Accr,1,TrHs)) then begin
      if (TrHs) then begin
        RecordCopy(resAccrp,Accr);
      end;
    end;
    goto LMainLoopAccp;
  end;
LMainLoopAccp:;
  RETURN;
END;

function 
Boolean AccBlockedTest(record AccessVc Accessp,string accnr)
begin
  Boolean resa;
  
  if (AccInRange(accnr,Accessp.BlockAccs)) then begin
    resa = true;
  end;
  AccBlockedTest = resa;
  return;
end;

global
function Boolean CurUserAccBlockedTest(string accnr)
BEGIN
  Boolean resb;
  record UserVc Userr;
  record AccessVc Accessr;
  
  Userr.Code = CurrentUser;
  if (ReadFirstMain(Userr,1,true)) then begin
    Accessr.Code = Userr.AccessGroup;
    if (ReadFirstMain(Accessr,1,true)) then begin
      if (AccBlockedTest(Accessr,accnr)) then begin
        resb = true;
      end;
    end;
  end else begin
  end;  
  CurUserAccBlockedTest = resb;
  RETURN;
END;

procedure PrintVATCodesSubtotals(record SMVc VATSumr)
BEGIN
  val totdeb,totcred;
  string 255 tstr;
  Integer j,rwcnt;
  Integer i,vatrows;
  row SMVc VATSumrw;
  record VATCodeBlock VATCodeRec;
  row VATCodeBlock VATCoderw;
  
  vatrows = MatRowCnt(VATSumr);
  BlockLoad(VATCodeRec);
  rwcnt = MatRowCnt(VATCodeRec);
  StartFormat(15);
  EndFormat;
  StartFormat(15);
  OutString(60,0,USetStr(3198),false);
  OutString(3,0,USetStr(3187),true);
  OutString(4,0,USetStr(3188),true);
  EndFormat;
  Gray_Divider(100,4);
  for (i=0;i<vatrows;i=i+1) begin
    MatRowGet(VATSumr,i,VATSumrw);
    for (j=0;j<rwcnt;j=j+1) begin
      MatRowGet(VATCodeRec,j,VATCoderw);
      if (VATSumrw.VATCode==VATCoderw.VATCode) then begin
        tstr = VATCoderw.Comment;
      end;
    end;
    StartFormat(15);
    OutString(60,0,VATSumrw.VATCode,false);
    OutString(90,0,tstr,false);
    OutVal(3,0,VATSumrw.DebVal,M4Val,true);
    OutVal(4,0,VATSumrw.CredVal,M4Val,true);
    EndFormat;
    totdeb = totdeb + VATSumrw.DebVal;
    totcred = totcred + VATSumrw.CredVal;
  end;
  Gray_Divider(100,4);
  StartFormat(15);
  OutVal(3,0,totdeb,M4Val,true);
  OutVal(4,0,totcred,M4Val,true);
  EndFormat;
  RETURN;      
END;

procedure MainInnerLoop(record RcVc RepSpec,Boolean showbasecurf,record SMVc VATSump,var Boolean FirstTrans,var val CurBal,Date AccumStartDate,
                        Boolean resUseAccum,var val TotSumDebet,var val TotSumCredit,var val TotSumDebetCur,var val TotSumCreditCur,
                        var Boolean headeroutf,Array Boolean mhractivef,Array Boolean mhrfoundf,Array LongInt mhrLLoop,
                        Array Boolean mhrfirstf,Array Boolean mhrheaderf,Array Boolean mhrotflag,
                        Array string mhrfromstr,Array string mhrtostr,Array string mhrckey,Array string mhrvc,Boolean printf,var val TotSumFwBal,var val TotSumBal,
                        var LongInt TotTransCnt)
BEGIN
  val v;
  val MainIS,MainOS,NetChange,tmpMainOS;
  LongInt MainCnt,tmpMainCnt;
  record MainVc mainr;
  record ObjBalVc ObjBalr;
  record TRVc MR3;
  record FBVc FBr;
  record RegArchiveDetailVc RADr;
  record SMVc SMr;
  record CYBlock CompYear;
  record AccVc Accr;
  Boolean TrHs,testf;
  Integer OldTransMonth;
  val SumDebet,SumCredit;
  val SumDebetCER,SumCreditCER,CurBalCER;
  val tmp;
  string 255 tstr,balostr,index;
  Integer curcnt;
  array val av1;
  array val av2;
  array val av3;
  array string 20 acur;
  record BaseCurBlock BCb;
  record SMVc VATSumr;
  val cerfr,certo1,certo2,cerbr1,cerbr2;
  
  MainCnt = 0;
  MainLoopAccp(mhrckey,mhrvc,mhrLLoop,Accr);
  headeroutf = false;
  BlockLoad(CompYear);  
  BlockLoad(BCb);  
  testf = true;
  if (CurUserAccBlockedTest(Accr.AccNumber)) then begin
    testf = false;
  end;
  if (testf) then begin  
    if (RepSpec.flags[12]==kReportBCOneConsolidationRate) then begin
      GetConsolidationRate(Accr.AccNumber,BCb.BaseCur1,RepSpec.sEndDate,cerfr,certo1,certo2,cerbr1,cerbr2);
    end;
    FirstTrans = true;
//    glRepp->AccOut = false;
    balostr = RepSpec.ObjStr;
/*
    if (CountObjects(balostr)==1) then begin
      if (RepSpec.flags[21]!=0) and (RepSpec.flags[22]==0) then begin
        balostr = balostr & ";;;";
      end;
      if (RepSpec.flags[21]==0) and (RepSpec.flags[22]!=0) then begin
        balostr = balostr & ";;;";
      end;
    end;
*/
    FindNLAccBal(Accr.AccNumber,balostr,RepSpec.ObjType,Accr.AccType,AccumStartDate,RepSpec.sStartDate,
                 RepSpec.SimVerf,RepSpec.basecurncy,resUseAccum,RepSpec.CurncyCode,RepSpec.IncDaughter,RepSpec.f3,"",CurBal);

    if (CurBal!=0) then begin
      PrintMainHeaders(RepSpec,headeroutf,mhrheaderf,mhrvc,mhrckey,mhrLLoop,printf);
      if (RepSpec.IncDaughter!=0) then begin
        if (FirstTrans) then begin
          HForm(RepSpec,Accr,CurBal,TotSumDebetCur,TotSumCreditCur,printf);
          FirstTrans = false;
        end;
      end;
      if (RepSpec.flags[12]==kReportBCOneConsolidationRate) then begin
        MulM4OneRate(CurBal,(certo1/cerfr)*100,CurBalCER,DefaultCurRoundOff,true);
        TotSumFwBal = TotSumFwBal + CurBalCER;
      end else begin
        if (RepSpec.ArtMode==0) then begin
          TotSumFwBal = TotSumFwBal + CurBal;
        end;
      end;
    end;

    if (CurBal==0) and (RepSpec.IncDaughter!=0) then begin
      PrintMainHeaders(RepSpec,headeroutf,mhrheaderf,mhrvc,mhrckey,mhrLLoop,printf);
      if (FirstTrans) then begin
        HForm(RepSpec,Accr,CurBal,TotSumDebetCur,TotSumCreditCur,printf);
        FirstTrans = false;
      end;
    end;

    TotSumDebetCur = blankval;
    TotSumCreditCur = blankval;
    if (nonblank(Accr.Curncy)) then begin
      FindNLAccBal(Accr.AccNumber,RepSpec.ObjStr,RepSpec.ObjType,Accr.AccType,AccumStartDate,RepSpec.sStartDate,
                   RepSpec.SimVerf,RepSpec.basecurncy,resUseAccum,Accr.Curncy,RepSpec.IncDaughter,RepSpec.f3,"",v);

      if (v>0) then begin
        TotSumDebetCur = v;
      end else begin
        TotSumCreditCur = v;
      end;
    end;
    if (RepSpec.flags[12]==kReportBCOneConsolidationRate) then begin
      MainIS = CurBalCER;
      MainOS = CurBalCER;
    end else begin
      MainIS = CurBal;
      MainOS = CurBal;
    end;
    if (Accr.AccType==0) then begin
      if (CompYear.NS1[0]==1) then begin
        MainOS = -MainOS;
        MainIS = -MainIS;
      end;
    end;
    if (Accr.AccType==1) then begin
      if (CompYear.NS1[1]==1) then begin
        MainOS = -MainOS;
        MainIS = -MainIS;
        TotSumCreditCur = -TotSumCreditCur;
        TotSumDebetCur = -TotSumDebetCur;
      end;
    end;
    if (Accr.AccType==2) then begin
      if (CompYear.NS1[2]==1) then begin
        MainOS = -MainOS;
        MainIS = -MainIS;
      end;
    end;
    if (Accr.AccType==3) then begin
      if (CompYear.NS1[3]==1) then begin
        MainOS = -MainOS;
        MainIS = -MainIS;
      end;
    end;
    if (Accr.AccType==4) then begin
      if (CompYear.NS1[4]==1) then begin
        MainOS = -MainOS;
        MainIS = -MainIS;
      end;
    end;      
  end;
  if (testf) then begin
    if (RepSpec.ArtMode==0) then begin
      SumDebet = blankval;
      SumCredit = blankval;
    end else begin
      SumDebet = 0;
      SumCredit = 0;
    end;
    OldTransMonth = 0;
//##    if (RepSpec.UsedOnly==0) then MainLAccOut(accp); //##
    BeginCurncyTotals(curcnt);
    AddCurncyTotals(acur,av1,curcnt,Accr.Curncy,TotSumDebetCur+TotSumCreditCur);
    TrHs = true;
    mainr.AccNumber = Accr.AccNumber;
    mainr.TransDate = RepSpec.sStartDate;
    index = "MainKey";
    if (RepSpec.flags[28]!=0) then begin
      index = "MainKeyTime";
    end;
    while (LoopKey(index,mainr,2,TrHs)) begin    
      if (TrHs) then begin
        if (mainr.TransDate>RepSpec.sEndDate) then begin
          TrHs = false;
        end;
          //&& monbalcheck!!
      end;
      if (TrHs) then begin
        if (mainr.AccNumber!=Accr.AccNumber) then begin
          TrHs = false;
        end;
          //&& monbalcheck!!
      end;      
      if (TrHs) then begin
        if (mainr.FileName=="TRVc") then begin
          MR3.Number = mainr.TransNr;
          MR3.IntYc = mainr.IntYc;
          if (ReadFirstMain(MR3,2,true)) then begin
              // if date has been changed 
            testf = true;
            if (nonblank(RepSpec.LastAcc)) then begin
              if (MR3.RefStr!=RepSpec.LastAcc) then begin testf = false; end;
            end;
            switch (RepSpec.flags[26]) begin
              case 1: if (MR3.SeqNr>0) then begin testf = false; end;
              case 2: if (MR3.SeqNr<=0) then begin testf = false; end;
            end;
            if (testf) then begin
              tmpMainOS = blankval;
              tmpMainCnt = MainCnt;
              if (mainr.TransDate==MR3.TransDate) then begin
                ReadTrRow(RepSpec,MR3,BCb,RepSpec.ObjStr,OldTransMonth,tmpMainOS,
                          VATSumr,RepSpec.basecurncy,RepSpec.CurncyCode,FirstTrans,
                          CurBal,TotSumDebetCur,TotSumCreditCur,SumDebet,SumCredit,MainCnt,
                          headeroutf,mhrheaderf,mhrvc,mhrckey,mhrLLoop,Accr,printf,
                          acur,av1,av2,av3,curcnt);
                if (tmpMainCnt!=MainCnt) then begin
                  if (RepSpec.ArtMode==0) or (blank(RepSpec.ObjStr)) or (RepSpec.ArtMode!=0 and nonblank(RepSpec.ObjStr)) then begin
                    MainOS = tmpMainOS;
                  end else begin
                    MainOS = MainOS + tmpMainOS;
                  end;
                end;              
              end else begin
                if (RepSpec.flags[1]!=0) then begin
                  ReadTrR2(RepSpec,MR3,BCb,RepSpec.ObjStr,mainr.TransDate,OldTransMonth,
                           MainOS,VATSumr,RepSpec.basecurncy,RepSpec.CurncyCode,
                           FirstTrans,CurBal,TotSumDebetCur,TotSumCreditCur,SumDebet,SumCredit,MainCnt,
                           headeroutf,mhrheaderf,mhrvc,mhrckey,mhrLLoop,Accr,printf,
                           acur,av1,av2,av3,curcnt);
                end;
              end;
            end;
          end;
        end;
        if (mainr.FileName=="SMVc") then begin
            if (RepSpec.SimVerf!=0) then begin
              SMr.SerNr = mainr.TransNr;
              if (ReadFirstMain(SMr,1,true)) then begin
                testf = true;
                if (nonblank(RepSpec.LastAcc)) then begin
                  if (SMr.RefStr!=RepSpec.LastAcc) then begin testf = false; end;
                end;
                if (testf) then begin
                  tmpMainOS = blankval;
                  tmpMainCnt = MainCnt;
//                if (DateComp(&mainr.TransDate,&SMr.TransDate)==0) then begin
                   ReadSMRow(RepSpec,SMr,RepSpec.ObjStr,mainr.TransDate,OldTransMonth,tmpMainOS,
                             VATSumr,RepSpec.basecurncy,RepSpec.SimVerf,FirstTrans,
                             CurBal,TotSumDebetCur,TotSumCreditCur,SumDebet,SumCredit,MainCnt,
                             headeroutf,mhrheaderf,mhrvc,mhrckey,mhrLLoop,Accr,printf,
                             acur,av1,av2,av3,curcnt);
//                end;
                  if (RepSpec.flags[12]==kReportBCOneConsolidationRate) then begin
                    MulM4OneRate(tmpMainOS,(certo1/cerfr)*100,tmpMainOS,DefaultCurRoundOff,true);
                    MainOS = MainOS + tmpMainOS;
                  end else begin
                    if (tmpMainCnt!=MainCnt) then begin
                      MainOS = tmpMainOS;
                    end;
                  end;

                end;
              end;
            end;
        end;
        if (mainr.FileName=="FBVc") then begin
            FBr.SerNr = mainr.TransNr;
            if (ReadFirstMain(FBr,1,true)) then begin
              if (mainr.TransDate==FBr.TransDate) then begin
                if ((blank(RepSpec.ObjStr) and blank(FBr.Objects))) or 
                   ((nonblank(RepSpec.ObjStr) and SetInSet(RepSpec.ObjStr,FBr.Objects) and SetInSet(FBr.Objects,RepSpec.ObjStr))) then begin
                  tmpMainOS = blankval;
                  tmpMainCnt = MainCnt;
                  ReadFBRow(RepSpec,FBr,RepSpec.ObjStr,OldTransMonth,tmpMainOS,
                            VATSumr,RepSpec.basecurncy,RepSpec.CurncyCode,FirstTrans,
                            CurBal,TotSumDebetCur,TotSumCreditCur,SumDebet,SumCredit,MainCnt,
                            headeroutf,mhrheaderf,mhrvc,mhrckey,mhrLLoop,Accr,printf,
                           acur,av1,av2,av3,curcnt);
                  if (RepSpec.flags[12]==kReportBCOneConsolidationRate) then begin
                    MulM4OneRate(tmpMainOS,(certo1/cerfr)*100,tmpMainOS,DefaultCurRoundOff,true);
                    MainOS = MainOS + tmpMainOS;
                  end else begin
                    if (tmpMainCnt!=MainCnt) then begin
                      MainOS = tmpMainOS;
                    end;
                  end;
                end;
              end;
            end;
        end;
        if (mainr.FileName=="RegArchiveDetailVc") then begin
            RADr.SerNr = mainr.TransNr;
            if (ReadFirstMain(RADr,1,true)) then begin
              if (mainr.TransDate==RADr.TransDate) then begin
                tmpMainOS = blankval;
                tmpMainCnt = MainCnt;
                ReadRADRecord(RepSpec,RADr,RepSpec.ObjStr,OldTransMonth,tmpMainOS,
                          VATSumr,RepSpec.basecurncy,RepSpec.CurncyCode,FirstTrans,
                          CurBal,TotSumDebetCur,TotSumCreditCur,SumDebet,SumCredit,
                          headeroutf,mhrheaderf,mhrvc,mhrckey,mhrLLoop,Accr,printf,
                          acur,av1,av2,av3,curcnt);
                if (RepSpec.flags[12]==kReportBCOneConsolidationRate) then begin
                  MulM4OneRate(tmpMainOS,(certo1/cerfr)*100,tmpMainOS,DefaultCurRoundOff,true);
                  MainOS = MainOS + tmpMainOS;
                end else begin
                  if (tmpMainCnt!=MainCnt) then begin
                    MainOS = tmpMainOS;
                  end;
                end;
              end;
            end;
        end;
      end;
    end;
    if (RepSpec.flags[12]==kReportBCOneConsolidationRate) then begin
      MainOS = MainOS - CurBalCER;//??
    end;
    if ((headeroutf) or (RepSpec.UsedOnly==0)) then begin
      if (ProgramType==typHansaRaama) then begin          
        if (Accr.AccType==0) then begin
          if (CompYear.NS1[0]==1) then begin
            MainIS = -MainIS;
          end;
        end;
        if (Accr.AccType==1) then begin
          if (CompYear.NS1[1]==1) then begin
            MainIS = -MainIS;
          end;
        end;
        if (Accr.AccType==2) then begin
          if (CompYear.NS1[2]==1) then begin
            MainIS = -MainIS;
          end;
        end;
        if (Accr.AccType==3) then begin
          if (CompYear.NS1[3]==1) then begin
            MainIS = -MainIS;
          end;
        end;
        if (Accr.AccType==4) then begin
          if (CompYear.NS1[4]==1) then begin
            MainIS = -MainIS;
          end;
        end;  
      end;
    if (printf) then begin
      StartFooter(45,true);
        Black_Divider(0,1);
        OutString(200,0,USetStr(2412),false)
        OutAccumulator(380,4,M4Val,true);
        OutAccumulator(5,5,M4Val,true);
        OutString(200,0,USetStr(2413),false)
        OutAccumulator(380,0,M4Val,true);
        OutAccumulator(5,1,M4Val,true);
        ClearAccumulator(0);
        ClearAccumulator(1);
        OutString(200,0,USetStr(2414),false)
        OutAccumulator(380,2,M4Val,true);
        OutAccumulator(5,3,M4Val,true);
        CopyAccumulator(4,2);
        CopyAccumulator(5,3);
      EndFooter;    
    end;

      TotSumDebet = TotSumDebet + SumDebet;
      TotSumCredit = TotSumCredit + SumCredit;
      NetChange = SumDebet + SumCredit;
      if (RepSpec.ArtMode==0) then begin
        if (headeroutf==false) then begin
          PrintMainHeaders(RepSpec,headeroutf,mhrheaderf,mhrvc,mhrckey,mhrLLoop,printf);
        end;
        tmp = -SumCredit;
        if (printf) then begin
          Black_Divider(9,1);
          StartFormat(15);
          if (showbasecurf) then begin
            if (RepSpec.flags[12]==kReportBCOneConsolidationRate) then begin
              OutString(6,0,USetStr(3192) & " (" & BCb.BaseCur2 & ")",false);
            end else begin
              OutString(6,0,USetStr(3192) & " (" & BCb.BaseCur1 & ")",false);
            end;
          end else begin
            OutString(6,0,USetStr(3192),false);
          end;
          if (RepSpec.Media==mtFile) or (RepSpec.Media==mtExcel) then begin
            OutString(0,0,"",false);
            OutString(0,0,"",false);
          end;
          OutValBiDi(3,0,SumDebet,M4Val,true,364);
          OutValBiDi(4,0,tmp,M4Val,true,434);
          EndFormat;
          if (RepSpec.flags[23]!=0) then begin
            StartFormat(15);
            OutString(6,0,USetStr(3192),false);
            OutLongInt(3,0,RepSpec.long1,true);
            OutLongInt(4,0,RepSpec.long2,true);
            EndFormat;
          end;            
          StartFormat(5);
          EndFormat;
        end;
      end else begin
        tmp = -SumCredit;
        if (printf) then begin
          StartFormat(15);
          OutString(0,0,Accr.AccNumber,false);
          tstr = Accr.Comment;
          GetAccountDescription2(Accr.AccNumber,RepSpec.Language,tstr);        
          OutString(50,0,tstr,false);
          OutValBiDi(240,0,MainIS,M4Val,true,280);
          OutValBiDi(3,0,SumDebet,M4Val,true,360);
          OutValBiDi(4,0,tmp,M4Val,true,440);
          OutValBiDi(1,0,MainOS,M4Val,true,510);
          TotSumFwBal = TotSumFwBal + MainIS;
          TotSumBal = TotSumBal + MainOS;
          EndFormat;
        end;
        MainOS = 0;
      end;
      if (ProgramType!=typHansaRaama) then begin
/*    I think it has been negeted already  
        if (Accr.AccType==0) then begin
          if (CompYear.NS1[0]==1) then begin
            MainIS = -MainIS;
          end;
        end;
        if (Accr.AccType==1) then begin
          if (CompYear.NS1[1]==1) then begin
            MainIS = -MainIS;
          end;
        end;
        if (Accr.AccType==2) then begin
          if (CompYear.NS1[2]==1) then begin
            MainIS = -MainIS;
          end;
        end;
        if (Accr.AccType==3) then begin
          if (CompYear.NS1[3]==1) then begin
            MainIS = -MainIS;
          end;
        end;
        if (Accr.AccType==4) then begin
          if (CompYear.NS1[4]==1) then begin
            MainIS = -MainIS;
          end;
        end;  
*/        
      end;
      if (RepSpec.ArtMode==0) then begin
        if (printf) then begin
          StartFormat(15);
          if (showbasecurf) then begin
            if (RepSpec.flags[12]==kReportBCOneConsolidationRate) then begin
              GetConsolidationRate(Accr.AccNumber,BCb.BaseCur1,RepSpec.sEndDate,cerfr,certo1,certo2,cerbr1,cerbr2);
              GetFullCurncyRateText(true,tstr,cerfr,certo1,certo2,cerbr1,cerbr2);
              if (blank(tstr)) then begin
                OutString(20,0,BCb.BaseCur1 & " (" & "1:1" & ") ",false);
              end else begin
                OutString(20,0,BCb.BaseCur1 & " (" & tstr & ") ",false);
              end;
            end else begin
              OutString(20,0,BCb.BaseCur1,false);
            end;
            OutString(6,0,USetStr(3193),false);
          end else begin
            OutString(6,0,USetStr(3193),false);
          end;
          OutValBiDi(5,0,MainIS,M4Val,true,505);
          EndFormat;
          StartFormat(15);
          OutString(6,0,USetStr(3194),false);
          NetChange = Round(NetChange,DefaultRoundMode);
          OutValBiDi(3,0,NetChange,M4DVal,true,364);
          OutValBiDi(4,0,NetChange,M4CVal,true,434);
          EndFormat;
          StartFormat(15);
          OutString(20,0,USetStr(3205) & ":",false);
          OutLongInt(100,0,MainCnt,false);
          OutString(6,0,USetStr(3195),false);
          OutValBiDi(5,0,MainOS,M4Val,true,505);
          EndFormat;
          TotTransCnt = TotTransCnt + MainCnt;
        end;
        if (RepSpec.flags[8]!=0) then begin          
          tmp = TotSumDebetCur + TotSumCreditCur;
/*          
I think it was done in MainTool2.hal, line 374
          if (Accr.AccType==0) then begin
            if (CompYear.NS1[0]==1) then begin
              tmp = -tmp;
            end;
          end;
          if (Accr.AccType==1) then begin
            if (CompYear.NS1[1]==1) then begin
              tmp = -tmp;
            end;
          end;
          if (Accr.AccType==2) then begin
            if (CompYear.NS1[2]==1) then begin
              tmp = -tmp;
            end;
          end;
          if (Accr.AccType==3) then begin
            if (CompYear.NS1[3]==1) then begin
               tmp = -tmp;
            end;
          end;
          if (Accr.AccType==4) then begin
            if (CompYear.NS1[4]==1) then begin
              tmp = -tmp;
            end;
          end;  
*/          
          if (printf) then begin
            StartFormat(15);
            OutString(6,0,USetStr(6650),false);
//            OutVal(5,0,tmp,M4Val,true);
            EndFormat;
            PrintCurncyTotals(acur,av1,av2,av3,curcnt,5,-1,-1,320,false,RepSpec.PocketPC);
          end;
          TotSumDebetCur = blankval;
          TotSumCreditCur = blankval;
        end;
        if (printf) then begin
          if (RepSpec.flags[27]!=0) then begin
            if (MatRowCnt(VATSumr)>0) then begin
              PrintVATCodesSubtotals(VATSumr);
            end;
          end;
          Gray_Divider(0,1);
          StartFormat(15);
          EndFormat;
        end;
      end;
    end;
  end;
  AddVATSumToVATSum(VATSumr,VATSump);
  RETURN;
END;

procedure MainListTopHdrs(record RcVc RepSpec,Boolean resUseAccum,Date AccumStartDate)
BEGIN
  string 255 tstr;
  Integer rw;
  record BaseCurBlock BC;
  
  BlockLoad(BC);
      
  rw = 1;
  HTAccs(RepSpec.f4,RepSpec.f4,RepSpec.UsedOnly,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  LstRegDat(tstr);
  Header(rw,tstr,0);
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  
  if (HasMultiCurrency) then begin
    tstr = USetStr(2513);
    if (blank(RepSpec.CurncyCode)) then begin
      BlockLoad(BC);
      if (repspec.basecurncy==0) then begin
        tstr = tstr & BC.BaseCur1;
      end;
      if (repspec.basecurncy==1) then begin
        tstr = tstr & " " & BC.BaseCur2;
      end;
    end else begin
      tstr = tstr & " " & RepSpec.CurncyCode;
    end;
    Header(rw,tstr,0);
  end;

  if (resUseAccum) then begin
    HTAccPer(AccumStartDate,RepSpec.sEndDate,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.ObjStr)) then begin
    HTObj(RepSpec.ObjStr,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.ObjType)) then begin
    HTOT(RepSpec.ObjType,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.Stext)) then begin
    tstr = USetStr(3018);
    tstr = tstr & RepSpec.Stext;
    tstr = tstr & "\"";
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  HTVatNr(RepSpec.f1,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (RepSpec.SimVerf==1) then begin
    tstr = USetStr(3019);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (RepSpec.flags[1]!=0) then begin
    tstr = USetStr(3197);
    Header(rw,tstr,1);
    rw = rw + 1;
  end else begin
    if (GetVATLaw==15) then begin//vatIcelandic
      tstr = USetStr(3199);
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (DatePrel(RepSpec.sEndDate)) begin
    tstr = USetStr(3023);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.CurncyCode)) then begin
    tstr = USetStr(7672);
    tstr = tstr & ": ";
    tstr = tstr & RepSpec.CurncyCode;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;  
  if (IsBooks==false) then begin
    if (RepSpec.flags[21]!=0) then begin
      tstr = USetStr(6930);
      Header(rw,tstr,1);
      rw = rw + 1;
    end;  
    if (RepSpec.flags[22]!=0) then begin
      tstr = USetStr(1329);
      Header(rw,tstr,1);
      rw = rw + 1;
    end;          
  end;
  if (nonblank(RepSpec.f3)) then begin
    tstr = USetStr(1318) & " " & RepSpec.f3;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  EndHeader;  
  SetRepCol(2,75);
  if (RepSpec.ArtMode==1) then begin
    SetRepCol(3,320);//288);
    SetRepCol(4,400);//384);
  end else begin
    SetRepCol(3,314);
    SetRepCol(4,384);
  end;
  SetRepCol(5,465);
  SetRepCol(8,413);
  SetRepCol(9,221);
  if (RepSpec.flags[6]==1) then begin
    SetRepCol(6,190);
  end else begin
    SetRepCol(6,160);
  end;
  if ((nonblank(RepSpec.ObjType)) or (RepSpec.flags[3]!=0)) then begin
    SetRepCol(6,200);
  end;
  SetRepCol(7,120);
  RETURN;      
END;

procedure MainLoopInit(record RcVc RepSpec,Integer lnr,
                       Array string mhrvc,Array string mhrfromstr,Array string mhrtostr,
                       Array Boolean mhractivef,Array Boolean mhrotflag,Integer arrcnt,
                       string specstr)
BEGIN
  Boolean accs;
  record OTVc OTr;
  string 20 fromstr,tostr;
  
  if (RepSpec.flags[11]==lnr) then begin
    accs = true;
    mhrvc[arrcnt] = "AccVc";
  end else begin
    mhrvc[arrcnt] = "ObjVc";
  end;
  mhrfromstr[arrcnt] = FirstInRange(specstr,20);
  mhrtostr[arrcnt] = LastInRange(specstr,20);
  mhractivef[arrcnt] = true;
  if (accs==false) then begin
    mhrotflag[arrcnt] = false;
    if (blank(specstr)) then begin
      mhractivef[arrcnt] = false;
    end else begin
      OTr.Code = specstr;
      if (ReadFirstMain(OTr,1,true)) then begin
        mhrotflag[arrcnt] = true;
      end;
    end;
  end;
  RETURN;
END;

procedure MainLoopStart(Array Boolean mhractivef,Array Boolean mhrfirstf,Array Boolean mhrfoundf,
                        Array Boolean mhrotflag,Array LongInt mhrLLoop,
                        Array string mhrvc,Array string mhrckey,Array string mhrfromstr,Integer arrcnt)
BEGIN
  record ObjVc Objr;
  record AccVc Accr;
  
  if (mhractivef[arrcnt]==false) then begin 
    goto LMainLoopStart; 
  end;
  mhrfirstf[arrcnt] = true;
  if (mhrvc[arrcnt]=="AccVc") then begin
    mhrckey[arrcnt] = "AccNumber";
    Accr.AccNumber = mhrfromstr[arrcnt];
    mhrfoundf[arrcnt] = LoopKey("AccNumber",Accr,1,true);//mlp->foundf = m4_ReadFirstLMain(AccVc,Accp,1,false,&mlp->LLoop);
    mhrLLoop[arrcnt] = GetLoopPosition(Accr);
  end;
  if (mhrvc[arrcnt]=="ObjVc") then begin
    if (mhrotflag[arrcnt]) then begin
      mhrckey[arrcnt] = "OTCode";
      Objr.OTCode = mhrfromstr[arrcnt];
      mhrfoundf[arrcnt] = LoopKey("OTCode",Objr,1,true);//mlp->foundf = m4_ReadFirstLCKey(ObjVc,mlp->ckey,Objp,1,false,&mlp->LLoop);
      mhrLLoop[arrcnt] = GetLoopPosition(Objr);
    end else begin
      mhrckey[arrcnt] = "Code";
      Objr.Code = mhrfromstr[arrcnt];
      mhrfoundf[arrcnt] = LoopKey("Code",Objr,1,true);//mlp->foundf = m4_ReadFirstLCKey(ObjVc,mlp->ckey,Objp,1,false,&mlp->LLoop);
      mhrLLoop[arrcnt] = GetLoopPosition(Objr);
    end;
  end;
LMainLoopStart:;
  RETURN;
END;

procedure MainLoopAddObj(var record RcVc RepSpec,Array Boolean mhractivef,Array Boolean mhrfoundf,
                         Array string mhrvc,Array string mhrckey,Array LongInt mhrLLoop,Integer arrcnt)
BEGIN
  record ObjVc Objr;
 
  if (mhractivef[arrcnt]==false) then begin
    goto LMainLoopAddObj;
  end;
  if (mhrvc[arrcnt]=="AccVc") then begin
    goto LMainLoopAddObj;
  end;
  if (mhrfoundf[arrcnt]==false) then begin
    goto LMainLoopAddObj;
  end;
  if (nonblank(RepSpec.ObjStr)) then begin
    RepSpec.ObjStr = RepSpec.ObjStr & ",";
  end;
  
  SetLoopPosition(Objr,mhrLLoop[arrcnt]-1);
  if (LoopKey(mhrckey[arrcnt],Objr,1,true)) then begin
    RepSpec.ObjStr = RepSpec.ObjStr & Objr.Code;
  end;  
LMainLoopAddObj:;
  RETURN;
END;

procedure MainLoopAddObjs(var record RcVc RepSpec,Array Boolean mhractivef,Array Boolean mhrfoundf,
                          Array string mhrvc,Array string mhrckey,Array LongInt mhrLLoop,Integer arrcnt,string orgobjstr)
BEGIN
  RepSpec.ObjStr = orgobjstr;
  MainLoopAddObj(RepSpec,mhractivef,mhrfoundf,mhrvc,mhrckey,mhrLLoop,0);//MainLoopAddObj(&mhp->mlr[0]);
  MainLoopAddObj(RepSpec,mhractivef,mhrfoundf,mhrvc,mhrckey,mhrLLoop,1);//MainLoopAddObj(&mhp->mlr[1]);
  MainLoopAddObj(RepSpec,mhractivef,mhrfoundf,mhrvc,mhrckey,mhrLLoop,2);//MainLoopAddObj(&mhp->mlr[2]);
  RETURN;
END;

global
procedure RunMainRn(var record RcVc RepSpec,Boolean showbasecurf,Date AccumStartDate,var Boolean resUseAccum,var val TotSumDebet,var val TotSumCredit,record SMVc VATSumr,Boolean printf,var val totsumFwBal,var val TotSumBal,var LongInt TotTransCnt)
BEGIN
  Integer i;
  string 60 objtype;
  string 255 orgobjstr;
  Boolean FirstTrans;
  val TotSumDebetCur,TotSumCreditCur;
  val CurBal;
  Integer arrcnt;
  Boolean headeroutf,found;
  Array Boolean mhractivef;
  Array string 20 mhrfromstr;
  Array string 20 mhrtostr;
  Array string 60 mhrckey;
  Array string 20 mhrvc;
  Array Boolean mhrfoundf;
  Array LongInt mhrLLoop;
  Array Boolean mhrfirstf;
  Array Boolean mhrheaderf;
  Array Boolean mhrotflag;
  record AccVc Accr;
    
  RepSpec.long1 = 0;
  RepSpec.long2 = 0;  
  objtype = "";
  
  TotSumDebet = blankval;
  TotSumCredit = blankval;
  TotSumDebetCur = blankval;
  TotSumCreditCur = blankval;
  TotTransCnt = 0;

  totsumFwBal = blankval;
  TotSumBal = blankval;


//+++++++++++++++++
  orgobjstr = RepSpec.ObjStr;
  MainLoopInit(RepSpec,0,mhrvc,mhrfromstr,mhrtostr,mhractivef,mhrotflag,0,RepSpec.f4);//MainLoopInit(0,&mhr.mlr[0],RepSpec.f4);
  MainLoopInit(RepSpec,1,mhrvc,mhrfromstr,mhrtostr,mhractivef,mhrotflag,1,RepSpec.f5);//MainLoopInit(1,&mhr.mlr[1],RepSpec.f5);
  MainLoopInit(RepSpec,2,mhrvc,mhrfromstr,mhrtostr,mhractivef,mhrotflag,2,RepSpec.f6);//MainLoopInit(2,&mhr.mlr[2],RepSpec.f6);

  MainLoopStart(mhractivef,mhrfirstf,mhrfoundf,mhrotflag,mhrLLoop,mhrvc,mhrckey,mhrfromstr,0);//MainLoopStart(&mhr.mlr[0]);
L22MainRn:;
  if (MainLoopNext(mhractivef,mhrfoundf,mhrfirstf,mhrheaderf,mhrotflag,mhrLLoop,mhrvc,mhrckey,mhrfromstr,mhrtostr,0)==false) then begin
    goto L88MainRn;
  end;
  found = true;

  if (mhractivef[1]) then begin
    MainLoopStart(mhractivef,mhrfirstf,mhrfoundf,mhrotflag,mhrLLoop,mhrvc,mhrckey,mhrfromstr,1);//MainLoopStart(&mhr.mlr[1]);
L33MainRn:;
    if (MainLoopNext(mhractivef,mhrfoundf,mhrfirstf,mhrheaderf,mhrotflag,mhrLLoop,mhrvc,mhrckey,mhrfromstr,mhrtostr,1)==false) then begin
      goto L22MainRn;
    end;
  end;
  if (mhractivef[2]) then begin
    MainLoopStart(mhractivef,mhrfirstf,mhrfoundf,mhrotflag,mhrLLoop,mhrvc,mhrckey,mhrfromstr,2);//MainLoopStart(&mhr.mlr[2]);
L44MainRn:;
    if (MainLoopNext(mhractivef,mhrfoundf,mhrfirstf,mhrheaderf,mhrotflag,mhrLLoop,mhrvc,mhrckey,mhrfromstr,mhrtostr,2)==false) then begin
      goto L33MainRn;
    end;
  end;  
  MainLoopAddObjs(RepSpec,mhractivef,mhrfoundf,mhrvc,mhrckey,mhrLLoop,arrcnt,orgobjstr);//MainLoopAddObjs(&mhr,orgobjstr);

  MainInnerLoop(RepSpec,showbasecurf,VATSumr,FirstTrans,CurBal,AccumStartDate,resUseAccum,TotSumDebet,TotSumCredit,TotSumDebetCur,TotSumCreditCur,
                headeroutf,mhractivef,mhrfoundf,mhrLLoop,
                mhrfirstf,mhrheaderf,mhrotflag,mhrfromstr,mhrtostr,mhrckey,mhrvc,printf,totsumFwBal,TotSumBal,TotTransCnt);//MainInnerLoop(&VATSumh,&mhr);

  goto L44MainRn;
L88MainRn:;
  if (found==false) then begin   
    if (RepSpec.IncDaughter!=0) then begin
      headeroutf = false;
      MainLoopAccp(mhrckey,mhrvc,mhrLLoop,Accr);
      PrintMainHeaders(RepSpec,headeroutf,mhrheaderf,mhrvc,mhrckey,mhrLLoop,printf);
      HForm(RepSpec,Accr,CurBal,TotSumDebetCur,TotSumCreditCur,printf);
      if (printf) then begin
        Black_Divider(9,1);
        StartFormat(15);
        OutString(6,0,USetStr(3192),false);
        OutValBiDi(3,0,0.00,M4Val,true,364);
        OutValBiDi(4,0,0.00,M4Val,true,434);
        EndFormat;

        StartFormat(15);
        OutString(6,0,USetStr(3193),false);
        OutValBiDi(5,0,0.00,M4Val,true,505);
        EndFormat;
        StartFormat(15);
        OutString(6,0,USetStr(3194),false);
        OutValBiDi(3,0,0.00,M4DVal,true,364);
        OutValBiDi(4,0,0.00,M4CVal,true,434);
        EndFormat;
        StartFormat(15);
        OutString(20,0,USetStr(3205) & ":",false);
        OutLongInt(100,0,0,false);
        OutString(6,0,USetStr(3195),false);
        OutValBiDi(5,0,0.00,M4Val,true,505);
        EndFormat;
      end;
    end;
  end;

//++++++++++++++++++
  RETURN;
END;
                     
procedure RunMainRnForDaughterCompany(var record RcVc orgRepSpec,Date AccumStartDate,var Boolean resUseAccum,var val TotSumDebet,var val TotSumCredit,record SMVc VATSumr,Boolean printf,var val totsumFwBal,var val TotSumBal,var LongInt TotTransCnt)
begin  
  record DaughterCompBlock DCb;
  row DaughterCompBlock DCrw;
  Integer i,rwcnt;
  record RcVc RepSpec;
  record ConsolidationBlock cr;
  val lTotSumDebet,lTotSumCredit,lTotSumFwBal,lTotSumBal;
  LongInt lTotTransCnt;
  Integer olddaucomp;

  olddaucomp = CurrentCompany;
  BlockLoad(DCb);
  rwcnt = MatRowCnt(DCb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(DCb,i,DCrw);
    if (SetCompanyCode(DCrw.CompCode,false)) then begin
      BlockLoad(cr);

      StartFormat(15);
       OutString(0,0,DCrw.CompName,false);
      EndFormat;   
      RepSpec = orgRepSpec;
//      if (RepSpec.basecurncy!=kReportBCOneConsolidationRate) then begin
      if (RepSpec.flags[12]!=kReportBCOneConsolidationRate) then begin
        RepSpec.basecurncy = cr.ConsCrncy;  
      end;
      if (nonblankdate(DCrw.StartDate)) then begin 
        if (DCrw.StartDate>RepSpec.sStartDate) then begin
          RepSpec.sStartDate = DCrw.StartDate; 
        end;
      end;
      if (nonblankdate(DCrw.EndDate)) then begin 
        if (DCrw.EndDate>RepSpec.sEndDate) then begin
          RepSpec.sEndDate = DCrw.EndDate; 
        end;
      end;
      RunMainRn(RepSpec,true,AccumStartDate,resUseAccum,lTotSumDebet,lTotSumCredit,VATSumr,true,lTotSumFwBal,lTotSumBal,lTotTransCnt);
      TotSumDebet = TotSumDebet + lTotSumDebet;
      TotSumCredit = TotSumCredit + lTotSumCredit;
      TotSumFwBal = TotSumFwBal + lTotSumFwBal;
      TotSumBal = TotSumBal + lTotSumBal;
      TotTransCnt = TotTransCnt + lTotTransCnt;
      RunMainRnForDaughterCompany(orgRepSpec,AccumStartDate,resUseAccum,TotSumDebet,TotSumCredit,VATSumr,true,TotSumFwBal,TotSumBal,TotTransCnt);
    end;
  end;
  ResetCompany(olddaucomp);
  return;
end;

procedure RunMainRnPerCompany(var record RcVc orgRepSpec,Date AccumStartDate,var Boolean resUseAccum,var val TotSumDebet,var val TotSumCredit,record SMVc VATSumr,Boolean printf,var val totsumFwBal,var val TotSumBal,var LongInt TotTransCnt)
BEGIN
  record DaughterCompBlock DCb;
  row DaughterCompBlock DCrw;
  Integer i,rwcnt;
  Integer oldcomp;
  record RcVc RepSpec;
  record ConsolidationBlock cr;
  val lTotSumDebet,lTotSumCredit,lTotSumFwBal,lTotSumBal;
  LongInt lTotTransCnt;
  record CompaniesBlock Cb;
  row CompaniesBlock Cbrw;

  BlockLoad(Cb);
  rwcnt = MatRowCnt(Cb);
  for (i=0;i<rwcnt;i=i+1) begin
    if ((i+1)==CurrentCompany) then begin
      MatRowGet(Cb,i,Cbrw);
      i = rwcnt;
    end;
  end;

  StartFormat(15);
   OutString(0,0,Cbrw.CompName,false);
  EndFormat;   

  RepSpec = orgRepSpec;
  RepSpec.IncDaughter = 0;
  RunMainRn(RepSpec,true,AccumStartDate,resUseAccum,lTotSumDebet,lTotSumCredit,VATSumr,true,lTotSumFwBal,lTotSumBal,lTotTransCnt);
  TotSumDebet = TotSumDebet + lTotSumDebet;
  TotSumCredit = TotSumCredit + lTotSumCredit;
  TotSumFwBal = TotSumFwBal + lTotSumFwBal;
  TotSumBal = TotSumBal + lTotSumBal;
  TotTransCnt = TotTransCnt + lTotTransCnt;

  oldcomp = RepSpec.flags[29];  //flags[29] is set in DblNLFunc
  
  RunMainRnForDaughterCompany(orgRepSpec,AccumStartDate,resUseAccum,TotSumDebet,TotSumCredit,VATSumr,true,TotSumFwBal,TotSumBal,TotTransCnt);
  
/*  
  BlockLoad(DCb);
  rwcnt = MatRowCnt(DCb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(DCb,i,DCrw);
    if (SetCompanyCode(DCrw.CompCode,false)) then begin
      BlockLoad(cr);

      StartFormat(15);
       OutString(0,0,DCrw.CompName,false);
      EndFormat;   
      RepSpec = orgRepSpec;
      RepSpec.basecurncy = cr.ConsCrncy;  
      if (nonblankdate(DCrw.StartDate)) then begin 
        if (DCrw.StartDate>RepSpec.sStartDate) then begin
          RepSpec.sStartDate = DCrw.StartDate; 
        end;
      end;
      if (nonblankdate(DCrw.EndDate)) then begin 
        if (DCrw.EndDate>RepSpec.sEndDate) then begin
          RepSpec.sEndDate = DCrw.EndDate; 
        end;
      end;
      RunMainRn(RepSpec,true,AccumStartDate,resUseAccum,lTotSumDebet,lTotSumCredit,VATSumr,true,lTotSumFwBal,lTotSumBal,lTotTransCnt);
      TotSumDebet = TotSumDebet + lTotSumDebet;
      TotSumCredit = TotSumCredit + lTotSumCredit;
      TotSumFwBal = TotSumFwBal + lTotSumFwBal;
      TotSumBal = TotSumBal + lTotSumBal;
      TotTransCnt = TotTransCnt + lTotTransCnt;
    end;
  end;
*/  
  ResetCompany(oldcomp);
  RETURN;
END;
                     
procedure SetReportSpecification(var record RcVc RepSpec,Integer conscompany)
begin
  record DaughterCompBlock DCb;
  row DaughterCompBlock DCrw;
  Integer i,rwcnt;
  Integer oldcomp;
  
  oldcomp = CurrentCompany;
  if (SetCompany(conscompany,false)) then begin
    BlockLoad(DCb);
    rwcnt = MatRowCnt(DCb);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(DCb,i,DCrw);
      if (RepSpec.flags[29]==StringToInt(DCrw.CompCode)) then begin
        if (nonblankdate(DCrw.StartDate)) then begin RepSpec.sStartDate = DCrw.StartDate; end;
        if (nonblankdate(DCrw.EndDate)) then begin RepSpec.sEndDate = DCrw.EndDate; end;
      end;
    end;
  end;
  ResetCompany(oldcomp);
  return;
end;
                     
global
procedure MainRn(record RcVc specRepSpec)
BEGIN
  Date AccumStartDate;
  Boolean resUseAccum;
  val TotSumDebet,TotSumCredit;
  val TotSumFwBal,TotSumBal;
  LongInt TotTransCnt;
  record SMVc VATSumr;
  Date sd,ed;
  record RcVc RepSpec;
  Integer oldcomp;
  
  //logtext(0,specRepSpec.f7);//Edit_________________ABR//Edit_________________ABR
  specRepSpec.ObjStr = specRepSpec.f7;// Edit ************************** Thursday, 3 November 2016 18:14:38
  
  RepSpec = specRepSpec;
  oldcomp = CurrentCompany;

  if (RepSpec.flags[29]!=0) then begin
    if (SetCompany(RepSpec.flags[29],false)) then begin
    end;
  end;
// Pageheader 
//  strpblank(gPageHeader);
  TotSumFwBal = 0; TotSumBal = 0;
  FindAccSD(RepSpec.sStartDate,AccumStartDate,resUseAccum);

  StartReportJob(USetStr(3181));
  MainListTopHdrs(RepSpec,resUseAccum,AccumStartDate);  
  if (RepSpec.ArtMode==0) then begin
    StartFormat(10);
    EndFormat;
  end else begin
    StartFormat(20);
    OutString(0,0,USetStr(3242),false);
    OutString(50,0,USetStr(3243),false);
    OutStringAdjustBiDi(240,0,USetStr(3193),true,M4Val,280);
    OutStringAdjustBiDi(3,0,USetStr(3187),true,M4Val,360);
    OutStringAdjustBiDi(4,0,USetStr(3188),true,M4Val,440);
    OutStringAdjustBiDi(1,0,USetStr(3189),true,M4Val,510);
    EndFormat;
  end;
  if (CountRecords("TRVc")<=0) then begin
    StartFormat(15);
    OutString(0,0,USetStr(3190),false);
    EndFormat;
  end;
  ClearAcums;
  if (RepSpec.Media==mtPrinter) then begin
    if (RepSpec.sStartDate!=AccumStartDate) then begin
      sd = RepSpec.sStartDate;
      ed = RepSpec.sEndDate;
      RepSpec.sStartDate = AccumStartDate;
      RepSpec.sEndDate = AddDay(sd,-1);
      RunMainRn(RepSpec,false,AccumStartDate,resUseAccum,TotSumDebet,TotSumCredit,VATSumr,false,totsumFwBal,TotSumBal,TotTransCnt);
      RepSpec.sStartDate = sd;
      RepSpec.sEndDate = ed;
    end;
  end;
  TotTransCnt = 0;
  if (RepSpec.IncDaughter!=0) then begin
    RunMainRnPerCompany(RepSpec,AccumStartDate,resUseAccum,TotSumDebet,TotSumCredit,VATSumr,true,totsumFwBal,TotSumBal,TotTransCnt);
    if (RepSpec.flags[12]==kReportBCOneConsolidationRate) then begin
      StartFormat(15);
      EndFormat;
      Black_Divider(0,1);
      StartFormat(15);
      OutString(6,0,USetStr(6797),false);
      OutValBiDi(3,0,TotSumDebet,M4Val,true,360);
      OutValBiDi(4,0,TotSumCredit,M4NegVal,true,440);
      EndFormat;
      StartFormat(15);
      OutString(6,0,USetStr(3193),false);
      OutValBiDi(5,0,totsumFwBal,M4Val,true,425);
      EndFormat;
      StartFormat(15);
      OutString(6,0,USetStr(3194),false);
      OutValBiDi(3,0,TotSumDebet+TotSumCredit,M4Val,true,360);
      OutValBiDi(4,0,TotSumDebet+TotSumCredit,M4CVal,true,440);
      EndFormat;
      StartFormat(15);
      OutString(20,0,USetStr(3205) & ":",false);
      OutLongInt(100,0,TotTransCnt,false);
      OutString(6,0,USetStr(4993),false);
      OutValBiDi(5,0,totsumFwBal+TotSumDebet+TotSumCredit,M4Val,true,425);
      EndFormat;
    end;
  end else begin
    if (RepSpec.flags[29]!=0) then begin
      SetReportSpecification(RepSpec,oldcomp);    
    end;
    RunMainRn(RepSpec,false,AccumStartDate,resUseAccum,TotSumDebet,TotSumCredit,VATSumr,true,TotSumFwBal,TotSumBal,TotTransCnt);

    StartFormat(15);
    OutString(6,0,USetStr(3196),false);
    if (RepSpec.Media==mtFile) or (RepSpec.Media==mtExcel) then begin
      OutString(0,0,"",false);
      if (RepSpec.ArtMode!=1) then begin
        OutString(0,0,"",false);
      end;
    end;
    if (RepSpec.ArtMode==1) then begin
      OutValBiDi(240,0,TotSumFwBal,M4Val,true,280);
    end;
    OutValBiDi(3,0,TotSumDebet,M4Val,true,360);
    OutValBiDi(4,0,TotSumCredit,M4NegVal,true,440);
    if (RepSpec.ArtMode==1) then begin
      OutValBiDi(1,0,TotSumBal,M4Val,true,510);
    end;
    EndFormat;
    if (RepSpec.flags[4]!=0) then begin ListPerTrans(RepSpec); end;
    if (RepSpec.flags[5]!=0) then begin
      PrintVATCodesSubtotals(VATSumr);
    end;
  end;
  EndJob;
  if (RepSpec.flags[29]!=0) then begin
    ResetCompany(oldcomp);
  end;
  RETURN;
END;

global
procedure RunARRn(record RcVc RepSpec,var val tot1Sum)
BEGIN
  record ARVc ARr;
  record CUVc CUr;
  record IVVc IVr;
  record PurgeTRVc PurgeTRr;
  record TRVc TRr;
  record IPrsVc IPrsr;
  Boolean TrHs,CUs,CustOut,backdatf;
  Boolean testf,first1f,first2f;
  val AR1Sum,AR2Sum,CurSum;
  val tot2Sum,totCurSum;
  LongInt latedays;
  Integer i,rwcnt,keys,nrofper;
  val sact,s0,s1,s2,s3,s4,s5,s6,s7;
  val sactb2,s0b2,s1b2,s2b2,s3b2,s4b2,s5b2,s6b2,s7b2;
  Array val ss;
//  val ss0,ss1,ss2,ss3,ss4,ss5,ss6,ss7;
  Array val ssb2;  
//  val ss0b2,ss1b2,ss2b2,ss3b2,ss4b2,ss5b2,ss6b2,ss7b2;
  string 255 frcc,tocc;
  val rs,rs2;
  val rval,tot,totb2,rvalb1;
  val sum,sum2,blval;
  Array val overduetot;
  Array val currenttot;
  Array val notduetot;
  val Total1Due,Total2Due,Total1NotDue,Total2NotDue,TotOnAcc,TotalCurDue,TotalCurNotDue;
  Array val TotalCurrent;
  val sumdiff,sumcurncy,sumbooked,sumnow;
  val totdiff,totbooked,totnow;
  val sactinv,s0inv,s1inv,s2inv,s3inv,s4inv,s5inv,s6inv,s7inv,totinv;
  string 255 ckey;
  record SMVc CurTotalsr;  //addcurencytotals
  record SMVc OnAccCurTotalsr;  //addcurencytotals
  row SMVc OnAccCurTotalsrw;
  Array string 10 debaccs;
  Array val debbal;
  Integer debcnt;
  array val av1;
  array val av2;
  array val av3;
  array string 20 acur;
  Integer curcnt,pos;
  Date agedate;
  string 255 lastcurncycode;
  Boolean onecurncyf;
  record AgedBlock Agedb;
  Boolean ivfound;
  LongInt colstart,colwidth,col2start,ncols;
  val onaccsumbooked,onaccsumnow,onaccsumcurncy,onaccsumdiff;
  
  tot1Sum = blankval;
  BlockLoad(Agedb);
  debcnt = -1;
  if (nonblankdate(RepSpec.d1)) then begin
    backdatf = true;
    agedate = RepSpec.d1;
  end else begin
    backdatf = false;
    agedate = CurrentDate;
  end;  
  frcc = FirstInRange(RepSpec.f1,20);
  tocc = LastInRange(RepSpec.f1,20);
  CountPeriods(nrofper);
  if ((RepSpec.ArtMode==2) or (RepSpec.ArtMode==5)) then begin    
    ncols = CalcARRnColumnSpacing(nrofper,Agedb.UseAccPeriod,colwidth,colstart,col2start);
    
    SetRepColBiDi(2,colstart,col2start);
    SetRepColBiDi(3,colstart + colwidth,col2start + colwidth);
    SetRepColBiDi(4,colstart + (colwidth * 2),col2start + (colwidth * 2));
    if (ncols>=2) then begin SetRepColBiDi(5,colstart + (colwidth * 3),col2start + (colwidth * 3)); end;
    if (ncols>=3) then begin SetRepColBiDi(6,colstart + (colwidth * 4),col2start + (colwidth * 4)); end;
    if (ncols>=4) then begin SetRepColBiDi(7,colstart + (colwidth * 5),col2start + (colwidth * 5)); end;
    if (ncols>=5) then begin SetRepColBiDi(8,colstart + (colwidth * 6),col2start + (colwidth * 6)); end;
    if (ncols>=6) then begin SetRepColBiDi(9,colstart + (colwidth * 7),col2start + (colwidth * 7)); end;
  end;
  
  PrintHeaderAR2(RepSpec,agedate,nrofper,Agedb.ActualInvoices,Agedb.SeparateOnAcc);
  if (RepSpec.ArtMode==4) or (RepSpec.ArtMode==6) then begin
    RecordNew(CurTotalsr);
    RecordNew(OnAccCurTotalsr);
  end;
  totCurSum = blankval;
  tot1Sum = blankval;
  tot2Sum = blankval;
  if (RepSpec.flags[1]==1) then begin
    CUr.Name = "";
    CUr.Code = "";
    ckey = "Name";
//    CUs = m4_ReadFirstLCKey(CUVc,ckey,&CUr,1,false,&LLoop2);
    keys = 1;
    CUs = LoopKey(ckey,CUr,1,true);
    if (CUs==false) then begin goto L99; end;
    first1f = true;        
  end else begin
    if (blank(RepSpec.f3)) then begin    
      CUr.Code = frcc;
      ckey = "Code";
//      CUs = m4_ReadFirstLCKey(CUVc,ckey,&CUr,1,false,&LLoop2);
      keys = 1;
      CUs = LoopKey(ckey,CUr,1,true);      
      if (CUs==false) then begin goto L99; end;            
      first1f = true;        
    end else begin
      CUr.CustCat = RepSpec.f3;
      CUr.Code = frcc;
      ckey = "Group";
      keys = 2;
//      CUs = m4_ReadFirstLCKey(CUVc,ckey,&CUr,2,false,&LLoop2);
      CUs = LoopKey(ckey,CUr,2,true);
      if (CUs==false) then begin goto L99; end;
      first1f = true;        
    end;
  end;
L22:;
  onecurncyf = true;
  lastcurncycode = "";
  
  if (CUs==false) then begin goto L88; end;
//    CUs = m4_ReadLogicalCKey(CUVc,ckey,LLoop2++,&CUr);
    if (first1f) then begin 
      first1f = false; 
      ResetLoop(CUr);      
    end;
    CUs = LoopKey(ckey,CUr,keys,true);  
    if (CUs) then begin
      testf = true;
      if (CUr.CUType==0) then begin testf = false; end;
      if (nonblank(RepSpec.f9)) then begin
        if (RepSpec.f9!=CUr.MainPartner) then begin
          testf = false;
        end;
      end;
      if (RepSpec.flags[1]==1) then begin
        if (nonblank(RepSpec.f1)) then begin
          if (CUr.Code<frcc) then begin
            testf = false;
          end;
          if (CUr.Code>tocc) then begin
            testf = false;
          end;
        end;    
        if (nonblank(RepSpec.f3)) then begin 
          if (CUr.CustCat<>RepSpec.f3) then begin
            testf = false;
          end;
        end;    
      end else begin
        if (nonblank(RepSpec.f1)) then begin
          if (CUr.Code<frcc) then begin
            CUs = false;
          end;
          if (CUr.Code>tocc) then begin
            CUs = false;
          end;
        end;    
        if (nonblank(RepSpec.f3)) then begin 
          if (CUr.CustCat<>RepSpec.f3) then begin
            testf = false;
          end;
        end;    
        if (nonblank(tocc)) then begin
          if (CUr.Code>tocc) then begin
            CUs = false;
          end;
        end;    
      end;
    end;
  if (CUs==false) then begin goto L88; end;
  if (testf==false) then begin goto L22; end;
  CustOut = false;
  if (RepSpec.ArtMode!=4) and (RepSpec.ArtMode!=6) and (RepSpec.ArtMode!=3) then begin
    RecordNew(CurTotalsr);
    RecordNew(OnAccCurTotalsr);
  end;
  BeginCurncyTotals(curcnt);
  CurSum = 0;
  AR1Sum = 0;
  AR2Sum = 0;
  rwcnt = 0;
  sact = 0; sactb2 = 0;
  s0 = 0; s0b2 = 0;
  s1 = 0; s1b2 = 0;
  s2 = 0; s2b2 = 0;
  s3 = 0; s3b2 = 0;
  s4 = 0; s4b2 = 0;
  s5 = 0; s5b2 = 0;
  s6 = 0; s6b2 = 0;
  s7 = 0; s7b2 = 0;
  if (RepSpec.flags[2]==1) then begin
    s0 = CurSum + s0;
  end else begin
    s0 = AR1Sum + s0;
  end;  
  if (backdatf) then begin
    ResetLoop(IPrsr);
    IPrsr.CustCode = CUr.Code;
    IPrsr.TransType = kIPrsTransTypeInvoice;
    TrHs = LoopKey("CustType",IPrsr,2,true);    
    first2f = true;            
  end else begin
    ARr.CustCode = CUr.Code;
    ARr.InvoiceNr = 0;
//    TrHs = m4_ReadFirstLCKey(ARVc,"CustCode",&ARr,2,false,&LLoop1);
    ResetLoop(ARr);
    TrHs = LoopKey("CustCode",ARr,2,true);
    first2f = true;            
  end;
  if (RepSpec.flags[21]==1) then begin TrHs = false; end;
  while (TrHs==true) begin
    testf = false;
    if (backdatf) then begin
      if (first2f) then begin 
        first2f = false; 
        ResetLoop(IPrsr); 
      end;
      TrHs = LoopKey("CustType",IPrsr,2,true);    
      if (TrHs) then begin 
        if (CUr.Code<>IPrsr.CustCode) then begin TrHs = false; end;
        if (IPrsr.TransType!=kIPrsTransTypeInvoice) then begin TrHs = false; end;
//        if (IPrsr.TransType>kIPrsTransTypeNLInvoice) then begin TrHs = false; end;
//        if (IPrsr.CustDate>agedate) then begin TrHs = false; end;
      end;  
      if (TrHs) then begin
        testf = true;
        RecordClear(IVr);
        switch (IPrsr.TransType) begin
          case kIPrsTransTypeInvoice:
            IVr.SerNr = IPrsr.TransNr;
            testf = ReadFirstMain(IVr,1,true);
          case kIPrsTransTypePurgeNLTransaction:
            PurgeTRr.Number = IPrsr.TransNr;
            PurgeTRr.IntYc = IPrsr.IntYc;
            PurgeTRr.TransRow = IPrsr.TransRow;
            if (ReadFirstMain(PurgeTRr,3,true)) then begin
              testf = ConvertPurgeNLTrans_IVVc(PurgeTRr,IPrsr,CUr,false,IVr);
            end;
          case kIPrsTransTypeNLTransaction:
            TRr.Number = IPrsr.TransNr;
            TRr.IntYc = IPrsr.IntYc;
            if (ReadFirstMain(TRr,2,true)) then begin
              testf = ConvertNLTrans_IVVc(TRr,IPrsr,CUr,false,IVr);
            end;
          otherwise
            testf = false;
        end;
        if (testf) then begin
          testf = ARInvoiceTest(RepSpec,IVr,backdatf);          
/*          
          if (RepSpec.flags[22]==0) then begin
            latedays = DateDiff(IVr.PayDate,agedate);
          end else begin
            latedays = DateDiff(IVr.InvDate,agedate);
          end;
*/          

          if ((IVr.InstallmentInv==1) and (RepSpec.flags[19]!=0)) then begin
            latedays = CalculateLateDaysInstallmentInv(IVr.SerNr,IVr.InvDate,IVr.PayDate,agedate,RepSpec.flags[22]!=0);
          end else begin
            latedays = CalculateLateDays(IVr.InvDate,IVr.PayDate,agedate,RepSpec.flags[22]!=0,RepSpec.ArtMode!=2 and RepSpec.ArtMode!=5);
          end;
          if (RepSpec.flags[0]<>0) then begin 
            if (latedays>=0) then begin 
              testf = false; 
            end;
          end;
          if (RepSpec.long1>0) then begin          
            if (-latedays<=RepSpec.long1) then begin
              testf = false; 
            end;
          end;
          if ((nonblank(RepSpec.f3)) and (RepSpec.f3<>CUr.CustCat)) then begin testf = false; end;
          if (nonblank(RepSpec.f4)) then begin
            if (SetInSet(RepSpec.f4,CUr.Classification)==false) then begin
              testf = false;
            end;
          end;
          if (nonblank(RepSpec.f5)) then begin
            if (testf) then begin
              testf = false;
              ClassTypef(RepSpec.f5,CUr.Classification,testf);
            end;
          end;
          if (testf) then begin
            rvalb1 = blankval;
            if ((IVr.InvType<>kInvoiceTypeCredit and IVr.InvType!=kInvoiceTypeCreditSpecialSales) and (IVr.InvType<>kInvoiceTypeCash and IVr.InvType<>kInvoiceTypeCashInvoiceReceiptPRT)) then begin
              if ((IVr.InstallmentInv==1) and (RepSpec.flags[19]!=0)) then begin
                FindInstalmentInvoiceBalance(RepSpec,IVr,agedate,rval,rvalb1);
              end else begin
                rval = IVr.Sum4;
                if (nonblank(IVr.CurncyCode)) then begin
                  rvalb1 = IVr.BaseSum4;
                end;
                if (rvalb1==0) then begin
                  rvalb1 = rval;
                end;
              end;
            end;
            if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
              if (IVr.CredInv==-1) then begin
                rval = -IVr.Sum4;
                if (nonblank(IVr.CurncyCode)) then begin
                  rvalb1 = -IVr.BaseSum4;
                end;
                if (rvalb1==0) then begin
                  rvalb1 = rval;
                end;
              end else begin
                rval = blankval;
                rvalb1 = blankval;
              end;    
            end;
            if (IVr.InvType==kInvoiceTypeCash or IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
              rval = blankval;
              rvalb1 = blankval;
            end;       
            if (IVr.TransDate>RepSpec.d1) then begin          
              rval = blankval;
              rvalb1 = blankval;
              testf = false;            
            end else begin
              if ((IVr.InstallmentInv==1) and (RepSpec.flags[19]!=0)) then begin
              end else begin
                ARRnGetInvBalance(IVr,RepSpec.d1,IVr.InvType,rval,rvalb1,latedays);
              end;
              SubPrePayments(IVr,rval,rvalb1);
              if (IVr.InvType!=kInvoiceTypeCash and IVr.InvType!=kInvoiceTypeCashInvoiceReceiptPRT) then begin
                SubCashRows_IVVc(IVr,false,rval,rvalb1);
              end;
  //            rs = MulRateToBase1(IVr.CurncyCode,rval,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
  //            rs2 = MulRateToBase2(IVr.CurncyCode,rval,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
              rs = rvalb1;
              Base1ToBase2(rs,IVr.TransDate,rs2);
              if (rval==0) then begin testf = false; end;
              if (testf) then begin
                if (Agedb.ActualInvoices!=0) then begin
                  if (latedays<0) then begin
                    overduetot[1] = overduetot[1] + rs;
                    overduetot[2] = overduetot[2] + rs2;
                    overduetot[0] = overduetot[0] + rval;
                  end else begin
                    if (latedays==0) then begin
                      currenttot[1] = currenttot[1] + rs;
                      currenttot[2] = currenttot[2] + rs2;
                      currenttot[0] = currenttot[0] + rval;
                    end else begin
                      notduetot[1] = notduetot[1] + rs;
                      notduetot[2] = notduetot[2] + rs2;
                      notduetot[0] = notduetot[0] + rval;
                    end;
/*                    
                    if (IsIVinActualPeriod(agedate,latedays,Agedb.ActualInvoices)) then begin
                      currenttot[1] = currenttot[1] + rs;
                      currenttot[2] = currenttot[2] + rs2;
                      currenttot[0] = currenttot[0] + rval;
                    end else begin
                      notduetot[1] = notduetot[1] + rs;
                      notduetot[2] = notduetot[2] + rs2;
                      notduetot[0] = notduetot[0] + rval;
                    end;
*/                    
                  end;
                end else begin
                  if (latedays<0) then begin
                    overduetot[1] = rs + overduetot[1];
                    overduetot[2] = rs2 + overduetot[2];
                    overduetot[0] = overduetot[0] + rval;
                  end else begin
                    notduetot[1] = notduetot[1] + rs;
                    notduetot[2] = notduetot[2] + rs2;
                    notduetot[0] = notduetot[0] + rval;
                  end;
                end;
              end;
            end;
          end;
        end;
      end;
    end else begin
      ivfound = false;
      if (first2f) then begin first2f = false; ResetLoop(ARr); end;
      TrHs = LoopKey("CustCode",ARr,2,true);      
      if (TrHs) then begin 
        if (CUr.Code<>ARr.CustCode) then begin TrHs = false; end;
      end;  
      if (TrHs) then begin
        IVr.SerNr = ARr.InvoiceNr;
        ivfound = ReadFirstMain(IVr,1,true);
        if (ivfound) then begin
          if ((IVr.InstallmentInv==1) and (RepSpec.flags[19]!=0)) then begin
            latedays = CalculateLateDaysInstallmentInv(IVr.SerNr,IVr.InvDate,IVr.PayDate,agedate,RepSpec.flags[22]!=0);
          end else begin
            latedays = CalculateLateDays(IVr.InvDate,ARr.DueDate,agedate,RepSpec.flags[22]!=0,RepSpec.ArtMode!=2 and RepSpec.ArtMode!=5);
          end;
        end else begin
          latedays = CalculateLateDays(ARr.DueDate,ARr.DueDate,agedate,RepSpec.flags[22]!=0,RepSpec.ArtMode!=2 and RepSpec.ArtMode!=5);
        end;
        
        if ((RepSpec.flags[0]==0) or (latedays<0)) then begin
          if ((blank(RepSpec.f3)) or (RepSpec.f3==CUr.CustCat)) then begin testf = true; end;
          if ((blank(RepSpec.f4)) or (SetInSet(RepSpec.f4,CUr.Classification)==true)) then begin
            testf = true;
          end;
          if (nonblank(RepSpec.f5)) then begin
            if (testf) then begin
              testf = false;
              ClassTypef(RepSpec.f5,CUr.Classification,testf);
            end;
          end;
        end;
        if (RepSpec.flags[0]<>0) then begin 
          if (latedays>=0) then begin 
            testf = false; 
          end;
        end;
        if (RepSpec.long1>0) then begin          
          if (-latedays<=RepSpec.long1) then begin
            testf = false; 
          end;
        end;
      end;
      if (nonblank(RepSpec.CurncyCode)) then begin
        if (ARr.ARCurncyCode!=RepSpec.CurncyCode) then begin          
          testf = false;
        end;
      end;
      if (testf) then begin
        rval = ARr.RVal;
        if (ivfound) then begin
          if ((IVr.InstallmentInv==1) and (RepSpec.flags[19]!=0)) then begin
            FindInstalmentInvoiceBalance(RepSpec,IVr,CurrentDate,rval,rs);
          end else begin
            rs = ARr.BookRVal;
          end;
//          Base1ToBase2(rs,IVr.TransDate,rs2);
          rs2 = MulRateToBase2(IVr.CurncyCode,rval,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
          if (nonblank(RepSpec.f2)) then begin
            if (SetInSet(RepSpec.f2,IVr.SalesMan)==false) then begin testf = false; end;
          end;
          if (nonblank(RepSpec.f4)) then begin
            if (SetInSet(RepSpec.f4,CUr.Classification)==false) then begin
              testf = false;
            end;
          end;
          if (nonblank(RepSpec.Language)) then begin
            if (RepSpec.Language!=IVr.LangCode) then begin
               testf = false;
            end;
          end;
          if (nonblank(RepSpec.AccStr)) then begin
            if (RepSpec.AccStr!=IVr.ARAcc) then begin
              testf = false;
            end;
          end;
          if (nonblank(RepSpec.f5)) then begin
            if (testf) then begin
              testf = false;
              ClassTypef(RepSpec.f5,CUr.Classification,testf);
            end;
          end;
          if (IVr.Invalid<>0) then begin testf = false; end;
          if ((RepSpec.flags[13]==1) and (IVr.InvType!=kInvoiceTypeInterest)) then begin testf = false; end;
          if ((RepSpec.flags[15]==1) and (IVr.InvType!=kInvoiceTypeDownpayment)) then begin testf = false; end;
          if (nonblank(RepSpec.ObjStr)) then begin
            if (SetInSet(RepSpec.ObjStr,IVr.Objects)==false) then begin
              testf = false;
            end;
          end;
          if ((testf==true) and (nonblank(RepSpec.ObjType))) then begin
            testf = ObjectTypeMatch(IVr.Objects,RepSpec.ObjType);            
          end;
          if (RepSpec.flags[16]==1) then begin
            if (IVr.NoRemndrFlag==1) then begin
              testf = false;
            end;
          end;
          if (RepSpec.flags[17]==1) then begin
            if (IVr.NoColectionFlag==1) then begin
              testf = false;
            end;
          end;          
          if (testf) then begin
            if (RepSpec.flags[3]==1) then begin
              if (IVr.DisputedFlag==1) then begin
                testf = false;
              end;
            end;
          end;
          if (testf) then begin
            if (RepSpec.flags[3]==2) then begin
              if (IVr.DisputedFlag<>1) then begin
                testf = false;
              end;
            end;
          end;
        end else begin
          rs = ARr.BookRVal;
          Base1ToBase2(rs,ARr.DueDate,rs2);
          IVr.CustCode = ARr.CustCode;
          IVr.Addr0 = CUr.Name;
          IVr.SerNr = ARr.InvoiceNr;
          IVr.PayDate = ARr.DueDate;
          IVr.CurncyCode = ARr.ARCurncyCode;
          if (nonblank(RepSpec.f2)) then begin testf = false; end;
        end;
        if (testf) then begin
          if (latedays<0) then begin
            overduetot[1] = rs + overduetot[1];
            overduetot[2] = rs2 + overduetot[2];
            overduetot[0] = overduetot[0] + rval;
          end else begin
            if (latedays==0) and (Agedb.ActualInvoices!=0) then begin
              currenttot[1] = currenttot[1] + rs;
              currenttot[2] = currenttot[2] + rs2;
              currenttot[0] = currenttot[0] + rval;
            end else begin
              notduetot[1] = notduetot[1] + rs;
              notduetot[2] = notduetot[2] + rs2;
              notduetot[0] = notduetot[0] + rval;
            end;
          end;
        end;
      end;
    end;
		if(testf) then begin 
			if(blank(RepSpec.f1))then begin
				if(UserCanAction("OrdRnForAllCustomers",true)==false) then begin
					testf = false;
				end;	
			end;		
		end;
    if (testf) then begin
        if ((CustOut==false) and (RepSpec.ArtMode<>3) and (RepSpec.ArtMode<>2) and (RepSpec.ArtMode<>4) and (RepSpec.ArtMode<>6) and (RepSpec.ArtMode!=10)) then begin
          Gray_Divider(0,1);
          StartFormat(15);
           OutString(0,"DblCUVc",CUr.Code,false);
           OutString(100,0,CUr.Name,false);
           OutString(280,0,CUr.Phone,false);
           if (RepSpec.flags[2]==1) then begin
             OutString(480,0,CUr.CurncyCode,true);
           end;  
          EndFormat;          
          CustOut = true;
        end;
        if ((RepSpec.ArtMode==0) or (RepSpec.ArtMode==1)) then begin
          if (IVr.Addr0<>CUr.Name) then begin
            StartFormat(15);
            OutString(100,0,IVr.Addr0,false);
            EndFormat;
          end;
        end;
        AR1Sum = rs + AR1Sum;
        AR2Sum = rs2 + AR2Sum;
        CurSum = rval + CurSum;
        rwcnt = rwcnt + 1;
        if ((RepSpec.flags[18]!=0) and (RepSpec.ArtMode!=4) and (RepSpec.ArtMode!=6)) then begin
          if (blank(IVr.ARAcc)) then begin
            GetARAcc(IVr.CustCode,IVr.ARAcc);
          end;
          ARRnAddToDebtorsAccounts(IVr.ARAcc,IVr.InvType,rs,debaccs,debbal,debcnt);
        end;
        if (RepSpec.ArtMode==0) then begin// Historik 
          ARWithLogg(CUr,acur,av1,curcnt,RepSpec,IVr,IPrsr,TRr,rval,rwcnt,backdatf);
        end;        
        if (RepSpec.ArtMode==1) then begin// Overview        
          ARRPrintOverView(CUr,IVr,IPrsr,TRr,RepSpec,rval,rs,latedays);
          AddCurncyTotals(acur,av1,curcnt,IVr.CurncyCode,rval);
        end;
        if (RepSpec.ArtMode==2) then begin// Aged
          if ((IVr.InstallmentInv==1) and (RepSpec.flags[19]!=0)) then begin
            SumAgedInstalmenInvoice(RepSpec,CUr,agedate,IVr,Agedb.ActualInvoices,sact,s0,s1,s2,s3,s4,s5,s6,s7);
          end else begin
            if (RepSpec.flags[2]==0) then begin
              SumAged(agedate,latedays,Agedb.ActualInvoices,rs,sact,s0,s1,s2,s3,s4,s5,s6,s7);
              SumAged(agedate,latedays,Agedb.ActualInvoices,rs2,sactb2,s0b2,s1b2,s2b2,s3b2,s4b2,s5b2,s6b2,s7b2);
            end else begin
              if (nonblank(CUr.CurncyCode)) then begin
                SumAged(agedate,latedays,Agedb.ActualInvoices,rval,sact,s0,s1,s2,s3,s4,s5,s6,s7);
              end else begin
                SumAged(agedate,latedays,Agedb.ActualInvoices,rs,sact,s0,s1,s2,s3,s4,s5,s6,s7);
                SumAged(agedate,latedays,Agedb.ActualInvoices,rs2,sactb2,s0b2,s1b2,s2b2,s3b2,s4b2,s5b2,s6b2,s7b2);
              end;
            end;
          end;
        end;
        if (RepSpec.ArtMode==3) then begin// Saldo          
          AddCurTotalsRow(IVr.CurncyCode,rval,blankval,blankval,CurTotalsr);
        end;
        if (RepSpec.ArtMode==4) then begin// rate difference 
          ARRnRateDifferences(RepSpec,IVr,rval,rs,agedate,sumnow,sumcurncy,sumbooked,sumdiff,lastcurncycode,onecurncyf,CurTotalsr);
//          GetOnAccBalance(RepSpec,CUr.Code,CUr.CurncyCode,backdatf,RepSpec.flags[2],sum,sum2,rval,onaccsumbooked,onaccsumnow,onaccsumcurncy,onaccsumdiff,OnAccCurTotalsr,debaccs,debbal,debcnt);
//          sumbooked = sumbooked - onaccsumbooked;
//          sumnow = sumnow - onaccsumnow;
//          sumcurncy = sumcurncy - onaccsumcurncy;
//          sumdiff = sumdiff + onaccsumdiff;
        end;
        if (RepSpec.ArtMode==6) then begin// rate difference detailed 
          ARRnRateDifferencesDetailed(RepSpec,IVr,ARr,CUr,rval,rs,agedate,backdatf,
                            sumnow,sumcurncy,sumbooked,sumdiff,CustOut,lastcurncycode,onecurncyf,CurTotalsr);
        end;
        
        if (RepSpec.ArtMode==5) then begin// Detailed  Aged          
          sactinv = 0;
          s0inv = 0;
          s1inv = 0;
          s2inv = 0;
          s3inv = 0;
          s4inv = 0;
          s5inv = 0;
          s6inv = 0;
          s7inv = 0;
          totinv = 0;
          if ((IVr.InstallmentInv==1) and (RepSpec.flags[19]!=0)) then begin
            SumAgedInstalmenInvoice(RepSpec,CUr,agedate,IVr,Agedb.ActualInvoices,sact,s0,s1,s2,s3,s4,s5,s6,s7);
          end else begin
            if (RepSpec.flags[2]==0) then begin
              SumAged(agedate,latedays,Agedb.ActualInvoices,rs,sactinv,s0inv,s1inv,s2inv,s3inv,s4inv,s5inv,s6inv,s7inv);
            end else begin
              SumAged(agedate,latedays,Agedb.ActualInvoices,rval,sactinv,s0inv,s1inv,s2inv,s3inv,s4inv,s5inv,s6inv,s7inv);
            end;
          end;
          totinv = s0inv + s1inv;
          totinv = totinv + s2inv;
          totinv = totinv + s3inv;
          totinv = totinv + s4inv;
          totinv = totinv + s5inv;
          totinv = totinv + s6inv;
          totinv = totinv + s7inv;
          totinv = totinv + sactinv;
          if ((IVr.InstallmentInv==1) and (RepSpec.flags[19]!=0)) then begin
            ARPrintDueDetailedInstalmenInvoice(IVr,RepSpec,CUr,Agedb.ActualInvoices,nrofper);
          end else begin
            ARPrintDueDetailed(IVr,RepSpec,CUr.CurncyCode,CUr.Objects,sactinv,s0inv,s1inv,s2inv,s3inv,s4inv,s5inv,s6inv,s7inv,totinv,nrofper);
          end;
          if (RepSpec.flags[2]==0) or (nonblank(CUr.CurncyCode)) then begin
            sact = sactinv + sact;
            s0 = s0inv + s0;
            s1 = s1inv + s1;
            s2 = s2inv + s2;
            s3 = s3inv + s3;
            s4 = s4inv + s4;
            s5 = s5inv + s5;
            s6 = s6inv + s6;
            s7 = s7inv + s7;
          end else begin
            sact = sact + MulRateToBase1(IVr.CurncyCode,sactinv,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
            s0 = s0 + MulRateToBase1(IVr.CurncyCode,s0inv,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
            s1 = s1 + MulRateToBase1(IVr.CurncyCode,s1inv,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
            s2 = s2 + MulRateToBase1(IVr.CurncyCode,s2inv,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
            s3 = s3 + MulRateToBase1(IVr.CurncyCode,s3inv,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
            s4 = s4 + MulRateToBase1(IVr.CurncyCode,s4inv,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
            s5 = s5 + MulRateToBase1(IVr.CurncyCode,s5inv,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
            s6 = s6 + MulRateToBase1(IVr.CurncyCode,s6inv,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
            s7 = s7 + MulRateToBase1(IVr.CurncyCode,s7inv,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
          end;
        end;
L55:;
    end;
  end;
//  find out and print on account receipts 
testf = true;
if (nonblank(RepSpec.f2)) then begin
  if (CUr.SalesMan<>RepSpec.f2) then begin
    testf = false;
  end;  
end;
if (RepSpec.flags[1]==1) then begin
  if (nonblank(RepSpec.f3)) then begin
    if (CUr.CustCat<>RepSpec.f3) then begin testf = false; end;
  end;    
end;  
if (nonblank(RepSpec.f4)) then begin
  if (SetInSet(RepSpec.f4,CUr.Classification)==false) then begin
    testf = false;
  end;
end;
if (nonblank(RepSpec.f5)) then begin
  if (testf) then begin
    testf = false;
    ClassTypef(RepSpec.f5,CUr.Classification,testf);
  end;
end;

		if(testf) then begin 
			if(blank(RepSpec.f1))then begin
				if(UserCanAction("OrdRnForAllCustomers",true)==false) then begin
					testf = false;
				end;	
			end;		
		end;
		
if (testf) then begin
    rval = 0;
    if (RepSpec.flags[21]<2) then begin    
      if (RepSpec.flags[13]==0) then begin
        GetOnAccBalance(RepSpec,CUr.Code,CUr.CurncyCode,backdatf,RepSpec.flags[2],sum,sum2,rval,onaccsumbooked,onaccsumnow,onaccsumcurncy,onaccsumdiff,OnAccCurTotalsr,debaccs,debbal,debcnt);
        sumbooked = sumbooked - onaccsumbooked;
        sumnow = sumnow - onaccsumnow;
        sumcurncy = sumcurncy - onaccsumcurncy;
        sumdiff = sumdiff + onaccsumdiff;
        if (RepSpec.flags[2]!=0) then begin          
          for (i=0;i<MatRowCnt(OnAccCurTotalsr);i=i+1) begin
            MatRowGet(OnAccCurTotalsr,i,OnAccCurTotalsrw);
            AddCurncyTotals(acur,av1,curcnt,OnAccCurTotalsrw.CurncyCode,OnAccCurTotalsrw.DebVal);
          end;
        end;
        if (RepSpec.ArtMode==3) then begin// Saldo          
          for (i=0;i<MatRowCnt(OnAccCurTotalsr);i=i+1) begin
            MatRowGet(OnAccCurTotalsr,i,OnAccCurTotalsrw);
            AddCurTotalsRow(OnAccCurTotalsrw.CurncyCode,OnAccCurTotalsrw.DebVal,blankval,blankval,CurTotalsr);
          end;
        end;

        RecordNew(OnAccCurTotalsr);
        if (nonblank(CUr.CurncyCode)) then begin
          if (RepSpec.flags[2]!=0) then begin          
//            TotOnAcc = TotOnAcc + rval;//difrent customers have difrent curencies
            TotOnAcc = TotOnAcc + sum;
          end else begin
            TotOnAcc = TotOnAcc + sum;
          end;
        end else begin
          TotOnAcc = TotOnAcc + sum;
        end;
      end;
    end;
    if (blank(CUr.CurncyCode)) then begin //or (CUr.CurncyCode==bcur.BaseCur1) ? 
      if (rval==0) then begin
        sum = 0;
      end;
    end;
    AR1Sum = sum + AR1Sum;
    AR2Sum = sum2 + AR2Sum;
    CurSum = rval + CurSum;
  if (RepSpec.ArtMode==0) then begin
    if (sum<>0) then begin
      PrintOnAccountInfo(CUr,rval,sum,CustOut,RepSpec,CurTotalsr,backdatf);
    end;
  end;
  if (RepSpec.ArtMode==1) then begin
    if ((sum<>0) or (rval<>0)) then begin
      if (RepSpec.flags[2]==0) then begin
        if (CustOut==false) then begin
          Gray_Divider(0,1);
          StartFormat(15);
          OutString(0,"DblCUVc",CUr.Code,false);
          OutString(100,0,CUr.Name,false);
          OutString(280,0,CUr.Phone,false);
          if (RepSpec.flags[2]==1) then begin
            OutString(480,0,CUr.CurncyCode,true);
          end;
          EndFormat;
          CustOut = true;
        end;
        StartFormat(15);
        OutString(140,0,USetStr(11857),false);
        OutValBiDi(450,0,sum,M4Val,true,490);
        EndFormat;
        if (RepSpec.flags[20]!=0) then begin
          PrintPrepaymentsNrsIP(RepSpec.flags[2],RepSpec,CUr.Code,backdatf,140,450);
        end;        
      end else begin
        PrintOnAccountInfo(CUr,rval,sum,CustOut,RepSpec,CurTotalsr,backdatf);
      end;
      if (nonblank(CUr.CurncyCode)) then begin
        AddCurncyTotals(acur,av1,curcnt,CUr.CurncyCode,rval);
      end;
    end;
  end;
  if (RepSpec.ArtMode==4) then begin
    if (sumdiff<>0) then begin
      StartFormat(15);
       OutString(0,0,CUr.Name,false);
       if (onecurncyf) then begin
         OutVal(240,0,sumcurncy,M4Val,true);
       end;
       OutVal(320,0,sumnow,M4Val,true);
       OutVal(400,0,sumbooked,M4Val,true);
       OutVal(480,0,sumdiff,M4Val,true);
      EndFormat;
      totdiff = sumdiff + totdiff;
      totbooked = sumbooked + totbooked;
      totnow = sumnow + totnow;
    end;
    sumdiff = 0;
    sumbooked = 0;
    sumnow = 0;
    sumcurncy = 0;
  end;
  if (RepSpec.ArtMode==6) then begin
    if (sumdiff<>0) then begin
      if (CustOut==false) then begin
        StartFormat(15);
         OutString(0,"DblCUVc",CUr.Code,false);
         OutString(100,0,CUr.Name,false);
         if (RepSpec.flags[2]==1) then begin
           OutString(480,0,CUr.CurncyCode,true);
         end;  
        EndFormat;
        CustOut = true;
      end;              
      Gray_Divider(200,1);
      StartFormat(15);
       if (onecurncyf) then begin
         OutVal(240,0,sumcurncy,M4Val,true);
       end;
       OutVal(320,0,sumnow,M4Val,true);
       OutVal(400,0,sumbooked,M4Val,true);
       OutVal(480,0,sumdiff,M4Val,true);
      EndFormat;
      totdiff = sumdiff + totdiff;
      totbooked = sumbooked + totbooked;
      totnow = sumnow + totnow;
    end;
    sumdiff = 0;
    sumbooked = 0;
    sumnow = 0;
    sumcurncy = 0;
  end;
  if (RepSpec.ArtMode==2) then begin
    testf = true;
    if ((sact==0) and (s0==0) and (s1==0) and (s2==0) and (s3==0) and  (s4==0) and  (s5==0) and (s6==0) and (s7==0) and (sum==0)) then begin testf = false; end;        
    if (testf) then begin
/*    
      if (RepSpec.flags[2]==1) then begin
        s0 = rval + s0;
      end else begin
        s0 = sum + s0;
      end;  
*/      
      tot = s0 + s1;
      tot = tot + s2;
      tot = tot + s3;
      tot = tot + s4;
      tot = tot + s5;
      tot = tot + s6;
      tot = tot + s7;
      tot = tot + sact;
      if (RepSpec.flags[2]==1) then begin
        tot = tot + rval;
      end else begin
        tot = tot + sum;
      end;  

      StartFormat(15);
       OutString(0,"DblCUVc",CUr.Code,false);
       OutString(48,0,CUr.Name,false);
       if (RepSpec.flags[2]==1) then begin
         if (blank(CUr.CurncyCode)) then begin
           PrintAgedLine(sact,s0,s1,s2,s3,s4,s5,s6,s7,sum,tot,nrofper,480,CUr.Code);
         end else begin
           PrintAgedLine(sact,s0,s1,s2,s3,s4,s5,s6,s7,rval,tot,nrofper,464,CUr.Code);
           OutString(465,0,CUr.CurncyCode,false);
         end;
       end else begin
         PrintAgedLine(sact,s0,s1,s2,s3,s4,s5,s6,s7,sum,tot,nrofper,480,CUr.Code);
       end;
      EndFormat;
    end;
  end;
  if (RepSpec.ArtMode==5) then begin
    testf = true;
    if ((sact==0) and (s0==0) and (s1==0) and (s2==0) and (s3==0) and (s4==0) and (s5==0) and (s6==0) and (s7==0) and (sum==0)) then begin testf = false; end;
    if (testf) then begin
      if (sum<>0) then begin
        PrintOnAccountInfo(CUr,rval,sum,CustOut,RepSpec,CurTotalsr,backdatf);
      end;
/*      
      if (RepSpec.flags[2]==1) then begin
        s0 = rval + s0;
      end else begin
        s0 = sum + s0;
      end;  
*/      
      tot = s0 + s1;
      tot = tot + s2;
      tot = tot + s3;
      tot = tot + s4;
      tot = tot + s5;
      tot = tot + s6;
      tot = tot + s7;
      tot = tot + sact;
      if (RepSpec.flags[2]==1) then begin
        tot = tot + rval;
      end else begin
        tot = tot + sum;
      end;  
      if (Agedb.ActualInvoices!=0) then begin
        Black_Divider(150,480);
      end else begin
        Black_Divider(200,480);
      end;
      StartFormat(15);
      if (RepSpec.flags[2]==1) then begin
        if (blank(CUr.CurncyCode)) then begin
          PrintAgedLine(sact,s0,s1,s2,s3,s4,s5,s6,s7,blval,tot,nrofper,480,""); // CUr.Code
        end else begin
          PrintAgedLine(sact,s0,s1,s2,s3,s4,s5,s6,s7,blval,tot,nrofper,464,""); // CUr.Code
          OutString(465,0,CUr.CurncyCode,false);
        end;
      end else begin
        PrintAgedLine(sact,s0,s1,s2,s3,s4,s5,s6,s7,blval,tot,nrofper,480,""); // CUr.Code
      end;
      EndFormat;
    end;
  end;
end;
 
 Total1Due = Total1Due + overduetot[1];
 TotalCurDue = TotalCurDue + overduetot[0];
 Total2Due = Total2Due + overduetot[2];
 
 Total1NotDue = Total1NotDue + notduetot[1];
 TotalCurNotDue = TotalCurNotDue + notduetot[0];
 TotalCurrent[0] = TotalCurrent[0] + currenttot[0];
 TotalCurrent[1] = TotalCurrent[1] + currenttot[1];
 TotalCurrent[2] = TotalCurrent[2] + currenttot[2];
 
 if ((RepSpec.ArtMode==0) or (RepSpec.ArtMode==1)) then begin
   if (CustOut==true) then begin
     if (RepSpec.flags[2]==0) then begin
       if (RepSpec.ArtMode==0) then begin
         Black_Divider(290,480);
       end else begin
         Black_Divider(290,450);
       end;
     end;
     if (RepSpec.flags[2]==1) then begin
       if (RepSpec.ArtMode==0) then begin
         PrintCurncyTotals(acur,av1,av2,av3,curcnt,450,-1,-1,320,false,RepSpec.PocketPC);
       end else begin
         PrintCurncyTotals(acur,av1,av2,av3,curcnt,450,-1,-1,320,false,RepSpec.PocketPC);
       end;
       Black_Divider(290,460);
     end;
     StartFormat(15);
      OutString(320,0,USetStr(2424),true);
      if (nonblank(RepSpec.CurncyCode)) and (RepSpec.flags[2]==1) then begin
        OutValBiDi(450,0,CurSum,M4Val,true,490);
      end else begin
        pos = 450;
        if (RepSpec.ArtMode==0) then begin
          if (RepSpec.flags[2]==0) then begin
            pos = 480;
          end;
        end;
        if (RepSpec.flags[2]==0) then begin
          OutValBiDi(pos,0,AR1Sum,M4Val,true,520);
        end else begin
          if (nonblank(CUr.CurncyCode)) then begin
            OutValBiDi(pos,0,CurSum,M4Val,true,500);
          end else begin
            OutValBiDi(pos,0,AR1Sum,M4Val,true,500);
          end;
        end;
      end;
     EndFormat;
     if (overduetot[1]<>0) then begin
        StartFormat(15);
         OutString(320,0,USetStr(2527),true);
         if (nonblank(RepSpec.CurncyCode)) and (RepSpec.flags[2]!=0) then begin
           OutValBiDi(450,0,overduetot[0],M4Val,true,490);
         end else begin
           if (RepSpec.flags[2]!=0) and (nonblank(CUr.CurncyCode)) then begin
             OutValBiDi(450,0,overduetot[0],M4Val,true,490);
           end else begin
             OutValBiDi(450,0,overduetot[1],M4Val,true,490);
           end;
         end;
        EndFormat;
     end;
     if (currenttot[1]<>0) then begin
        StartFormat(15);
         OutString(320,0,USetStr(2520),true);
         if (nonblank(RepSpec.CurncyCode)) and (RepSpec.flags[2]==1) then begin
           OutVal(1,0,currenttot[0],M4Val,true);
         end else begin
           OutVal(1,0,currenttot[1],M4Val,true);
         end;
        EndFormat;
     end;
     if (notduetot[1]<>0) then begin
        StartFormat(15);
         OutString(320,0,USetStr(2521),true);
         if (nonblank(RepSpec.CurncyCode)) and (RepSpec.flags[2]==1) then begin
           OutValBiDi(450,0,notduetot[0],M4Val,true,490);
         end else begin
           if (RepSpec.ArtMode==0) then begin
             if (RepSpec.flags[2]==0) then begin
               OutValBiDi(480,0,notduetot[1],M4Val,true,520);
             end else begin
               OutValBiDi(450,0,notduetot[1],M4Val,true,500);
             end;
           end else begin
             OutValBiDi(450,0,notduetot[1],M4Val,true,490);
           end;
         end;
        EndFormat;
     end;
   end;
 end; 
 if (RepSpec.ArtMode==2) then begin
   if (CustOut==true) then begin
     Black_Divider(400,480);
     StartFormat(15);
      OutVal(480,0,AR1Sum,M4Val,true);
     EndFormat;
   end;
 end; 
 if (RepSpec.ArtMode==3) then begin
      if (AR1Sum==0) then begin goto L77; end;
       if (overduetot[1]!=0) then begin
        StartFormat(15);
        OutString(420,0,USetStr(2527),true);
        if (RepSpec.flags[2]!=0) and (nonblank(CUr.CurncyCode)) then begin
          OutValBiDi(480,0,overduetot[0],M4Val,true,520);
        end else begin
          OutValBiDi(480,0,overduetot[1],M4Val,true,520);
        end;
        EndFormat;
      end;  
      if (currenttot[1]<>0) then begin
        StartFormat(15);
         OutString(420,0,USetStr(2520),true);
         OutValBiDi(480,0,currenttot[1],M4Val,true,520);
        EndFormat;
      end;
      if (notduetot[1]<>0) then begin
        StartFormat(15);
         OutString(420,0,USetStr(2521),true);
         OutValBiDi(480,0,notduetot[1],M4Val,true,520);
        EndFormat;
      end;    
      if (overduetot[1]!=0) or (notduetot[1]<>0) or (currenttot[1]<>0) then begin        
        Gray_Divider(400,480);
      end;
      StartFormat(15);
      OutString(0,"DblCUVc",CUr.Code,false);
      OutString(100,0,CUr.Name,false);
      if (RepSpec.flags[2]!=0) and (nonblank(CUr.CurncyCode)) then begin
        OutValBiDi(380,0,CurSum,M4Val,true,420);
        OutString(385,0,CUr.CurncyCode,false);
        OutValBiDi(480,0,CurSum,M4Val,true,520);
      end else begin
        OutValBiDi(480,0,AR1Sum,M4Val,true,520);
      end;
      EndFormat;
      if (RepSpec.flags[2]!=0) and (nonblank(CUr.CurncyCode)) then begin
        Gray_Divider(350,480);
      end else begin
        Gray_Divider(400,480);
      end;
  end;
  overduetot[1] = blankval;
  overduetot[2] = blankval;
  overduetot[0] = blankval;
  notduetot[1] = blankval;
  notduetot[2] = blankval;
  notduetot[0] = blankval;
  currenttot[1] = blankval;
  currenttot[2] = blankval;
  currenttot[0] = blankval;
  if (RepSpec.ArtMode==5) then begin
    if (CustOut==true) then begin
      StartFormat(15);
      EndFormat;
    end;
  end; 
L77:;
  tot1Sum = AR1Sum + tot1Sum;
  tot2Sum = AR2Sum + tot2Sum;
  totCurSum = CurSum + totCurSum;

  ss[0] = s0 + ss[0];
  ss[1] = s1 + ss[1];
  ss[2] = s2 + ss[2];
  ss[3] = s3 + ss[3];
  ss[4] = s4 + ss[4];
  ss[5] = s5 + ss[5];
  ss[6] = s6 + ss[6];
  ss[7] = s7 + ss[7];
  ss[8] = sact + ss[8];

/*  
  ss0 = s0 + ss0;
  ss1 = s1 + ss1;
  ss2 = s2 + ss2;
  ss3 = s3 + ss3;
  ss4 = s4 + ss4;
  ss5 = s5 + ss5;
  ss6 = s6 + ss6;
  ss7 = s7 + ss7;
*/  
  ssb2[0] = ssb2[0] + s0b2;
  ssb2[1] = ssb2[1] + s1b2;
  ssb2[2] = ssb2[2] + s2b2;
  ssb2[3] = ssb2[3] + s3b2;
  ssb2[4] = ssb2[4] + s4b2;
  ssb2[5] = ssb2[5] + s5b2;
  ssb2[6] = ssb2[6] + s6b2;
  ssb2[7] = ssb2[7] + s7b2;
  ssb2[8] = ssb2[8] + sactb2;
/*  
  ss0b2 = s0b2 + ss0b2;
  ss1b2 = s1b2 + ss1b2;
  ss2b2 = s2b2 + ss2b2;
  ss3b2 = s3b2 + ss3b2;
  ss4b2 = s4b2 + ss4b2;
  ss5b2 = s5b2 + ss5b2;
  ss6b2 = s6b2 + ss6b2;
  ss7b2 = s7b2 + ss7b2;
*/  
  goto L22;
L88:;
  if (RepSpec.ArtMode!=10) then begin
    Gray_Divider(0,1);
  end;
  if ((RepSpec.ArtMode==2) or (RepSpec.ArtMode==5)) then begin
    tot = ss[0] + ss[1];
    tot = ss[2] + tot;
    tot = ss[3] + tot;
    tot = ss[4] + tot;
    tot = ss[5] + tot;
    tot = ss[6] + tot;
    tot = ss[7] + tot;
    tot = ss[8] + tot;
    totb2 = totb2 + ssb2[0];
    totb2 = totb2 + ssb2[1];
    totb2 = totb2 + ssb2[2];
    totb2 = totb2 + ssb2[3];
    totb2 = totb2 + ssb2[4];
    totb2 = totb2 + ssb2[5];
    totb2 = totb2 + ssb2[6];
    totb2 = totb2 + ssb2[7];
    totb2 = totb2 + ssb2[8];
if(testf)then begin		
    if (RepSpec.ArtMode==5) then begin
      PrintARAged(RepSpec,ss[8],ss[0],ss[1],ss[2],ss[3],ss[4],ss[5],ss[6],ss[7],blval,tot+TotOnAcc,nrofper,
                        ssb2[8],ssb2[0],ssb2[1],ssb2[2],ssb2[3],ssb2[4],ssb2[5],ssb2[6],ssb2[7],totb2);
    end else begin
      PrintARAged(RepSpec,ss[8],ss[0],ss[1],ss[2],ss[3],ss[4],ss[5],ss[6],ss[7],TotOnAcc,tot+TotOnAcc,nrofper,
                        ssb2[8],ssb2[0],ssb2[1],ssb2[2],ssb2[3],ssb2[4],ssb2[5],ssb2[6],ssb2[7],totb2);
    end;
  end;
  if ((RepSpec.flags[2]==1) and (RepSpec.ArtMode==2)) then begin goto L99; end;
//  if ((RepSpec.flags[2]==1) and (RepSpec.ArtMode==3)) then begin goto L99; end;
  if ((RepSpec.flags[2]==1) and (RepSpec.ArtMode==5)) then begin goto L99; end;
  
  if (RepSpec.ArtMode!=10) then begin
    PrintARReportTotals(RepSpec,Agedb.ActualInvoices,tot1Sum,Total1Due,Total1NotDue,TotOnAcc,tot2Sum,Total2Due,Total2NotDue,totCurSum,TotalCurDue,TotalCurNotDue,TotalCurrent);
    if (RepSpec.ArtMode==3) then begin
      if (RepSpec.flags[2]==1) then begin
        StartFormat(5);
        EndFormat;
        PrintCurTotalsRow(CurTotalsr,-1,290,450,-1,-1);
      end;
    end;
  end;
  
  if (RepSpec.ArtMode==4) or (RepSpec.ArtMode==6) then begin
    StartFormat(15);
    OutVal(320,0,totnow,M4Val,true);
    OutVal(400,0,totbooked,M4Val,true);
    OutVal(480,0,totdiff,M4Val,true);
    EndFormat;
    PrintCurTotalsRow(CurTotalsr,-1,150,240,-1,-1);
  end;
  if ((RepSpec.flags[18]!=0) and (RepSpec.ArtMode!=4) and (RepSpec.ArtMode!=6)) then begin
    ARRnPrintDebtorsAccounts(debaccs,debbal,debcnt);
  end; 
end;	
L99:;
  RETURN;
END;


global
procedure ARRn(record RcVc RepSpec)
BEGIN
  val tot1Sum;
  
  StartReportJob(USetStr(2430));
   PrintHeaderAR(RepSpec);
  EndHeader;  

  RunARRn(RepSpec,tot1Sum);
  EndJob;
  RETURN;
END;
