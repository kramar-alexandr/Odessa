external procedure SumBalRnVectors(string,LongInt,Boolean,vector val,vector val,vector val,vector val,vector val,vector val,vector Boolean,Array record UserDefRepLinesVc,Integer);
external procedure ListPerTrans(record RcVc);
external procedure FindAccSD(Date,var Date,var Boolean);
external procedure FindRepDefHeader(string,string,var string);
external function Boolean GetNextSep(string,var Integer,var string);
external procedure AGrHeader(record RcVc,Boolean,Boolean,Date);
external procedure SumListPerBal(string,Integer,var Array val,var Array val,var Array val,
                                 var Array val,var Array val,var Array val,Integer,var Array LongInt,Boolean);
external procedure AGrSumLine(record RcVc,Integer,string,string,string,
                              val,val,val,val,val,val,Boolean,val,Boolean,Boolean,string,LongInt,Boolean,Boolean);
external procedure GetUserDefRepDescription(record UserDefRepLinesVc,string,var string);
external procedure Get2WholePeriods(record RcVc,Date,Date,var string,var string);
external procedure GetNotStr(Integer,var string);
external procedure GetNext2Sep(string,var Integer,var string);
external procedure GetNextToken(string,var Integer,var string);
external function Boolean GetNextTokenReturn(string,var Integer,var string);
external procedure GetAccountDescription2(string,string,var string);
external procedure SumLine2(record RcVc,Boolean,string,string,string,var val,var val,var val,var val,var val,
                            var val,Boolean,val,Boolean,Date,Integer,LongInt,Boolean);
external function Boolean AccRuPerBal(record RcVc,Boolean,string,string,var val,var val,var val,var val,var val,var val,
                                      Integer,Boolean,Date,Date,Date);
external function Boolean AccObjTypePerBal(record RcVc,Boolean,string,string,var val,var val,var val,var val,var val,var val,
                                      Integer,Boolean,Date,Date,Date);
external procedure InitValArray(Integer,var Array val);
external procedure InitLongArray(Integer,var Array LongInt);


global
procedure ItHistProdRn(record RcVc RepSpec) 		
begin
	record ItemHistVc ItemHistr;
	boolean TrHs, testf;
	real v, vs;
	array string 255 TotCostStr;
	array Integer QtyStr, DepQtyStr;
	integer i, j, aQty, DepQty;
	
	
	StartReportNoHeaderJob("Ћтчет по истории товара");
	ItemHistr.ArtCode = RepSpec.f1;
	
	TrHs = true;
	i = 0;
	j = 0;
	while(loopkey("ArtCode",ItemHistr,1,TrHs)) begin
		testf = true;
		if(nonblank(RepSpec.f1) and ItemHistr.ArtCode!=RepSpec.f1)then begin TrHs = false; testf = false; end;
		if(ItemHistr.StockAffectf==0)then begin testf = false; end;
		if(testf)then begin
			if(ItemHistr.Qty>0)then begin
				TotCostStr[i] = ItemHistr.TotCostPrice;
				QtyStr[i] = ItemHistr.Qty;
				i = i+1;
			end;
			if(ItemHistr.Qty<0)then begin
				DepQtyStr[j] = ItemHistr.Qty;
				j = j+1;
			end;
		end;
	end;
	ResetLoop(ItemHistr);
	aQty = i;
	DepQty = j;
	j=0;
	for(i=0;i<aQty;i=i+1) begin
		if(QtyStr[i]<=0)then begin
			QtyStr[i+1] = QtyStr[i+1] + QtyStr[i];
			QtyStr[i] = 0;
		end;
		for(j=j;QtyStr[i]>0;j=j+1) begin
			QtyStr[i] = QtyStr[i] + DepQtyStr[j];
			if(QtyStr[i]<=0)then begin
				QtyStr[i+1] = QtyStr[i+1] + QtyStr[i];
				QtyStr[i] = 0;
			end;
		end;
	end;
	
	
	ResetLoop(ItemHistr);
	for(i=0;i<=aQty;i=i+1)begin
		v = 11;
		vs = 50;
		StartFormat(15);
			outstring(v,0,TotCostStr[i],false);
			outstring(v=v+vs,0,QtyStr[i],false);
		EndFormat;
	end;
	testf = true;
	TrHs = true;
	ItemHistr.ArtCode = RepSpec.f1;
	while(loopkey("ArtCode",ItemHistr,1,TrHs)) begin
	v = 11;
	vs = 50;
		if(nonblank(RepSpec.f1) and ItemHistr.ArtCode!=RepSpec.f1)then begin TrHs = false; testf = false; end;
		if (testf) then begin
			StartFormat(15);
				outstring(v,0,ItemHistr.ArtCode,false);
				outstring(v=v+vs,0,ItemHistr.FileName,false);
				outstring(v=v+vs,0,ItemHistr.Qty,false);
				outstring(v=v+vs,0,ItemHistr.TransDate,false);
				outstring(v=v+vs,0,ItemHistr.SerNr,false);
				outstring(v=v+vs,0,ItemHistr.Source,false);
				outstring(v=v+vs,0,ItemHistr.TotCostPrice,false);
				outstring(v=v+vs,0,ItemHistr.Location,false);
			EndFormat;
		end;
	end;
	ResetLoop(ItemHistr);
	endjob;
end;