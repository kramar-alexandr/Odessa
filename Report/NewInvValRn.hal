external function Boolean IsEnterprise();external function Boolean HasItemGroups();external function Boolean HasContactClassification();external function Boolean HasItemClassification();external procedure InvListVarieties(record RcVc,record INVc,string,string,string,string,record CostAccBlock,Boolean,var Boolean,                                    var Boolean,var string,var val,var val,var val,var val,roundmode,var val,string,vector val);external procedure HTConsigment(Integer, var string);external procedure FindStockValueAtPosition(string,string,string,var record PISVc);external procedure AddSupersessionsInvList(record RcVc,record INVc,string,record CostAccBlock,roundmode,string,var val,var val,var val);external function roundmode GetCostRoundMode(record RoundBlock);external function roundmode DefaultRoundMode();external procedure GetItemCostPrc(record INVc,record CostAccBlock,record ITVc,Integer,var val);external procedure PrintSerialNumbers_InvVal(record INVc,string,Integer,val,Date,string,Integer); external function val ConsigmentStockQty(string,string,Date);external function val FindCPPriceBackdated(Integer,record INVc,string,val,Date,Boolean);external function Integer ArtCodeCostPricePerLocation(string);external function val FindCostPriceSerialNumberBackDated(Integer,record INVc,string,string,val,val,Date,Boolean,Integer,Boolean,Integer,Integer);external function val GetStockQty(string,string,Date,Boolean);external procedure GetCostModel(record INVc,record CostAccBlock,var record ITVc,var Integer,var Integer,Boolean);external function Integer WAPerLocation(record INVc,record ITVc,record CostAccBlock);external function Integer ItemCostPerLocation(record INVc);external function val FindCostPriceLIFOBackDated(Integer,record INVc,string,string,val,val,Date,Boolean,Integer,Boolean,Integer,Integer,Integer);external function val FindCostPriceFIFOBackDated(Integer,record INVc,string,string,val,val,Date,Boolean,Integer,Boolean,Integer,Integer,Integer);external function val FindWAPriceBackdated(Integer,record INVc,string,val,Date,Boolean,Integer);external function Boolean ReadFirstItemInclClosed(string,var record INVc,Boolean,Boolean);external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);external function Boolean FindItemVAR(string,var string,var string,var string,var string);external function val GetStockQty2(string,string,Date,Boolean,Integer);external procedure HTArts(string, string, var string);external procedure HTDepartment(string,var string);external procedure HTArtGroup(string, var string);external procedure HTSupplier(string, var string);external procedure GetItemGroupDescription(string,var string);external procedure CalcSum(val,val,val,val,var val,Integer);external procedure FindStockValue2(record INVc,string,string,Integer,Date,Integer,Boolean,var val,var val,var val,Integer,Integer,Integer,Integer,Boolean,vector val);external procedure HTItemClass(string,var string);external procedure HTCustClassType(string,var string);external function Boolean SetInSet2(string,string);external procedure ItemClassTypef(string,string,var Boolean);external function Boolean FillItemVarArray(string,string,date,var array string,var array val,var Integer,var string,var string,var string,var string);//Edit***************************Sasha2,10:48 09.09.2014 {procedure LoopNewInvVal(record RcVc RepSpec,array string positions)begin  record INVc INr;  record ItemStatusVc ISr;  boolean TrHs,testf;  record PISVc PISr;  integer i,pos;  integer step;  val moq;  	step = 80/(positions.length + 1); // интервал для складских мест	  	TrHs = true;  	INr.Code = "";  	while (LoopMain(INr,1,TrHs)) begin  		testf = true;  		if (NonBlank(RepSpec.f1) and !SetInSet(INr.Code,RepSpec.f1)) then begin testf = false; end;  		if (RepSpec.flags[18]==0 and INr.Terminated<>0) then begin testf = false; end;  		if (INr.ItemType!=kItemTypeStocked) then begin testf = false; end;  		if (nonblank(RepSpec.f4) and SetInSet2(RepSpec.f4,INr.DispGroups)==false) then begin testf = false; end;  		if (testf) then begin				pos = 0; 				if(RepSpec.flags[0]==0)then begin					StartFormat(15);						OutString(pos,0,INr.Code,false);						OutString(pos+=25,0,INr.Name,false);            //Edit-------------------Vitalii 10:49 10.01.2018            OutString(pos+=65,0,ISr.RsrvQty,false);			//Edit----------------------Dima  10.03.2015						OutString(pos+=25,0,ISr.OrddOut,false);									//OutVal->OutString						OutString(pos+=20,0,ISr.Instock-ISr.RsrvQty,false);						OutString(pos+=20,0,ISr.Instock-ISr.OrddOut,false);//Edit----------------------Dima  10.03.2015						for(i=0;i<positions.length;i=i+1) begin						//Edit----------------------Dima  07.12.2015							PISr.ArtCode = INr.Code;							PISr.Position = positions[i];							PISr.Location = RepSpec.f2;							if (ReadFirstMain(PISr,3,true)) then begin			  									OutString(pos+=step,0,PISr.Instock,false);							end else begin								OutString(pos+=step,0,"",false);							end;						end;              //Edit-------------------Vitalii 10:49 10.01.2018						OutString(pos+=30,0,INr.DispGroups,false);						OutString(pos+=45,0,INr.BarCode,false);						OutString(pos+=35,0,INr.AlternativeCode,false);						ISr.Code = INr.Code;						if (NonBlank(RepSpec.f2)) then begin							ISr.Location = RepSpec.f2;						end else begin							ISr.Location = ";;;";						end;						ReadFirstMain(ISr,2,true);						OutVal(pos+=40,0,ISr.Instock,M45Val,false);						OutVal(pos+=25,0,INr.Weight,M45Val,false);						OutVal(pos+=25,0,INr.Weight*ISr.Instock,M45Val,false);						OutVal(pos+=25,0,INr.Volume,M45Val,false);						OutVal(pos+=25,0,INr.Volume*ISr.Instock,M45Val,false);						OutVal(pos+=25,0,INr.NetWeight,M45Val,false);						moq = blankval;						if(INr.AddUnittext2=="MOQ")then begin							moq = INr.AddUnitCoef2;						end;						if(INr.AddUnittext3=="MOQ")then begin							moq = INr.AddUnitCoef3;						end;						if(INr.AddUnittext4=="MOQ")then begin							moq = INr.AddUnitCoef4;						end;						if(INr.AddUnittext5=="MOQ")then begin							moq = INr.AddUnitCoef5;						end;						OutString(pos+=30,0,moq,false);														EndFormat;  			end else begin  				StartFormat(15);						OutString(pos,0,INr.Code,false);						OutString(pos+=25,0,INr.Name,false);						ISr.Code = INr.Code;						if (NonBlank(RepSpec.f2)) then begin							ISr.Location = RepSpec.f2;						end else begin							ISr.Location = ";;;";						end;						ReadFirstMain(ISr,2,true);						OutString(pos+=20,0,ISr.Instock-ISr.RsrvQty,false); 								EndFormat;  			end;		  	Gray_Divider(0,1);	  		end;	  	end;  	Black_Divider(2,1); 	  return;end; //Edit***************************Sasha2,10:48 09.09.2014 }global  //Edit***************************Sasha2,11:43 02.09.2014 {procedure NewInvValRn(record RcVc RepSpec)begin  record CostAccBlock CAb;  record UserVc User;  string 255 tstr;  Integer rw;  integer pos;  integer i; //Edit***************************Sasha2,13:03 03.09.2014  record PosVc Posr;//Edit----------------------Dima  07.12.2015  array string 30 positions;  boolean TrHs;  integer step;    BlockLoad(CAb);    User.Code = currentuser; //Edit***************************Sasha2,13:53 10.08.2017 {	readfirstmain(User,1,true);	if(nonblank(User.Location))then begin		RepSpec.f2 = User.Location;	end; //Edit***************************Sasha2,13:53 10.08.2017 }    if (nonblank(RepSpec.f6)) then begin		positions[0] = RepSpec.f6;  	if (blank(RepSpec.f2)) then begin	//let Location = POSVc.Location			Posr.Code = RepSpec.f6;			if (ReadFirstMain(Posr,1,true)) then begin				RepSpec.f2 = Posr.Location;			end;		end;  			end else begin		TrHs = true;  	Posr.Location = RepSpec.f2;  	While(LoopKey("Location",Posr,1,TrHs)) begin  		if (Posr.Location != RepSpec.f2) then begin TrHs = false; end;  		if (TrHs) then begin				positions[positions.length] = Posr.Code;			end;		end;	end;	step = 80/(positions.length + 1); // интервал для складских мест        StartReportJob(USetStr(2322) & " (modified)");  if (RepSpec.PocketPC == 0) then begin    rw = 1;    if ((nonblank(RepSpec.f1)) or (blank(RepSpec.AccStr))) then begin      HTArts(RepSpec.f1,RepSpec.f1,tstr);      Header(rw,tstr,1);      rw = rw + 1;    end;    if (nonblank(RepSpec.f2)) then begin      tstr = USetStr(2768) & RepSpec.f2;    end else begin      tstr = USetStr(8961);    end;    Header(rw,tstr,1);    rw = rw + 1;    if (nonblank(RepSpec.f6)) then begin      tstr = USetStr(2779) & " " & RepSpec.f6;      Header(rw,tstr,0);    end;    if (HasItemClassification) then begin      HTItemClass(RepSpec.f4,tstr);      if (nonblank(tstr)) then begin        Header(rw,tstr,1);        rw = rw + 1;      end;     end;  end else begin  end;  EndHeader;  if (blank(RepSpec.f5) and (RepSpec.flags[2]==4)) then begin    StartFormat(15);    OutString(140,0,USetStr(20098),false);    EndFormat;      goto LInvValRn;  end;    	pos = 0;	if(RepSpec.flags[0]==0)then begin		StartFormat(15);		OutString(pos,0,USetStr(2302),false); //код		OutString(pos+=25,0,USetStr(2303),false); //найм.    //Edit-------------------Vitalii 10:50 10.01.2018    OutString(pos+=65,0,USetStr(11540),false); //резерв		OutString(pos+=25,0,USetStr(31020),false); //в счетах		OutString(pos+=20,0,USetStr(31021),false); //Дост.с учет.рез-ва		OutString(pos+=20,0,USetStr(31022),false); //ДДост.с учет.счетов		for(i=0;i<positions.length;i=i+1) begin				OutString(pos+=step,0,positions[i],false);		end;    //Edit-------------------Vitalii 10:50 10.01.2018		OutString(pos+=30,0,USetStr(9048),false); //классиф.		OutString(pos+=45,0,USetStr(31016),false);//штрихкод		OutString(pos+=35,0,USetStr(31017),false);//код пост.		OutString(pos+=40,0,USetStr(2330),false);//остаток		OutString(pos+=25,0,USetStr(14533) & "," & USetStr(31018),false);//вес за ед.		OutString(pos+=25,0,USetStr(14533) & "," & USetStr(31019),false);//вес общ.		OutString(pos+=25,0,USetStr(5506) & "," & USetStr(31018),false);//объем за ед.		OutString(pos+=25,0,USetStr(31019),false);//netto		OutString(pos+=25,0,USetStr(12738),false);//netto		OutString(pos+=30,0,"MOQ",false); //резерв				EndFormat;  end else begin  	StartFormat(15);		OutString(pos,0,USetStr(2302),false); //код		OutString(pos+=25,0,USetStr(2303),false); //найм.		OutString(pos+=20,0,USetStr(31021),false); //Дост.с учет.рез-ва		EndFormat;  end;  Gray_Divider(0,1);   LoopNewInvVal(RepSpec,positions);  LInvValRn:;   EndJob;  return;end;  global  //Edit***************************Sasha2,11:43 02.09.2014 {procedure NewInvValManRn(record RcVc RepSpec)begin	record UserVc User;		User.Code = currentuser;	readfirstmain(User,1,true);	if(nonblank(User.Location))then begin		RepSpec.f2 = User.Location;	end;	RepSpec.flags[0]=1;	NewInvValRn(RepSpec);return;end;