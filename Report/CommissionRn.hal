external function val AbsoluteVal(val);
external procedure ExtractObj(string,var Integer,var string);
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
external procedure GetBaseCurncy(Integer,var string);
external function roundmode SetRoundModeD(Integer);


SetLangMode(LangRussian,"RUS",0);


global function string 100 GetLocationOfPosition(string posCode)
begin
record PosVc Posr;
string 50 location;

	location = "";
	Posr.Code = posCode;
	if (ReadFirstMain(Posr,1,true)) then begin
		location = Posr.Location;
	end;
	GetLocationOfPosition = location;
return;
end;

procedure PrintReportHeader(array integer tab, string locations, string positions)
begin
	string 50 locName;

	if (nonblank(locations)) then begin
		locName = locations;
	end;	
	if (nonblank(positions)) then begin
		locName = positions;
	end;
	if (blank(locName)) then begin
		locName = "Все склады";
	end;

	locName = " (" & locName & ")";

	StartFormat(15);
		OutString(tab[0],0,"Дата",false);
		OutString(tab[1],0,"Сч/ф",false);
		OutString(tab[2],0,"Склад",false);
		OutString(tab[3],0,"Место",false);
		OutString(tab[4],0,"Код товара",false);
		OutString(tab[5],0,"Наименование",false);
		OutString(tab[6],0,"Кол-во",false);
		OutString(tab[7],0,"Цена розн.",false);
		OutString(tab[8],0,"Цена продажи",false);
		OutString(tab[24],0,"Цена комиссии",false);
		OutString(tab[9],0,"Себес-ть за ед.",false);
		OutString(tab[10],0,"Себес-ть продажи",false);
		OutString(tab[11],0,"Сумма продажи",false);
		OutString(tab[12],0,"Остаток на начало" & locName,false);
		OutString(tab[13],0,"Остаток на конец" & locName,false);
		OutString(tab[14],0,"Перемещение на склад" & locName,false);
		OutString(tab[15],0,"Перемещение со склада" & locName,false);
		OutString(tab[16],0,"FIKS",false);
		OutString(tab[17],0,"Комитент",false);
		OutString(tab[18],0,"TYPE",false);
		OutString(tab[19],0,"BRAND",false);
		OutString(tab[20],0,"Оплачено наличными",false);
		OutString(tab[21],0,"Оплачено кр. картой",false);
		OutString(tab[22],0,"Оплачено сертификатом",false);
	EndFormat;	
		
end;



procedure GetClassifications(string classifications, var string brandname, var string typename,var string comitent)
begin
	record DIVc DIr;
	string 100 class;
	integer pos;
  
  brandname = "";
  typename = "";
  comitent = "";
  
  	pos = 0;  
  	class = "";  
  	ExtractObj(classifications,pos,class);
  	while(nonblank(class)) begin
  	  DIr.Code = class;
  	  readfirstmain(DIr,1,true);
  	  if(DIr.CType=="TYPE")then begin
  	    typename = DIr.LongName;
  	  end;
  	  if(DIr.CType=="BRND_UKR" or DIr.CType=="BRND_WORLD")then begin
  	    brandname = DIr.Name;
  	  end;
  	  if(DIr.CType=="KOMITENT")then begin
  	    typename = DIr.Code;
  	  end;
  	  if (nonblank(brandname) and nonblank(typename)) then begin
				goto LGetClassifications;
			end;
  	  ExtractObj(classifications,pos,class);
  	end; 

  LGetClassifications:; 
end;



procedure GetStockBalanceOnPeriod(record SalesDataVc SalesData,string locations,string positions,date startperiod, date endperiod, var val balanceBeforePeriod, var val balanceAfterPeriod,var val stockIn,var val stockOut)
begin
record ItemHistVc IHr;
record ItemStatusVc ISr;
record PISVc PISr;
val currentBalance,historybalance;
string 50 keyloop;
integer loop;
boolean testf,TrHs,balanceAfterFound;
longint count;

	currentBalance = 0;
	historybalance = 0;
	balanceBeforePeriod = 0;
	balanceAfterPeriod = 0;
	stockIn = 0;
	stockOut = 0;
	keyloop = "ArtCode";
	loop = 2;
	

	if (blank(positions)) then begin
		ISr.Code = SalesData.ArtCode;
		if (nonblank(locations)) then begin
			ISr.Location = locations;
		end else begin	
			ISr.Location = ";;;";
		end;
		if (ReadFirstMain(ISr,2,true)) then begin
			currentBalance = ISr.Instock;
		end;
	end else begin
		PISr.ArtCode = SalesData.ArtCode;
		PISr.Location = locations;
		PISr.Position = positions;
		if (ReadFirstMain(PISr,3,true)) then begin
			currentBalance = PISr.Instock;
		end;
	end;
	
	if (nonblank(locations)) then begin
		IHr.Location = locations;
		keyloop = "ArtCodeLoc";
		loop = 3;		
	end;
	
	
	IHr.ArtCode = SalesData.ArtCode;
	IHr.TransDate = AddYear(CurrentDate,10);
	TrHs = true;
	balanceAfterFound = false;
	
	While(LoopBackKey(keyloop,IHr,loop,TrHs)) begin
		testf = true;
		if (IHr.TransDate<=endperiod and !balanceAfterFound) then begin balanceAfterPeriod = currentBalance - historybalance; balanceAfterFound = true; end;
		
		if(IHr.TransDate<startperiod) then begin TrHs=false; testf=false; end;
		if (IHr.ArtCode!=SalesData.ArtCode) then begin TrHs=false; testf=false; end;
		if (nonblank(locations) and IHr.Location!=locations) then begin testf=false; TrHs=false; end;		
		if (nonblank(positions) and (IHr.Position!=positions)) then begin testf = false; end;		
		if (testf and  IHr.StockAffectf!=0) then begin
			historybalance = historybalance +  IHr.Qty;
			
			if (IHr.FileName=="StockMovVc" and IHr.TransDate<=endperiod) then begin
				if (IHr.Qty>0) then begin 
					stockIn = stockIn + IHr.Qty;
				end else begin
					stockOut = stockOut - IHr.Qty;
				end;					 
			end;	
					
		end;
	end;	
	balanceBeforePeriod = currentBalance - historybalance;
//LogText(0,currentBalance & "      before "  & balanceBeforePeriod & "   after  " & balanceAfterPeriod & "   hist  " & historybalance);
end;








//Отчет основан на отчете по продажам, читается регистр SalesDataVc
//все цифры выводятся в UAH
global
procedure  CommissionRn(record RcVc RepSpec)
begin
record SalesDataVc SalesData;
date startDate,endDate;
string 20 keyloop,baseCurncy;
array integer tab;
boolean TrHs,testf;
Integer rw,rwcnt,i,loop;
string 200 locations,positions;
val rate;
val balanceAfterPeriod,balanceBeforePeriod,stockIn,stockOut;
string 100 brand,type,comitent;
longint tick1,tick2,s1,s2,s3;
vector val balanceBefore,balanceAfter,ToStock,FromStock;
vector boolean checkItem;
array string 50 combarr;

	startDate = RepSpec.sStartDate;
	endDate = RepSpec.sEndDate;
	locations = RepSpec.f1;
	positions = RepSpec.f2;
	
	if (nonblank(positions) and blank(locations)) then begin
		locations = GetLocationOfPosition(positions);
	end;
	
	GetBaseCurncy(1,baseCurncy);

	StartReportJob("Отчет по продажам");
	rw=1;
	Header(rw,"Период с " & startDate & "  по  " & endDate,1);
	rw=rw+1;
	if (NonBlank(locations)) then begin
		Header(rw,"Склад: " & locations,1);
		rw=rw+1;
	end;

	EndHeader;
	
	tab[0] = 0;			tab[1] = 20;		tab[2] = 50;		tab[3] = 70;
	tab[4] = 90;		tab[5] = 140;		tab[6] = 230;		tab[7] = 260;
	tab[8] = 310;		tab[9] = 340;		tab[10] = 370;	tab[11] = 400;
	tab[12] = 430;	tab[13] = 460;	tab[14] = 460;	tab[15] = 460;
	tab[16] = 460;	tab[17] = 460;	tab[18] = 460;	tab[19] = 460;
	tab[20] = 460;	tab[21] = 460;	tab[22] = 460;	tab[23] = 460;
	tab[24] = 310;
	
	PrintReportHeader(tab,locations,positions);
	
	
	keyloop = "DateCode";
	loop = 2;
		

	TrHs=true;
	SalesData.InvDate = startDate;	
	
	While (LoopKey(keyloop,SalesData,loop,TrHs)) begin
		testf = true;
		if (nonblank(locations) and SetInSet(SalesData.Location,locations)==false) then begin testf=false; end;
		if (nonblank(positions) and SetInSet(SalesData.Position,positions)==false) then begin testf=false; end;
		if (SalesData.InvDate>endDate) then begin TrHs=false; testf=false; end;
		if(testf)then begin
			GetClassifications(SalesData.DispGroups,brand,type,comitent);
			//logtext(0,SalesData.DispGroups);
			if(nonblank(RepSpec.f3) and !setinset(RepSpec.f3,SalesData.DispGroups))then begin
				testf = false;
			end;	
		end;
		
		if (testf) then begin	
				if (checkItem[SalesData.ArtCode]==false) then begin
				
					GetStockBalanceOnPeriod(SalesData,locations,positions,startDate,endDate,balanceBeforePeriod,balanceAfterPeriod,stockIn,stockOut);

					checkItem[SalesData.ArtCode] = true;
					balanceBefore[SalesData.ArtCode] = balanceBeforePeriod;
					balanceAfter[SalesData.ArtCode] = balanceAfterPeriod;
					ToStock[SalesData.ArtCode] = stockIn;
					FromStock[SalesData.ArtCode] = stockOut;
				
				end;	
				
				rate = SalesData.Rate;
			
				StartFormat(15);
					OutString(tab[0],0,SalesData.InvDate,false);
					OutString(tab[1],0,SalesData.InvNr,false);
					OutString(tab[2],0,SalesData.Location,false);
					OutString(tab[3],0,SalesData.Position,false);
					OutString(tab[4],0,SalesData.ArtCode,false);
					OutString(tab[5],0,SalesData.Spec,false);
					OutString(tab[6],0,SalesData.Quant,false);
					OutString(tab[7],0,SalesData.Price * rate,false);
					OutString(tab[8],0,round(SalesData.Sum * rate/SalesData.Quant,SetRoundModeD(2)),false);
					OutString(tab[24],0,SalesData.CommisionPrice,false);
					OutString(tab[9],0,SalesData.UnitCost * rate,false);
					OutString(tab[10],0,SalesData.Cost * rate,false);
					OutString(tab[11],0,SalesData.Sum * rate,false);
					//tick1 = GetCurTick;
					OutString(tab[12],0,balanceBefore[SalesData.ArtCode],false);
					OutString(tab[13],0,balanceAfter[SalesData.ArtCode],false);
					OutString(tab[14],0,ToStock[SalesData.ArtCode],false);
					OutString(tab[15],0,FromStock[SalesData.ArtCode],false);	
				//tick2 = GetCurTick;
				//s3=s3+(tick2-tick1);									
					if (SalesData.ItemGroup=="FIKS") then begin
						OutString(tab[16],0,"да",false);
					end else 	begin
						OutString(tab[16],0,"нет",false);		
					end;		
					OutString(tab[17],0,SalesData.Komitent,false);
					OutString(tab[18],0,type,false);
					OutString(tab[19],0,brand,false);			
					OutString(tab[20],0,SalesData.PayedByCash,false);
					OutString(tab[21],0,SalesData.PayedByCCard,false);
					OutString(tab[22],0,SalesData.PayedByGift,false);		
					
				EndFormat;	
		end;	
	end;
	
	
	//LogText(0,"classifications  " & s1);
	//LogText(0,"history  " & s2);
	//LogText(0,"vectors  " & s3);
	
	
	
	EndJob;
end;


procedure GetPriceByBackDateSales(date frdate, date td, record ConsSaleVc ConsSaler, integer rwnum)
begin
	record ItemHistVc IHr,IH2r;
	record ItemStatusVc ISr;
	val qty,remqt,sdrqty;
	row ConsSaleVc ConsSalerw;
	boolean testf,TrHs,testf2,TrHs2;
	record SalesDataVc SDr,SD2r;
	record IVVc IVr;
	row IVVc IVrw;
	
	if(rwnum>-1)then begin
		matrowget(ConsSaler,rwnum,ConsSalerw);
		
		IH2r.FileName = "ConsSaleVc";
		IH2r.TransNr = ConsSaler.SerNr;
		IH2r.Row = rwnum;
		TrHs = true;
		while(loopkey("FNTransNr",IH2r,3,TrHs))begin
			testf = true;
			if(IH2r.FileName!="ConsSaleVc")then begin testf = false; TrHs = false; end;
			if(IH2r.TransNr!=ConsSaler.SerNr)then begin testf = false; TrHs = false; end;
			if(IH2r.Row!=rwnum)then begin testf = false; TrHs = false; end;
			
			if(testf)then begin
				logtext(0,"  *** IHR " & IH2r.ArtCode & " " & IH2r.Qty);
				remqt = -IH2r.Qty;
				while(remqt>0)begin
					logtext(0,"while1 " & IH2r.ArtCode & " " & remqt & " sdrqty " & sdrqty);
					if(sdrqty<=0 and remqt>0)then begin
						SDr.ArtCode = IH2r.ArtCode;
						SDr.InvDate = frdate;
						SDr.Location = ConsSaler.Location;				
						TrHs2 = true;
						while(loopkey("LocationCodeDate",SDr,3,TrHs2))begin
							testf2 = true;
							if(SDr.ArtCode!=IH2r.ArtCode)then begin testf2 = false; TrHs2 = false; end; logtext(0,"1 " & testf2);
							if(SDr.InvDate>td)then begin testf2 = false; TrHs2 = false; end;logtext(0,"2 " & testf2);
							if(SDr.Location!=ConsSaler.Location)then begin testf2 = false; TrHs2 = false; end;logtext(0,"3 " & testf2);
							if(SDr.Quant<0)then begin testf2 = false; end;logtext(0,"4 " & testf2);
						
							logtext(0,"     SD* " & SDr.ArtCode & " inv " & SDr.Quant);
							if(TrHs==false)then begin
								remqt = 0;
							end;
							if(testf2)then begin
								
								sdrqty = SDr.Quant;
								TrHs2 = false;
								RecordCopy(SD2r,SDr);
								IVr.SerNr = SDr.InvNr;
								if(readfirstmain(IVr,1,true))then begin
									matrowget(IVr,SDr.RowNr,IVrw);
								end;
								logtext(0,"     SD " & SDr.ArtCode & " inv " & SDr.Quant & " sdrqty " & sdrqty);
							end;
						end;
					end;
					if(sdrqty>0)then begin
						if(remqt>sdrqty)then begin
							StartFormat(15);
								outstring(0,0,IHr.Location,false);
								outstring(0,0,ConsSaler.Comitent,false);
								outstring(0,0,IH2r.ArtCode,false);
								outstring(0,0,SD2r.Spec,false);
								outstring(0,0,IVrw.Price,false);
								outstring(0,0,IH2r.TotCostPrice,false);
								outstring(0,0,sdrqty,false);
								outstring(0,0,IVrw.Price * sdrqty * (100-IVrw.vRebate)/100,false);
								outstring(0,0,IH2r.TotCostPrice * sdrqty,false);
								outstring(0,0,SD2r.InvDate,false);
								outstring(0,0,SD2r.CustCode,false);
								outstring(0,0,IVr.Addr0,false);
								outstring(0,0,SD2r.InvNr,false);
							endformat;
							remqt = remqt - sdrqty;
							sdrqty = 0;
							logtext(0,"while2 " & IH2r.ArtCode & " " & remqt & " sdrqty " & sdrqty);
						end else begin
							StartFormat(15);
								outstring(0,0,IHr.Location,false);
								outstring(0,0,ConsSaler.Comitent,false);
								outstring(0,0,IHr.ArtCode,false);
								outstring(0,0,SD2r.Spec,false);
								outstring(0,0,IVrw.Price,false);
								outstring(0,0,SD2r.CommisionPrice,false);
								outstring(0,0,sdrqty,false);
								outstring(0,0,IVrw.Price * sdrqty * (100-IVrw.vRebate)/100,false);
								outstring(0,0,SD2r.CommisionPrice * sdrqty,false);
								outstring(0,0,SD2r.InvDate,false);
								outstring(0,0,SD2r.CustCode,false);
								outstring(0,0,IVr.Addr0,false);
								outstring(0,0,SD2r.InvNr,false);
							endformat;
							sdrqty = sdrqty - remqt;
							remqt = 0;
							logtext(0,"while3 " & IH2r.ArtCode & " " & remqt & " sdrqty " & sdrqty);
						end;	
					end;
				end;			
			end;
		end;
	
	end;
		
return;
end;

global procedure ComissionSalesRn(record RcVc RepSpec)
begin
	record ConsSaleVc ConsSaler;
	row ConsSaleVc ConsSalerw;
	integer mtrw,i,acnt;
	boolean testf,TrHs;
	record ItemHistVc IHr,IH2r;
	array val aQty,aPrice,aSum;
	
	startreportnoheaderjob("Отчет по продажам комисии");
	
	StartFormat(15);
		outstring(0,0,"Склад",false);
		outstring(0,0,"Комитент",false);
		outstring(0,0,"Товар",false);
		outstring(0,0,"Название",false);
		outstring(0,0,"Цена продажи",false);
		outstring(0,0,"Комиссии",false);
		outstring(0,0,"Кол-во",false);
		outstring(0,0,"Сумма продажи",false);
		outstring(0,0,"Сумма комиссии",false);
		outstring(0,0,"Дата продажи",false);
		outstring(0,0,"Клиент",false);
		outstring(0,0,"Имя",false);
		outstring(0,0,"№ сч/ф",false);
	endformat;
	
	TrHs = true;
	ConsSaler.TransDate = RepSpec.sStartDate;
	while(loopkey("TransDate",ConsSaler,1,TrHs))begin
		testf = true;
		if(ConsSaler.TransDate<RepSpec.sStartDate)then begin TrHs = false; testf = false; end;
		if(nonblank(RepSpec.f1) and RepSpec.f1!=ConsSaler.Location)then begin testf = false; end;
		if(nonblank(RepSpec.f2) and RepSpec.f2!=ConsSaler.Comitent)then begin testf = false; end;
		if(ConsSaler.OKFlag==0)then begin testf = false; end;
		
		if(testf)then begin
			mtrw = matrowcnt(ConsSaler);
			For(i=0;i<mtrw;i=i+1) begin
	  		matrowget(ConsSaler,i,ConsSalerw);
	  		logtext(0,ConsSalerw.ArtCode & "==START ART Code");
	  		GetPriceByBackDateSales(RepSpec.sStartDate,RepSpec.sEndDate,ConsSaler,i);
			end; 
		end;
	end;
	
	endjob;

return;
end;