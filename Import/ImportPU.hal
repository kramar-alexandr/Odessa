external function Boolean GetItemPurchasePriceDiscount(string,string,Date,string,string,val,string,string,string,string,Integer,Boolean,val,val,val,val,val,var record INVc,var record PIVc,var Boolean,var val,var string,var val,var string,var string,var Boolean,var string);
external procedure GetCurncyRoundoff(string,string,string,var roundmode,var roundmode,var roundmode);
external procedure PUCalcCostPrice(string,val,Integer,Integer,string,string,
                                   val,val,val,val,val,
                                   val,val,val,val,val,val,
                                   string,var val,val,var val,string,Integer);
external function string 255 FillupTaxMatrix(Integer,string,string,string,string,string,var record TaxMatrixVc);
external procedure PUCalcPerc(val,string,var val);
external procedure DivPIFactor(val,val,var val);
external procedure GetItemVATCode(string,Integer,var string,Boolean);
external function roundmode GetCostRoundMode(record RoundBlock);
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
external function Boolean GetFirstPurchaseItem(string,string,string,var record PIVc);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function string 255 FindINObjects(string,string);
external function roundmode SetRoundModeD(Integer);
external function roundmode DefaultRoundMode();
remote function Boolean PUVc_PasteArtCode(var record PUVc,Integer,var string,var string);
external procedure FindPUStockAcc(string,record CostAccBlock,string,string,string,record INVc,Integer,var string,var string,Boolean);
external procedure PUSumUp(var record PUVc);


SetLangMode(LangRussian,"RUS",0);


procedure PUVc_FillRow(var record PUVc PUr,Integer rownr)		//Edit-----------Dima 25.12.2014
BEGIN
  Boolean res;
  record CostAccBlock CostAccRec;
  record PIVc PIr;
  record INVc INr;
  row PUVc PUrw;
  Boolean chrsum;
  string 60 sz,msk,mskrep,pcstr,tstr;
  val t,p,s,t2;
  record SysFormatBlock SFb;
  string 200 varsubset,location;
  Boolean infoundf;
  record RoundBlock Roundb;
  string 20 stockacc,purchacc;
  record LocationVc Locr;
  record MainStockBlock MSb;
  Boolean nomoreremotecalls,pifound;
  record TaxMatrixVc TMr;
  string 255 taxtemplatecode,vatcode,descstr;
  val price,reb;
  
  MatRowGet(PUr,rownr,PUrw); 

  infoundf = GetItemPurchasePriceDiscount(PUr.VECode,PUr.Location,PUr.TransDate,PUr.CurncyCode,PUrw.ArtCode,PUrw.Quant,
                                   PUr.Location,"","","",0,true,
                                   PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,
                                   INr,PIr,pifound,price,descstr,reb,vatcode,purchacc,nomoreremotecalls,taxtemplatecode);
  if (infoundf) then begin
    BlockLoad(SFb);
    BlockLoad(CostAccRec);    
    BlockLoad(Roundb);    
    BlockLoad(MSb);
    Locr.Code = PUr.Location;
    if (blank(Locr.Code)) then begin
      Locr.Code = MSb.MainStock;
    end;
    ReadFirstMain(Locr,1,true);

    pcstr = "";
    if (GetFirstPurchaseItem(PUrw.ArtCode,PUr.Location,PUr.VECode,PIr)) then begin
      if (PIr.CurncyCode==PUr.CurncyCode) then begin
		if (blank(PUrw.UPrice)) then begin
     	   PUrw.UPrice = PIr.PurPrice;
		   p = PIr.PurPrice;
		end else begin
		   p =  PUrw.UPrice;
		end;
        
      end else begin
        CurValToOtherCur(PUr.TransDate,PIr.CurncyCode,PIr.PurPrice,PUr.CurncyCode,t,GetCostRoundMode(Roundb));
        PUrw.UPrice = t;  
        p = PUrw.UPrice;
      end;          
      PUrw.CountryOfOrg = PIr.OrgCountry;
      PUrw.CustomsCost = PIr.PurchaseCost;
      PUrw.VEItemCode = PIr.VEItemCode;
      PUrw.VEUnit = PIr.VEUnit;
      PUrw.CountryOfOrg = PIr.OrgCountry;
      if (INr.PriceFactor!=0) then begin
        p = p/INr.PriceFactor;
      end;
    end else begin
      PUrw.Spec = INr.Name;
		if (blank(PUrw.UPrice)) then begin
		      PUrw.UPrice = INr.InPrice;
			 p = INr.InPrice;
		end else begin
		      p = PUrw.UPrice;
		end;
      if (INr.PriceFactor!=0) then begin
        p = p/INr.PriceFactor;
      end;
      p = DivRateToBase1(PUr.CurncyCode,p,PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,GetCostRoundMode(Roundb));
    end; 
    PUrw.VATCode = PUr.VEVATCode;    
    if (blank(PUrw.VATCode)) then begin
      GetItemVATCode(PUrw.ArtCode,PUr.ExportFlag,tstr,false);
      PUrw.VATCode = tstr;
    end;
    PUrw.TaxTemplateCode = FillupTaxMatrix(1,PUr.BranchID,PUr.VECode,"","",taxtemplatecode,TMr);
    PUrw.Coefficient = INr.UnitCoefficient;
    PUrw.InPrice = INr.InPrice;
    PUrw.ArtCode = INr.Code;
    PUrw.Spec = INr.Name;
    PUrw.Objects = FindINObjects(INr.Objects,INr.Group);
    PUrw.UPrice = p;
    PUrw.UnitXval = INr.Width;
    PUrw.UnitYval = INr.Height;
    PUrw.UnitZval = INr.Depth;
	PUrw.Volume = INr.Volume;
	PUrw.Weight = INr.Weight;
    PUrw.UnitCode = INr.Unittext;
    location = PUrw.Location;
    if (blank(location)) then begin
      location = PUr.Location;
    end;
    if (Locr.RequirePos!=0) then begin
      PUrw.PosCode = Locr.WHMDefPUPosCode;
    end;

    t2 = MulRateToBase1(PUr.CurncyCode,p,PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,GetCostRoundMode(Roundb));
    PUCalcPerc(t2,PUrw.CustomsCost,t2);
    pcstr = ValToString(t2,M45Val,SFb.thousSep,SFb.decimalPt,0);
    PUrw.CustomsCost = pcstr;
    PUrw.BasePrice = INr.UPrice1;
    tstr = INr.ExtraCost;
    PUrw.Extra = tstr;
    PUrw.PIFactor = PIr.PIFactor;
    PUrw.StockType = PIr.DefStockType;
    if (PUrw.PIFactor!=0) then begin
      PUrw.UPrice = PUrw.UPrice/PUrw.PIFactor;
    end;
    DivPIFactor(PUrw.Quant,PUrw.PIFactor,t);
    PUrw.VEQuant = t;
    
    if (blank(PUrw.Location)) then begin
      FindPUStockAcc(PUr.VECode,CostAccRec,PUrw.CostAcc,PUrw.CredAcc,PUr.Location,INr,PUrw.StockType,stockacc,purchacc,true);
    end else begin
      FindPUStockAcc(PUr.VECode,CostAccRec,PUrw.CostAcc,PUrw.CredAcc,PUrw.Location,INr,PUrw.StockType,stockacc,purchacc,true);
    end;
    PUrw.CostAcc = stockacc;
    PUrw.CredAcc = purchacc;

    PackRowFieldMatrix(PUrw,"TaxMatrix",TMr);
    MatRowPut(PUr,rownr,PUrw);
    chrsum = true;
    res = true;
  end;
  if (chrsum) then begin
    PUCalcCostPrice(PUrw.ArtCode,PUrw.UPrice,PUr.InclVAT,PUr.NoTAXonVAT,PUrw.Extra,PUr.CurncyCode,
                    PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,
                    PUrw.ShipCost,PUrw.RowCost1,PUrw.RowCost2,PUrw.RowCost3,PUrw.RowCost4,PUrw.RowCost5,
                    PUrw.CustomsCost,p,PUrw.Quant,s,PUrw.VATCode,PUr.ExportFlag);
    PUrw.CostPrice = p;
    PUrw.Sum = s;
  end;
  MatRowPut(PUr,rownr,PUrw);    

  RETURN;
END;




global
updating procedure PUImportIn()//   Edit-------------------------------------------Dima    23.12.2014  
begin
  record PUVc PUr,PU2r;
  row PUVc PUrw;
  record LocationVc Locr;
  string 50 location,curLoc, artcode, quant,price;
  Integer pucnt;

	pucnt =0;

	while (TestEOF()==false) begin	

		location = ImportField;
		artcode = ImportField;

		if ((location == curLoc) and (pucnt < 999) and nonblank(artcode)) then begin	//заполнение таблицы данными

			quant = ImportField;
			price = ImportField;
			PUrw.ArtCode = artcode;
			PUrw.UPrice = StringToVal(price,M45Val);
			PUrw.Quant = StringToVal(quant,M4UVal);
			MatRowPut(PUr,pucnt,PUrw);
			PUVc_FillRow(PUr,pucnt);
			pucnt= pucnt + 1;	
		
		end else begin			//создание новой PU записи

			if (NonBlank(curLoc)) then begin			
				PUSumUp(PUr);
				RecordInsert(PUr,true);
			end;

			Locr.Code = location;

			if (nonblank(location) and ReadFirstMain(Locr,1,true) and nonblank(artcode)) then begin			
				
				RecordNew(PUr);				
  				PUr.SerNr = NextSerNr("PUVc",PUr.TransDate,-1,false,"");  		
				pucnt = 0;
						
				quant = ImportField;
				price = ImportField;
				        		
				PUr.Location = location;
          		PUrw.ArtCode = artcode;
				PUrw.UPrice = StringToVal(price,M45Val);
				PUrw.Quant = StringToVal(quant,M4UVal);
				MatRowPut(PUr,pucnt,PUrw);
				PUVc_FillRow(PUr,pucnt);
				pucnt= pucnt + 1;          		
				curLoc = location;
			end;			
				
		end;
		
		if (NextImportLine(true)) then begin end;
	end;

	if (pucnt>0) then begin	//добавление последней записи
 			PUSumUp(PUr);
			RecordInsert(PUr,true);	
	end;

return;
end;

global updating procedure ImportRawItems()
begin
string 200 artcode,name,coeftext;
integer coef;
record INVc INr;
	
	while (TestEOF()==false) begin
		artcode = "";
		coeftext = "";
		name = "";
		coef = 0;
		
		artcode = ImportField;
		coeftext = ImportField;
		name = ImportField;
		if(nonblank(coeftext))then begin
			coef = evaltoval(coeftext);
		end;
		
		INr.Code = artcode;
		if(readfirstmain(INr,1,true)==false)then begin
			recordNew(INr);
			INr.Code = artcode;
			INr.UnitCoefficient = coef;
			INr.Name = name;
			if(nonblank(name))then begin
				INr.Name = "blank";
			end;
			recordstore(INr,true);
		end else begin
			if(INr.UnitCoefficient<coef)then begin
				INr.UnitCoefficient=coef;
			end;
			if(nonblank(name))then begin
				INr.Name = name;
			end;
		end;
		
		if (NextImportLine(true)) then begin end;
	end;
return;
end;