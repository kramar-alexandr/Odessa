remote procedure SHVc_PasteDelCountry(var record SHVc,string);
remote function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
remote procedure SHVc_PasteShip(var record SHVc,var Integer);
external procedure WarnFutureDate(Boolean,Date);
external function string 40 SHDClassSpecPasteNameObjects(Integer);
remote procedure SHVc_PasteShipMode(var record SHVc);
remote procedure SHVc_PastePosCode(var record SHVc,Integer);
remote procedure SHVc_PasteSerialNr(var record SHVc,Integer,var string);
external updating procedure RecordActionSH_Print(var record SHVc,string,Boolean,Integer);
external function Integer CheckSerialStatus(string,string,var string);
external function val CalculateSerialNrQuantity(string,string,string,Boolean,val,val,val,val);
remote procedure SHSumUp(var record SHVc);
remote procedure CalcSHWeight(var record SHVc,Boolean);
external function Boolean DateWarned(Date,string);
external function Boolean WarnOldRecords(Date,string,LongInt );
remote procedure RefillShipment(var record SHVc,record SHVc);
remote procedure SetDelAddr(string,string,var string,var string,var string,var string,var string,var string,var string,var string,var string,var string,var Integer,var string);
remote updating procedure OkAllStockMovementsSHr(record RcVc);
remote function string 20 FindCustRoute(string,string,string);
external procedure SHVc_PastePackType(var record SHVc,string);	//Edit----------------------Dima  17.04.2015
external procedure SH_RecalculateRowVolume(var record SHVc,integer);
external procedure NP_SumUpRowVolumes(var record SHVc);
external procedure NP_SumUpRowWeight(var record SHVc);
remote updating procedure SHVcToPackListVc(var record SHVc);//Edit----------------------Dima  06.05.2015
remote procedure NP_PasteSender(var record SHVc);
remote procedure NP_PasteSenderWarehouseDesc(var record SHVc);
remote procedure NP_PasteRecipientWarehouseDesc(var record SHVc);//Edit----------------------Dima  06.05.2015
remote function string 255 NPGetDocumentStatusRequest(string,string);//Edit----------------------Dima  06.05.2015
remote updating procedure NPCreateRequestMn(var record SHVc,var string,string);
remote function boolean NPDeleteDocumentRequest(string,string);//Edit----------------------Dima  06.05.2015
remote function boolean CheckENremote(record SHVc, var longint,var string);
remote updating function boolean CheckCounterpartySH(var record SHVc);
remote function string 200 SendSMSNewPost(record SHVc);	//Edit----------------------Dima  30.06.2015

function boolean CheckEN(record SHVc SHr,integer wn)	//Edit----------------------Dima  07.05.2015
begin
	boolean res;
  string 255 msg;
  longint errcode;
  
  errcode = 0;
  msg = "";

	if (CheckENremote(SHr,errcode,msg)) then begin
		res = true;
	end else begin	
		res = false;
		MessageBox(errcode,msg);
	end;
	
	if (WindowState(wn)==Rs_update) then begin
		res = false;
		MessageBox(31059,"");
	end;	
	CheckEN = res;
	return;
end;




global
updating procedure NPPrintENDsm()	//Edit by Victor 07.05.15
begin
  integer wn;
  record SHVc SHr;
  record RcVc RepSpec;
  record ORVc ORr;
  string 255  www,errors;
  record NPSettingsBlock NPSettingsb;
  
  wn = CurWindow;
  GetWindowRecord(wn,SHr);

	if (CheckEN(SHr,wn)) then begin		//Edit----------------------Dima  06.05.2015  	
	  	if(nonblank(SHr.NPDocumentRef)) then begin
	  		BlockLoad(NPSettingsb);
				if(nonblank(SHr.NPIntDocNumber) and (SHr.NPPrinted==0)) then begin
					ORr.SerNr = SHr.OrderNr;
					readfirstmain(ORr,1,true);
					NPCreateRequestMn(SHr, errors, ORr.OrderClass);															//update before printing if necessary
					//PutWindowRecord(wn,SHr);
					//GetWindowRecord(wn,SHr);
				end;	  		
	  		if(ORr.OrderClass=="WEB")then begin
					www = "http://my.novaposhta.ua/orders/printDocument/orders[]/" & SHr.NPDocumentRef & "/type/html/apiKey/" & NPSettingsb.APIkey;
				end else begin
					www = "http://my.novaposhta.ua/orders/printDocument/orders[]/" & SHr.NPDocumentRef & "/type/html/apiKey/" & NPSettingsb.APIkey1;
				end;
				OpenWebBrowser(www);
				SHr.NPPrinted = 1;
	  	end else begin
	  		Messagebox(31057, "");
	 		end;	

  end;
  PutWindowRecord(wn,SHr);
  WindowDoOK(wn,0);
  return;
end;

global
updating procedure NPPrintMarkENDsm()	//Edit by Victor 07.05.15
begin
  integer wn;
  record SHVc SHr;
  record RcVc RepSpec;
  record ORVc ORr;
  string 255  www,errors;
  record NPSettingsBlock NPSettingsb;
  
  
  wn = CurWindow;
  GetWindowRecord(wn,SHr);
  	
	if (CheckEN(SHr,wn)) then begin
	  	if(nonblank(SHr.NPDocumentRef))then begin
	  		BlockLoad(NPSettingsb);
				if(nonblank(SHr.NPIntDocNumber) and nonblank(SHr.NPDocumentRef) and blank(SHr.NPPrinted))then begin
					ORr.SerNr = SHr.OrderNr;
					readfirstmain(ORr,1,true);
					NPCreateRequestMn(SHr, errors, ORr.OrderClass);															//update before printing if necessary
				end;	  		 
				if(ORr.OrderClass=="WEB")then begin
					www = "https://my.novaposhta.ua/orders/printMarkings/orders[]/" & SHr.NPDocumentRef & "/type/html/apiKey/" & NPSettingsb.APIkey;
	  		end else begin
	  			www = "https://my.novaposhta.ua/orders/printMarkings/orders[]/" & SHr.NPDocumentRef & "/type/html/apiKey/" & NPSettingsb.APIkey1;
	  		end;
				OpenWebBrowser(www);
				SHr.NPPrinted = 1;
	  	end else begin
				MessageBox(31057,"");	
			end;
  end;
  PutWindowRecord(wn,SHr);
  WindowDoOK(wn,0);
  return;
end;

global
updating procedure NPPrintMarkZebraENDsm()	//Edit by Victor 07.05.15
begin
  integer wn;
  record SHVc SHr;
  record RcVc RepSpec;
  record ORVc ORr;
  string 255  www,errors;
  record NPSettingsBlock NPSettingsb;
  
  
  wn = CurWindow;
  GetWindowRecord(wn,SHr);
  	
	if (CheckEN(SHr,wn)) then begin
	  	if(nonblank(SHr.NPDocumentRef))then begin
	  		BlockLoad(NPSettingsb);
				if(nonblank(SHr.NPIntDocNumber) and nonblank(SHr.NPDocumentRef) and blank(SHr.NPPrinted))then begin
					ORr.SerNr = SHr.OrderNr;
					readfirstmain(ORr,1,true);
					NPCreateRequestMn(SHr, errors, ORr.OrderClass);															//update before printing if necessary
				end;	  		 
				if(ORr.OrderClass=="WEB")then begin
					www = "https://my.novaposhta.ua/orders/printMarkings/orders[]/" & SHr.NPDocumentRef & "/type/pdf/apiKey/" & NPSettingsb.APIkey & "/zebra/zebra";
	  		end else begin
	  			www = "https://my.novaposhta.ua/orders/printMarkings/orders[]/" & SHr.NPDocumentRef & "/type/pdf/apiKey/" & NPSettingsb.APIkey1 & "/zebra/zebra";
	  		end;
				OpenWebBrowser(www);
				SHr.NPPrinted = 1;
	  	end else begin
				MessageBox(31057,"");	
			end;
  end;
  PutWindowRecord(wn,SHr);
  WindowDoOK(wn,0);
  return;
end;

global
updating procedure NPCreateENDsm()	//Edit by Victor 28.04.15
begin
  integer wn;
  record SHVc SHr;
  record RcVc RepSpec;
	record ORVc ORr;
  string 255 errors, www;
  record NPSettingsBlock NPSettingsb;
  
  
  wn = CurWindow;
  GetWindowRecord(wn,SHr);
	if (blank(SHr.NPIntDocNumber)) then begin
			if(CheckCounterpartySH(SHr)==false) then begin
				MessageBox(31047,0);
				goto LBreakNPCreateENDsm;
			end;
	end;
	
	if (CheckEN(SHr,wn)) then begin
			ORr.SerNr = SHr.OrderNr;
			readfirstmain(ORr,1,true);
	  	NPCreateRequestMn(SHr,errors,ORr.OrderClass);
	  	if (nonblank(errors)) then begin	//NewPost's response
				MessageBox(0,errors);
			end;
  end;
  
  PutWindowRecord(wn,SHr);
  WindowDoOK(wn,0);
  LBreakNPCreateENDsm:;
  return;
end;

global //Edit***************************Sasha2,12:00 22.01.2015 {
updating procedure OrderedToShipSHDsm()
begin 
	integer wn;
	record SHVc SHr;
	row SHVc SHrw;
	integer rwcnt,i;

	wn = CurWindow;
	GetWindowRecord(wn,SHr);
  rwcnt = MatRowCnt(SHr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SHr,i,SHrw);
    if (NonBlank(SHrw.ArtCode)) then begin
      SHrw.Ship = SHrw.Ordered;
      MatRowPut(SHr,i,SHrw);
    end;
  end;
	PutWindowrecord(wn,SHr);

	return;
end; //Edit***************************Sasha2,12:00 22.01.2015 }



global updating
procedure  ShowPackListSHDsm()	//Edit----------------------Dima  06.05.2015
begin
	integer wn,nwn;
	record SHVc SHr;
	record PackListVc PListr;

	wn = CurWindow;
	GetWindowRecord(wn,SHr);
	DeselectWindow(wn,false);
  SHVcToPackListVc(SHr);
  PListr.SerNr = SHr.SerNr;
  if (ReadFirstMain(PListr,1,true)) then begin
  	nwn = OpenWindow("PackListDClass",0,wn,"","",PListr);
  end;
  
end;



global updating
procedure  NPGetDocStatusDsm()	//Edit----------------------Dima  06.05.2015
begin
	integer wn,nwn;
	string 255 msg;
	record SHVc SHr;
	record ORVc ORr;
	integer i,rwcnt;
	row SHVc SHrw;

	wn = CurWindow;
	GetWindowRecord(wn,SHr);
	DeselectWindow(wn,false);
  if (nonblank(SHr.NPIntDocNumber)) then begin
  	ORr.SerNr = SHr.OrderNr;
		readfirstmain(ORr,1,true);
  	msg = NPGetDocumentStatusRequest(SHr.NPIntDocNumber,ORr.OrderClass);
  	
  	if (SHr.NPStatus!=msg) then begin
  		SHr.NPStatus = msg;
  	  PutWindowRecord(wn,SHr);
  		WindowDoOK(wn,0);
  	end;	
  	MessageBox(0,msg);
  end; 
end;

global 
procedure  NPDeleteENDsm()	//Edit----------------------Dima  06.05.2015
begin
	integer wn,nwn;
	string 255 msg;
	record SHVc SHr;
	record ORVc ORr;
	integer i,rwcnt;
	row SHVc SHrw;

	wn = CurWindow;
	GetWindowRecord(wn,SHr);
  if (nonblank(SHr.NPIntDocNumber)) then begin
  	ORr.SerNr = SHr.OrderNr;
		readfirstmain(ORr,1,true);
		if (NPDeleteDocumentRequest(SHr.NPDocumentRef,ORr.OrderClass)) then begin
			SHr.NPIntDocNumber = "";
			SHr.NPCostOnSite = "";
			SHr.NPDocumentRef = "";
			SHr.NPStatus = "";
			SHr.NPStatusCode = 0;
			PutWindowrecord(wn,SHr);
		end;
  end; 
end;


global 
procedure  NPSendSMSDsm()	//Edit----------------------Dima  06.05.2015
begin
	integer wn,nwn;
	string 255 msg;
	record SHVc SHr;

	wn = CurWindow;
	GetWindowRecord(wn,SHr);
  if (nonblank(SHr.NPIntDocNumber) and (SHr.OKFlag>0)) then begin
			msg = SendSMSNewPost(SHr);
			if (nonblank(msg)) then begin
				MessageBox(0,msg);
			end else begin
				MessageBox(31096,"");				
			end;
  end; 
end;



procedure SHChangeShip(record SHVc SHr,Integer rownr)
BEGIN
  SHVc_PasteShip(SHr,rownr);
  SHSumUp(SHr);  
  RETURN;          
END;

global
procedure SHPackagesDClassButtonFlags(Integer wn,var Boolean duplOK,var Boolean newOK,var Boolean saveOK,var Boolean restOK)
begin
  duplOK = false;
  newOK = false;
  return;
end;

function boolean SHPackagesDClassPackTypeEFAfter(Integer wn,Integer rownr,Integer changed)
begin
  record SHPackagesVc SHPr;
  row SHPackagesVc SHPrw;
  record PackTypeVc PTr;
  
  if (changed!=0 and rownr>=0) then begin
    GetWindowRecord(wn,SHPr);
    MatRowGet(SHPr,rownr,SHPrw);
    PTr.Code = SHPrw.PackType;
    if (ReadFirstMain(PTr,1,true)) then begin
      SHPrw.PackComment = PTr.Comment;
      SHPrw.Height = PTr.Height;
      SHPrw.Length = PTr.Length;
      SHPrw.Width = PTr.Width;
      SHPrw.MeasurementSystem = PTr.MeasurementSystem;
    end else begin
      SHPrw.PackType = "";
    end;
    MatRowPut(SHPr,rownr,SHPrw);
    PutWindowRecord(wn,SHPr);
  end;
  return;
end;

function boolean SHPackagesDClassHeightEFAfter(Integer wn,Integer rownr,Integer changed)
begin
  record SHPackagesVc SHPr;
  row SHPackagesVc SHPrw;
  
  if (changed!=0 and rownr>=0) then begin
    GetWindowRecord(wn,SHPr);
    MatRowGet(SHPr,rownr,SHPrw);
    if (nonblank(SHPrw.PackType)) then begin
      SHPrw.PackType = "";
      MatRowPut(SHPr,rownr,SHPrw);
      PutWindowRecord(wn,SHPr);
    end;
  end;
  return;
end;

function boolean SHPackagesDClassWidthEFAfter(Integer wn,Integer rownr,Integer changed)
begin
  record SHPackagesVc SHPr;
  row SHPackagesVc SHPrw;
  
  if (changed!=0 and rownr>=0) then begin
    GetWindowRecord(wn,SHPr);
    MatRowGet(SHPr,rownr,SHPrw);
    if (nonblank(SHPrw.PackType)) then begin
      SHPrw.PackType = "";
      MatRowPut(SHPr,rownr,SHPrw);
      PutWindowRecord(wn,SHPr);
    end;
  end;
  return;
end;

function boolean SHPackagesDClassLengthEFAfter(Integer wn,Integer rownr,Integer changed)
begin
  record SHPackagesVc SHPr;
  row SHPackagesVc SHPrw;
  
  if (changed!=0 and rownr>=0) then begin
    GetWindowRecord(wn,SHPr);
    MatRowGet(SHPr,rownr,SHPrw);
    if (nonblank(SHPrw.PackType)) then begin
      SHPrw.PackType = "";
      MatRowPut(SHPr,rownr,SHPrw);
      PutWindowRecord(wn,SHPr);
    end;
  end;
  return;
end;

function boolean SHPackagesDClassMeasurementEFAfter(Integer wn,Integer rownr,Integer changed)
begin
  record SHPackagesVc SHPr;
  row SHPackagesVc SHPrw;
  
  if (changed!=0 and rownr>=0) then begin
    GetWindowRecord(wn,SHPr);
    MatRowGet(SHPr,rownr,SHPrw);
    if (nonblank(SHPrw.PackType)) then begin
      SHPrw.PackType = "";
      MatRowPut(SHPr,rownr,SHPrw);
      PutWindowRecord(wn,SHPr);
    end;
  end;
  return;
end;

global
function Boolean SHPackagesDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "PackType": res = SHPackagesDClassPackTypeEFAfter(wn,rownr,changed);
    case "Height": res = SHPackagesDClassHeightEFAfter(wn,rownr,changed);
    case "Width": res = SHPackagesDClassWidthEFAfter(wn,rownr,changed);
    case "Length": res = SHPackagesDClassLengthEFAfter(wn,rownr,changed);
    case "MeasurementSystem": res = SHPackagesDClassMeasurementEFAfter(wn,rownr,changed);
  end;
  SHPackagesDClassAfterEditField = res;
  RETURN;
END;

function Boolean SHDClassShipEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record SHVc SHr;
  Boolean res;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,SHr);
    SHChangeShip(SHr,rownr);
    PutWindowRecord(wn,SHr);    
  end;
  SHDClassShipEFAfter = res;
  RETURN;
END;

function Boolean SHDClassPosCodeEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  record SHVc SHr;
  Boolean res;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,SHr);
    SHVc_PastePosCode(SHr,rownr);
    PutWindowRecord(wn,SHr);    
  end;
  SHDClassPosCodeEFAfter = res;
  RETURN;
END;

function Boolean SHDClassUnitXvalEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  row SHVc SHrw;
  record SHVc SHr;
  Boolean res;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,SHr);
    MatRowGet(SHr,rownr,SHrw);
    SHrw.Ship = CalculateSerialNrQuantity(SHrw.ArtCode,"","",false,SHrw.UnitXval,SHrw.UnitYval,SHrw.UnitZval,SHrw.Ship);
    MatRowPut(SHr,rownr,SHrw);
    SHChangeShip(SHr,rownr);
    PutWindowRecord(wn,SHr);    
  end;
  SHDClassUnitXvalEFAfter = res;
  RETURN;
END;

function Boolean SHDClassUnitYvalEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  row SHVc SHrw;
  record SHVc SHr;
  Boolean res;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,SHr);
    MatRowGet(SHr,rownr,SHrw);
    SHrw.Ship = CalculateSerialNrQuantity(SHrw.ArtCode,"","",false,SHrw.UnitXval,SHrw.UnitYval,SHrw.UnitZval,SHrw.Ship);
    MatRowPut(SHr,rownr,SHrw);
    SHChangeShip(SHr,rownr);
    PutWindowRecord(wn,SHr);    
  end;
  SHDClassUnitYvalEFAfter = res;
  RETURN;
END;

function Boolean SHDClassUnitZvalEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  row SHVc SHrw;
  record SHVc SHr;
  Boolean res;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,SHr);
    MatRowGet(SHr,rownr,SHrw);
    SHrw.Ship = CalculateSerialNrQuantity(SHrw.ArtCode,"","",false,SHrw.UnitXval,SHrw.UnitYval,SHrw.UnitZval,SHrw.Ship);    
    MatRowPut(SHr,rownr,SHrw);
    SHChangeShip(SHr,rownr);
    PutWindowRecord(wn,SHr);    
  end;
  SHDClassUnitZvalEFAfter = res;
  RETURN;
END;

function Boolean SHDClassSerialNrEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record SHVc SHr;
  Boolean res;
  string 255 tstr;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,SHr);
    SHVc_PasteSerialNr(SHr,rownr,tstr);    
    if (nonblank(tstr)) then begin
      MessageBox(0,tstr);
    end;    
    PutWindowRecord(wn,SHr);    
  end;
  SHDClassSerialNrEFAfter = res;
  RETURN;
END;

function Boolean SHDClassShipDateEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record SHVc SHr;
  Boolean res;
  string 255 tstr;
  
  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,SHr);
    if (DateWarned(SHr.ShipDate,"SHVc")) then begin
      MessageBox(1045,tstr);
    end;
    if (WarnOldRecords(SHr.ShipDate,"SHVc",SHr.SerNr)) then begin
      MessageBox(2020,tstr);
    end;
    WarnFutureDate(true,SHr.ShipDate);
//JJCS    
  end;
  SHDClassShipDateEFAfter = res;
  RETURN;
END;

function Boolean SHDClassLocationEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  record SHVc SHr;
  record SHVc SH2r;
  Boolean res;
  string 255 tstr;
  Integer insertmode;
  
  insertmode = 1;//Rs_insert
  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,SHr);
    if (WindowState(wn)==insertmode) then begin
      SH2r.CustCode = "NIL";
    end else begin
      GetPrevWindowRecord(wn,SH2r);
    end;
    RefillShipment(SHr,SH2r);
    SHr.Sorting = FindCustRoute(SHr.CustCode,SHr.Location,SHr.DelAddrCode);
    SHSumUp(SHr);
    PutWindowRecord(wn,SHr);
  end;
  SHDClassLocationEFAfter = res;
  RETURN;
END;

function Boolean SHDClassDelAddrCodeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record SHVc SHr;
  record SHVc SH2r;
  Boolean res;
  string 255 name,s1,s2,s3,s4,s5,country,region,taxtemplatecode,vatcode,dummy;
  Integer exportflag;

  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,SHr);
    SetDelAddr(SHr.CustCode,SHr.DelAddrCode,name,s1,s2,s3,s4,s5,country,region,taxtemplatecode,vatcode,exportflag,dummy);
    SHr.Addr0 = name;
    SHr.Addr1 = s1;
    SHr.Addr2 = s2;
    SHr.Addr3 = s3;
    SHr.DelAddr3 = s4;
    SHr.DelAddr4 = s5;
    SHr.Region = region;
    SHr.Sorting = FindCustRoute(SHr.CustCode,SHr.Location,SHr.DelAddrCode);
    PutWindowRecord(wn,SHr);    
  end;
  SHDClassDelAddrCodeEFAfter = res;
  RETURN;
END;

procedure FillFreightInfo(record SHVc SHr)
begin
  record FreightCompanyVc FCr;
  
  FCr.Code = SHr.FreightCode;
  if (ReadFirstMain(FCr,1,true)) then begin
    SHr.FreightCompany = FCr.Company;
    SHr.FreightCompanyRegNr = FCr.CompanyRegNr;
    SHr.TruckInfo = FCr.TruckInfo;
    SHr.Driver = FCr.Driver;
    SHr.CMRText = FCr.CMRText;
  end else begin
    Beep;
  end;
  return;
end;

function Boolean SHDClassFreightCodeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record SHVc SHr;
  record SHVc SH2r;
  Boolean res;

  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,SHr);
    if (nonblank(SHr.FreightCode)) then begin
      FillFreightInfo(SHr);
      PutWindowRecord(wn,SHr);
    end;
  end;
  SHDClassFreightCodeEFAfter = res;
  RETURN;
END;

function Boolean SHDClassPackageTypeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record PackTypeVc PTr;
  record SHVc SHr;
  row SHVc SHrw;
  Boolean res;

  res = true;
  if (changed!=0) then begin
    if (rownr>-1) then begin
      GetWindowRecord(wn,SHr);
      MatRowGet(SHr,rownr,SHrw);
      if (nonblank(SHrw.PackageType)) then begin
        PTr.Code = SHrw.PackageType;
        if (ReadFirstMain(PTr,1,true)) then begin
          SHrw.PackageDesc = PTr.Comment;
          MatRowPut(SHr,rownr,SHrw);
        end else begin
          Beep;
        end;
        PutWindowRecord(wn,SHr);
      end;
    end;
  end;
  SHDClassPackageTypeEFAfter = res;
  RETURN;
END;

function Boolean SHDClassRowPackagesTypeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record SHVc SHr;
  row SHVc SHrw;
  Boolean res;
  Integer i,rwcnt;

  res = true;
  if (changed!=0) then begin
    if (rownr>-1) then begin
      GetWindowRecord(wn,SHr);
      SHr.Packages = BlankVal;
      rwcnt = MatRowCnt(SHr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(SHr,i,SHrw);
        SHr.Packages = SHr.Packages + SHrw.RowPackages;
      end;
      PutWindowRecord(wn,SHr);
    end;
  end;
  SHDClassRowPackagesTypeEFAfter = res;
  RETURN;
END;

function Boolean SHDClassShipModeEFAfter(Integer wn,Boolean changedf)
BEGIN
  record SHVc SHr;
  row SHVc SHrw;
  Boolean res;
  Integer i,rwcnt;

  res = true;
  if (changedf) then begin
     GetWindowRecord(wn,SHr);
     SHVc_PasteShipMode(SHr);
     PutWindowRecord(wn,SHr);
  end;
  SHDClassShipModeEFAfter = res;
  RETURN;
END;

function Boolean SHDClassDelCountryEFAfter(Integer wn,Boolean changedf)
begin  
  record SHVc SHr;

  if (changedf) then begin  
    GetWindowRecord(wn,SHr);
    SHVc_PasteDelCountry(SHr,WindEFstr(wn));
    PutWindowRecord(wn,SHr);
  end;
  SHDClassDelCountryEFAfter = true;
  return;
end;


function Boolean SHDClassNPPackTypeEFAfter(Integer wn,Boolean changedf,string fieldname)	//Edit----------------------Dima  17.04.2015
begin  
  record SHVc SHr;

  if (changedf) then begin  
    GetWindowRecord(wn,SHr);
    SHVc_PastePackType(SHr,fieldname);
    PutWindowRecord(wn,SHr);
  end;
  SHDClassNPPackTypeEFAfter = true;
  return;
end;	



function Boolean SHDClassNPSizesEFAfter(Integer wn,Boolean changedf,string fieldname)	//Edit----------------------Dima  17.04.2015
begin  
  record SHVc SHr;
  integer number;
  
  number = StringToInt(Right(fieldname,1));

  if (changedf) then begin  
    GetWindowRecord(wn,SHr);
    SH_RecalculateRowVolume(SHr,number);
    PutWindowRecord(wn,SHr);
  end;
  SHDClassNPSizesEFAfter = true;
  return;
end;


function Boolean SHDClassNPVolumeEFAfter(Integer wn,Boolean changedf)	//Edit----------------------Dima  17.04.2015
begin  
  record SHVc SHr;
//MessageBox(0,"SHDClassNPVolumeEFAfter");
  if (changedf) then begin  
    GetWindowRecord(wn,SHr);
   // MessageBox(0,"then");
    NP_SumUpRowVolumes(SHr);
    PutWindowRecord(wn,SHr);
  end;
  SHDClassNPVolumeEFAfter = true;
  return;
end;	

function Boolean SHDClassNPWeightEFAfter(Integer wn,Boolean changedf)	//Edit----------------------Dima  17.04.2015
begin  
  record SHVc SHr;

  if (changedf) then begin  
    GetWindowRecord(wn,SHr);
    NP_SumUpRowWeight(SHr);
    PutWindowRecord(wn,SHr);
  end;
  SHDClassNPWeightEFAfter = true;
  return;
end;	

function Boolean SHDClassNPSenderEFAfter(Integer wn,Boolean changedf)	//Edit----------------------Dima  24.04.2015
begin  
  record SHVc SHr;

  if (changedf) then begin  
    GetWindowRecord(wn,SHr);
    NP_PasteSender(SHr);
    PutWindowRecord(wn,SHr);
  end;
  SHDClassNPSenderEFAfter = true;
  return;
end;

function Boolean SHDClassSenderWarehouseEFAfter(Integer wn,Boolean changedf)	//Edit----------------------Dima  24.04.2015
begin  
  record SHVc SHr;

  if (changedf) then begin  
    GetWindowRecord(wn,SHr);
    NP_PasteSenderWarehouseDesc(SHr);
    PutWindowRecord(wn,SHr);
  end;
  SHDClassSenderWarehouseEFAfter = true;
  return;
end;

function Boolean SHDClassRecipientWarehouseEFAfter(Integer wn,Boolean changedf)	//Edit----------------------Dima  24.04.2015
begin  
  record SHVc SHr;

  if (changedf) then begin  
    GetWindowRecord(wn,SHr);
    NP_PasteRecipientWarehouseDesc(SHr);
    PutWindowRecord(wn,SHr);
  end;
  SHDClassRecipientWarehouseEFAfter = true;
  return;
end;


global
function Boolean SHDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
	
  if (currentuser!="SAUNOK") then begin //Edit-------------------Vitalii 10:43 25.12.2015
	  switch (fieldname) begin
		case "RowPackages": res = SHDClassRowPackagesTypeEFAfter(wn,fn,rownr,changed);
		case "PackageType": res = SHDClassPackageTypeEFAfter(wn,fn,rownr,changed);
		case "DelAddrCode": res = SHDClassDelAddrCodeEFAfter(wn,fn,rownr,changed);
		case "FreightCode": res = SHDClassFreightCodeEFAfter(wn,fn,rownr,changed);
		case "Location": res = SHDClassLocationEFAfter(wn,rownr,changed!=0);
		case "ShipDate": res = SHDClassShipDateEFAfter(wn,fn,rownr,changed);
		case "SerialNr": res = SHDClassSerialNrEFAfter(wn,fn,rownr,changed);
		case "UnitZval": res = SHDClassUnitZvalEFAfter(wn,fn,rownr,changed);
		case "UnitYval": res = SHDClassUnitYvalEFAfter(wn,fn,rownr,changed);
		case "UnitXval": res = SHDClassUnitXvalEFAfter(wn,fn,rownr,changed);
		case "Ship": res = SHDClassShipEFAfter(wn,fn,rownr,changed);
		case "PosCode": res = SHDClassPosCodeEFAfter(wn,rownr,changed);
		case "ShipMode": res = SHDClassShipModeEFAfter(wn,changed!=0);
		case "DelCountry": res = SHDClassDelCountryEFAfter(wn,changed!=0);
		case "NPPackType1" : res = SHDClassNPPackTypeEFAfter(wn,changed,fieldname);	//Edit----------------------Dima  17.04.2015
		case "NPPackType2" : res = SHDClassNPPackTypeEFAfter(wn,changed,fieldname);
		case "NPPackType3" : res = SHDClassNPPackTypeEFAfter(wn,changed,fieldname);
		case "NPPackType4" : res = SHDClassNPPackTypeEFAfter(wn,changed,fieldname);
		case "NPPackType5" : res = SHDClassNPPackTypeEFAfter(wn,changed,fieldname);	
		case "NPLength1" : res = SHDClassNPSizesEFAfter(wn,changed,fieldname); 
		case "NPLength2" : res = SHDClassNPSizesEFAfter(wn,changed,fieldname);
		case "NPLength3" : res = SHDClassNPSizesEFAfter(wn,changed,fieldname);
		case "NPLength4" : res = SHDClassNPSizesEFAfter(wn,changed,fieldname);
		case "NPLength5" : res = SHDClassNPSizesEFAfter(wn,changed,fieldname); 
		case "NPWidth1" : res = SHDClassNPSizesEFAfter(wn,changed,fieldname);
		case "NPWidth2" : res = SHDClassNPSizesEFAfter(wn,changed,fieldname);
		case "NPWidth3" : res = SHDClassNPSizesEFAfter(wn,changed,fieldname);
		case "NPWidth4" : res = SHDClassNPSizesEFAfter(wn,changed,fieldname);
		case "NPWidth5" : res = SHDClassNPSizesEFAfter(wn,changed,fieldname);
		case "NPHeight1" : res = SHDClassNPSizesEFAfter(wn,changed,fieldname);
		case "NPHeight2" : res = SHDClassNPSizesEFAfter(wn,changed,fieldname);
		case "NPHeight3" : res = SHDClassNPSizesEFAfter(wn,changed,fieldname);
		case "NPHeight4" : res = SHDClassNPSizesEFAfter(wn,changed,fieldname);
		case "NPHeight5" : res = SHDClassNPSizesEFAfter(wn,changed,fieldname);		
		case "NPRowVolume1" : res = SHDClassNPVolumeEFAfter(wn,changed);	
		case "NPRowVolume2" : res = SHDClassNPVolumeEFAfter(wn,changed);
		case "NPRowVolume3" : res = SHDClassNPVolumeEFAfter(wn,changed);
		case "NPRowVolume4" : res = SHDClassNPVolumeEFAfter(wn,changed);
		case "NPRowVolume5" : res = SHDClassNPVolumeEFAfter(wn,changed);	
		case "NPRowWeight1" : res = SHDClassNPWeightEFAfter(wn,changed);
		case "NPRowWeight2" : res = SHDClassNPWeightEFAfter(wn,changed);
		case "NPRowWeight3" : res = SHDClassNPWeightEFAfter(wn,changed);
		case "NPRowWeight4" : res = SHDClassNPWeightEFAfter(wn,changed);
		case "NPRowWeight5" : res = SHDClassNPWeightEFAfter(wn,changed);
		case "NPSender" : res = SHDClassNPSenderEFAfter(wn,changed);
		case "NPSenderWarehouse" : res = SHDClassSenderWarehouseEFAfter(wn,changed);
		case "NPRecipientWarehouse" : res = SHDClassRecipientWarehouseEFAfter(wn,changed);		//Edit----------------------Dima  20.04.2015
	end;
  end else begin //Edit-------------------Vitalii 10:44 25.12.2015
	res = true;
  end;
  SHDClassAfterEditField = res;
  RETURN;
END;

global
updating procedure PrintSHL(Integer wn,Boolean previewf)
BEGIN
  record SHVc SHr;
  Integer i;
  
  i = 1;
  while (GetRecordFromBrowse(SHr,wn,i)) begin
    RecordActionSH_Print(SHr,previewf,true,0);
    i = i + 1;
  end;
  RETURN;
END;

global
updating function Boolean SHDClassPrint(Integer wn,Boolean previewf)
BEGIN
  Boolean res;
  record SHVc SHr;
  Integer normalmode;
  
  normalmode = 0;//Rs_normal
  DeselectWindow(wn,false);
  GetWindowRecord(wn,SHr);
  if (WindowState(wn)==normalmode) then begin 
    switch (SHr.OKFlag) begin
      case 0:
        if (PrintDocument(SHr,"Sh2Form",previewf)) then begin end;
      case 1:
        RecordActionSH_Print(SHr,previewf,true,0);
//        if (PrintDocument(SHr,"Sh1Form",previewf)) then begin end;
    end;  
  end;
  res = true;
  SHDClassPrint = res;
  RETURN;
END;

global
function Boolean SHDClassInsertRowTest(Integer wn,Integer rownr)
begin
  record SHVc SHr;
  row SHVc SHrw;
  Boolean res;
  Integer updatemode;
  
  res = true;
  switch (WindowState(wn)) begin
    case Rs_normal:
      GetWindowRecord(wn,SHr);
      if (SHr.OKFlag!=0) then begin res = false; end;
    case Rs_insert:
      res = true;
    case Rs_update:
      GetPrevWindowRecord(wn,SHr);
      if (SHr.OKFlag!=0) then begin res = false; end;
    otherwise
      res = false;
  end;
  if (res) then begin
    MatRowGet(SHr,rownr,SHrw);
    switch (SHrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        res = false;
    end;
  end;
  SHDClassInsertRowTest = res;
  return;
end;

global
function Boolean SHDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record SHVc SHr;
  row SHVc SHrw;
  Boolean res,puf;
  record INVc INr;
  Integer i,rwcnt;
  Integer updatemode;
  
  updatemode = 2;//Rs_normal
  res = true;
  switch (WindowState(wn)) begin
    case Rs_update:
      GetPrevWindowRecord(wn,SHr);    
      if (SHr.OKFlag!=0) then begin
        res = false;
      end;
    case Rs_insert:
      GetWindowRecord(wn,SHr);    
    case Rs_normal:
      GetWindowRecord(wn,SHr);    
  end;
  if (res) then begin
    MatRowGet(SHr,rownr,SHrw);
    switch (SHrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        res = false;
    end;
  end;
  if (res) then begin
    MatRowGet(SHr,rownr,SHrw);
    if (SHrw.Ship!=0) then begin
      if (ReadFirstItem(SHrw.ArtCode,INr,false,false)) then begin
        if (INr.ItemType==kItemTypeStructured) then begin
          if (INr.ExplodeRec!=0) then begin
            rwcnt = MatRowCnt(SHr);
            i = rownr + 1;
            while (i<rwcnt) begin
              MatRowGet(SHr,i,SHrw); 
              if (SHrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
                MatRowDelete(SHr,i);
                puf = true;
              end else begin
                i = rwcnt;
              end;
            end;
          end;
        end;
      end;
    end;
    if (puf) then begin
      PutWindowRecord(wn,SHr);    
    end;
  end;
  SHDClassDeleteRowTest = res;
  return;
end;

global
function Boolean SHDClassOnOverStrike(Integer wn,Integer rownr)
begin
  record SHVc SHr;

  if (rownr>=0) then begin
    GetWindowRecord(wn,SHr);        
    SHSumup(SHr);
    PutWindowRecord(wn,SHr);   
  end;
  SHDClassOnOverStrike = true;
  return;
end;

function Boolean SHDClassButtonAction(string whichone,Integer wn,Integer value)
begin
  Boolean res;
  record SHVc SHr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,SHr);
    if (SHr.OKFlag!=0) then begin
      res = false;
      if (UserCanAction("UnOKAll",false)) then begin
        res = true;
      end;
    end;
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,SHr);
    if (SHr.OKFlag!=0) then begin
      res = false;
    end;
  end;  
  SHDClassButtonAction = res;
  RETURN;
end;

global
function Boolean SHDClassOKFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  
  res = SHDClassButtonAction("OKFlag",wn,value);
  SHDClassOKFlagButtonAction = res;
  RETURN;
END;

global
function Boolean SHDClassCheck1ButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  
  res = SHDClassButtonAction("Check1",wn,value);
  SHDClassCheck1ButtonAction = res;
  RETURN;
END;

global
function Boolean SHDClassCheck2ButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  
  res = SHDClassButtonAction("Check2",wn,value);
  SHDClassCheck2ButtonAction = res;
  RETURN;
END;



global
function Boolean SHDClassNPPrintedButtonAction(Integer wn,Integer value)		//Edit----------------------Dima  08.05.2015
BEGIN
  Boolean res;
  record SHVc SHr;
  
  res = false;
  
   switch (WindowState(wn)) begin
  	case Rs_normal: 
    		GetWindowRecord(wn,SHr);
      	if (SHr.OKFlag==0 and (SHr.NPPrinted>0)) then begin				//user shoudn't click "unOked" NPPrinted button, he only can "unOk" this button
					if (UserCanAction("AllowEditSHNewPost",false)) then begin
    		    res = true;
    		  end;
				end;    		
		case Rs_update:
    		GetPrevWindowRecord(wn,SHr);
      	if (SHr.OKFlag==0 and (SHr.NPPrinted>0)) then begin				//user shoudn't click "unOked" NPPrinted button, he only can "unOk" this button
					if (UserCanAction("AllowEditSHNewPost",false)) then begin
    		    res = true;
    		  end;
				end;    		
   end;	
  SHDClassNPPrintedButtonAction = res;
  RETURN;
END;

global
function Boolean SHDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record SHVc SHr;
  record SHVc SH2r;
  row SHVc SHrw;
  string 200 tstr;
  
  res = true;

  GetWindowRecord(wn,SHr);
  switch (wnst) begin
    case Rs_insert:
      switch (fieldname) begin
        case "TaxAdminServSeal": res = blank(SHr.TaxAdminServSeal);
      end;
    case Rs_update:
      GetPrevWindowRecord(wn,SH2r);
      if (SH2r.OKFlag!=0) then begin
        switch (fieldname) begin
          case "TransportNumber":
          case "Volyme":
          case "Weight":
          case "TotWeight":
          case "TotVolume":
          case "Packages":
          case "LangCode":
          case "CurncyCode":
          case "DeclaredVal":
          case "TaxAdminServSeal":
          otherwise
            res = false;
        end;
      end;
  end;
  if (res) then begin
    if (rownr>-1) then begin
      switch (fieldname) begin
        case "ArtCode":
          res = false;
        case "VARList":
          res = false;
        case "Recepy":
          res = false;
        case "Ordered":
          res = false;
        case "InStock":
          res = false;
        case "Ship": 
          MatRowGet(SHr,rownr,SHrw);
          switch (SHrw.stp) begin
            case kInvoiceRowTypeStructuredItemComponent:
              res = false;
          end;
        case "Spec": 
          if (HasLocalization("PRT")) then begin
            MatRowGet(SHr,rownr,SHrw);
            if (nonblank(SHrw.ArtCode)) then begin
              res = false;
            end;
          end else begin
            if (UserCanAction("ChangeSHItemSpec",true)==false) then begin res = false; end;
          end;
        otherwise
          if (SH2r.OKFlag!=0) then begin  // previous
            res = false;
            if (changed!=0) then begin
              MessageBox(1067,tstr);
            end;
          end;
      end;
    end;
  end;
  
  
  switch (fieldname) begin
    case "BBCostPrice": res = false;
    case "Name": res = HasLocalization("PRT")==false;
    case "TaxAuthID": res = true;
  end;
  
  if (SHr.NPPrinted==0) then begin		//Edit----------------------Dima  18.05.2015
	  switch (fieldname) begin
      case "NPSender":
      	res = true;
        if (UserCanAction("AllowEditSHNewPost",false)==false) then begin res = false; end;
      case "NPCitySender":
				res = true;      
        if (UserCanAction("AllowEditSHNewPost",false)==false) then begin res = false; end;
      case "NPSenderWarehouse":
      	res = true;
        if (UserCanAction("AllowEditSHNewPost",false)==false) then begin res = false; end;
      case "NPContactSender":
      	res = true;
        if (UserCanAction("AllowEditSHNewPost",false)==false) then begin res = false; end;
      case "NPSendersPhone":
        if (UserCanAction("AllowEditSHNewPost",false)==false) then begin res = false; end;
      case "NPPayer":
      	res = true;
        if (UserCanAction("AllowEditSHNewPost",false)==false) then begin res = false; end;
      case "NPPaymentMethod":
      	res = true;
        if (UserCanAction("AllowEditSHNewPost",false)==false) then begin res = false; end;
      case "NPServiceType":
      	res = true;
        if (UserCanAction("AllowEditSHNewPost",false)==false) then begin res = false; end;
      case "NPBackDeliveryType":
      	res = true;
        if (UserCanAction("AllowEditSHNewPost",false)==false) then begin res = false; end;
      case "NPBackDeliveryPayer":
      	res = true;
        if (UserCanAction("AllowEditSHNewPost",false)==false) then begin res = false; end;
      case "NPIntDocNumber":
      	res = true;
        if (UserCanAction("AllowEditSHNewPost",false)==false) then begin res = false; end;
    
      otherwise   
      	res = true;
    end; 
   end else begin	      
   		res = false;
   		switch (fieldname) begin
				case "Collector":	res = true;
      end;
   end;
     //Edit-------------------Vitalii 10:43 25.12.2015
	 if (currentuser=="SAUNOK") then begin
		res = true;
	 end;
  SHDClassActiveEditField = res;
  RETURN;
END;

// May not be called SpecPasteName
global
function string 40 DelAddrSClassSpecPName(string defpsname)
begin
  string 40 psname;
  record OrdSettBlock OrdSettRec;
  
  psname = defpsname;
  BlockLoad(OrdSettRec);
  if (OrdSettRec.DelAddrOpt==1) then begin
    psname = "DelAddr2SClass";
  end;
  DelAddrSClassSpecPName = psname;
  return;
end;

// May not be called SpecPasteName
global
function string 40 SerialNrSClassSpecPName(string defpsname)
begin
  string 40 psname;
  record MainStockBlock MainStockRec;
  
  psname = defpsname;
  BlockLoad(MainStockRec);
  if (MainStockRec.NoSerOnPU==1) then begin
    psname = "";
  end;
  SerialNrSClassSpecPName = psname;
  return;
end;

procedure SHDClassSpecPasteNameArtCode(Integer wn,var string psname)
begin
  record SHVc SHr;
  Integer rownr;

  GetWindowRecord(wn,SHr);
  rownr = WindowActiveRow(wn);
  DeselectWindow(wn,false);
  WindowFieldGoto(wn,SHr,rownr,"ArtCode",false);
  return;
end;

global
function string 40 SHDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 40 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "DelAddrCode": psname = DelAddrSClassSpecPName(defpsname);
    case "SerialNr": psname = SerialNrSClassSpecPName(defpsname);
    case "Objects": psname = SHDClassSpecPasteNameObjects(wn);
    case "ArtCode": SHDClassSpecPasteNameArtCode(wn,psname);
  end;
  SHDClassSpecPasteName = psname;
  return;
end;

global
updating procedure OKStockMovSHrDsm()
begin
  record SHVc SHr;
  record RcVc RepSpec;
  Integer wn,i;

  wn = CurWindow;
  GetWindowRecord(wn,SHr);
  if ((WindowState(wn)==0) and (SHr.OKFlag==0)) then begin
    RepSpec.long1 = SHr.SerNr;
    OkAllStockMovementsSHr(RepSpec);
  end;
  return;
end;

global
procedure PickingListDsm()
BEGIN
  record SHVc SHr;
  record RcVc RepSpec;

  Integer wn,i;
  wn = CurWindow;
  GetWindowRecord(wn,SHr);
  RepSpec.f1 = SHr.SerNr;
  RepSpec.Media = mtScreen;
  RepSpec.repname = "PickingListRn";
  RunReport(RepSpec,0);
  RETURN;
END;


global 
procedure OpenAllOrdersSHVc()	//Edit----------------------Dima  25.09.2015
begin
	record SHVc SHr;
	integer nwn,wn;
	RecordNew(SHr);
	nwn = OpenWindow("SHGeneralLClass",0,CurWindow,"","",SHr);
end;

