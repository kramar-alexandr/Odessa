remote procedure SumUpPackList(var record PackListVc);remote updating procedure PackListVcToSHVc(record PackListVc,var record SHVc);function Boolean PackListDClassCodeEFAfter(Integer wn,Integer changed,Integer rownr)begin    record PackListVc PackListr;  record StandBoxesVc StandBoxesr;  row PackListVc PackListrw;  if (changed!=0 and rownr>-1) then begin      GetWindowRecord(wn,PackListr);    MatRowGet(PackListr,rownr,PackListrw);    StandBoxesr.Code = PackListrw.Code;    if (NonBlank(PackListrw.Code) and ReadFirstMain(StandBoxesr,1,true)) then begin      PackListrw.Name = StandBoxesr.Name;      PackListrw.Length = StandBoxesr.Length;      PackListrw.Width = StandBoxesr.Width;      PackListrw.Height = StandBoxesr.Height;      PackListrw.Volume = PackListrw.Height * PackListrw.Width * PackListrw.Length * 0.000001;      PackListrw.Weight = StandBoxesr.Weight;      MatRowPut(PackListr,rownr,PackListrw);    end;    if (Blank(PackListrw.Code)) then begin      PackListrw.Name = "";      PackListrw.Length = BlankVal;      PackListrw.Width = BlankVal;      PackListrw.Height = BlankVal;      PackListrw.Volume = BlankVal;      PackListrw.Weight = BlankVal;      MatRowPut(PackListr,rownr,PackListrw);    end;     SumUpPackList(PackListr);    PutWindowRecord(wn,PackListr);  end;    PackListDClassCodeEFAfter = true;  return;end;function Boolean PackListDClassVolumeEFAfter(Integer wn,Integer changed,Integer rownr)begin    record PackListVc PackListr;  row PackListVc PackListrw;  if (changed!=0 and rownr>-1) then begin      GetWindowRecord(wn,PackListr);    SumUpPackList(PackListr);    PutWindowRecord(wn,PackListr);  end;    PackListDClassVolumeEFAfter = true;  return;end;function Boolean PackListDClassWeightEFAfter(Integer wn,Integer changed,Integer rownr)begin    record PackListVc PackListr;  row PackListVc PackListrw;  if (changed!=0 and rownr>-1) then begin      GetWindowRecord(wn,PackListr);    SumUpPackList(PackListr);    PutWindowRecord(wn,PackListr);  end;    PackListDClassWeightEFAfter = true;  return;end;function Boolean PackListDClassSizesEFAfter(Integer wn,Integer changed,Integer rownr)begin    record PackListVc PackListr;  row PackListVc PackListrw;  if (changed!=0 and rownr>-1) then begin      GetWindowRecord(wn,PackListr);    MatRowGet(PackListr,rownr,PackListrw);    PackListrw.Volume = PackListrw.Height * PackListrw.Width * PackListrw.Length * 0.000001;    MatRowPut(PackListr,rownr,PackListrw);    SumUpPackList(PackListr);    PutWindowRecord(wn,PackListr);  end;    PackListDClassSizesEFAfter = true;  return;end;globalfunction Boolean PackListDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)BEGIN  Boolean res;  switch (fieldname) begin    case "Code": res = PackListDClassCodeEFAfter(wn,changed,rownr);    case "Volume": res = PackListDClassVolumeEFAfter(wn,changed,rownr);    case "Weight": res = PackListDClassWeightEFAfter(wn,changed,rownr);    case "Length" : res = PackListDClassSizesEFAfter(wn,changed,rownr);    case "Width" : res = PackListDClassSizesEFAfter(wn,changed,rownr);    case "Height" : res = PackListDClassSizesEFAfter(wn,changed,rownr);  end;  PackListDClassAfterEditField = res;  RETURN;END;globalfunction Boolean PackListDClassOnOverStrike(Integer wn,Integer rownr)BEGIN  record PackListVc PackListr;  if (rownr>=0) then begin    GetWindowRecord(wn,PackListr);    SumUpPackList(PackListr);    PutWindowRecord(wn,PackListr);      end;  PackListDClassOnOverStrike = true;  RETURN;END;global updating procedure UpdateSHVcFromPackList(record PackListVc PackListr,integer mwn)begin	integer wn,rwcnt,i;	record SHVc SHr;	if (mwn>0) then begin	DeselectWindow(mwn,false);		GetWindowRecord(mwn,SHr);		PackListVcToSHVc(PackListr,SHr);		PutWindowRecord(mwn,SHr);	end;  //UpdateBrowses("SHVc");return;end;globalfunction Boolean PackListDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)BEGIN  Boolean res;  record SHVc SHr;  record PackListVc PackListr;    res = true;    GetWindowRecord(wn,PackListr);  SHr.SerNr = PackListr.SerNr;  if (ReadFirstMain(SHr,1,true)) then begin		if (SHr.NPPrinted>0) then begin			res = false;		end;	end;	  switch (fieldname) begin    case "Code":    case "Length":    case "Width":    case "Height":    case "TotVolume":    case "Volume":    case "Weight":    case "TotVolume":    case "TotWeight":    otherwise      res = true;  end;	if (res==false) then begin		MessageBox(31061,"");	end;		if (fieldname=="SerNr") then begin			res = false;	end;       PackListDClassActiveEditField = res;  RETURN;END;globalfunction Boolean PackListDClassDeleteRowTest(Integer wn,Integer rownr)begin  Boolean res;  record SHVc SHr;  record PackListVc PackListr;  	res = true;  GetWindowRecord(wn,PackListr);  SHr.SerNr = PackListr.SerNr;  if (ReadFirstMain(SHr,1,true)) then begin		if (SHr.NPPrinted>0) then begin			res = false;		end;	end;		if (res==false) then begin		MessageBox(31061,"");	end;  PackListDClassDeleteRowTest = res;  return;end;